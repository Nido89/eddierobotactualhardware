<?xml version="1.0"?>
<doc>
    <assembly>
        <name>User.ObstacleAvoidanceDrive.Y2011.M08</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService">
            <summary>
            Obstacle Avoidance Drive Service
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.MinValidDepth">
            <summary>
            Minimum valid depth reading in millimeters
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.MaxValidDepth">
            <summary>
            Maximum valid depth reading in millimeters
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.Floor">
            <summary>
            This reading has been interpreted as being the floor 
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.NoReading">
            <summary>
            No reading from teh depth camera
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.Near">
            <summary>
            Readings less than 800 millimeters
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.MaxPowerDifferenceBetweenWheels">
            <summary>
            When turning, we want to eliminate drastic differences between wheel power settings.
            not doing so may result in unpractically fast rotation that essentially makes robot 
            uncontrollable
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.SamplingIntervalInSeconds">
            <summary>
            Interval for depth camera and sensor sampling. Decrease for smoother driving but increased cpu cost
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.DefaultDepthCamImageWidth">
            <summary>
            Preferred depth cam image width
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.DefaultDepthcamImageHeight">
            <summary>
            Preferred depth cam image height
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.DefaultRobotWidthInMeters">
            <summary>
            Default robot width
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.DefaultMinimumRotateInPlaceSpeed">
            <summary>
            Default minimum rotation speed
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.DefaultMaximumMotorSpeed">
            <summary>
            Default maximum motor speed
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.DefaultMaxDeltaPower">
            <summary>
            Default maximum change in motor power from one SetPower to another
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.DeadZoneColumnCount">
            <summary>
            Kinect camera has inactive pixel columns at far edge. 
            We use this to calculate proper midpoint of horizontal profile
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.minDepthForOpenSpaceMM">
            <summary>
            The minimum depth in millimeters that is required for space to be considered open.
            This affects how soon the robot will begin turning to avoid obstacles.
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.maxDepthForAnalogSensorMeters">
            <summary>
            The maximum depth, for IR and Sonar sensors to be used in avoidance
            We use the Kinect Mimimum Valid Depth so that sensors will only used where Kinect cannot
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.mainPort">
            <summary>
            Primary contract operations port
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.robotDrivePort">
            <summary>
            Partner service implementing drive contract and actually responsible for moving the robot
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.depthCameraPort">
            <summary>
            DepthCam sensor port
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.infraredSensorArrayPort">
            <summary>
            IR sensor array port
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.sonarSensorArrayPort">
            <summary>
            Sonar port
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.gameControllerPort">
            <summary>
            Game Controller partner
            </summary>
            <remarks>Always create one of these, even if there is no Game Controller attached</remarks>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.gameControllerNotify">
            <summary>
            GameController Notifications Port
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.state">
            <summary>
            Service state
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.submgr">
            <summary>
            Subscription manager port
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.obstacleAvoidanceForm">
            <summary>
            A handle to the main WinForm UI
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.eventsPort">
            <summary>
            Port for the UI to send messages back to here (main service)
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.alternateDrivePort">
            <summary>
            The drive contract service port
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.#ctor(Microsoft.Dss.ServiceModel.Dssp.DsspServiceCreationPort)">
            <summary>
            Initializes a new instance of the ObstacleAvoidanceDriveService class
            </summary>
            <param name="creationPort">The creation port</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.Start">
            <summary>
            Start the service
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.inverseProjectionMatrix">
            <summary>
            Inverse projection matrix for viewspace to pixelspace conversions
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.CreateForm">
            <summary>
            Create the main Windows Form
            </summary>
            <returns>A Dashboard Form</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.OnLoadHandler(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnLoad)">
            <summary>
            Handle the Form Load event for the ObstacleAvoidance Form
            </summary>
            <param name="onLoad">The load message</param>
            <returns>An iterator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.OnClosedHandler(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnClosed)">
            <summary>
            Handle the Form Closed event for the Dashboard Form
            </summary>
            <param name="onClosed">The closed message</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.SubscribeToJoystick">
            <summary>
            Subscribe to the Joystick
            </summary>
            <returns>A Choice</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.JoystickUpdateButtonsHandler(Microsoft.Robotics.Services.GameController.Proxy.UpdateButtons)">
            <summary>
            Handle updates to the buttons on the Gamepad
            </summary>
            <param name="update">The parameter is not used.</param>
            <returns>An Iterator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.OnPIDChangesHandler(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges)">
            <summary>
            Handle PID changes Commands
            </summary>
            <param name="onPIDChanges">The PID change request</param>
            <returns>An Iterator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.InitializeDepthProcessing(Microsoft.Robotics.PhysicalModel.Matrix)">
            <summary>
            Initializes depth processing variables
            </summary>
            <param name="invProjMatrix">Dept camera's inverse projection Matrix</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleEnable(Microsoft.Robotics.Services.Drive.Proxy.EnableDrive)">
            <summary>
            Handles enable operations
            </summary>
            <param name="enable">Enable operation</param>
            <returns>CCR ITask enumerator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleGet(Microsoft.Robotics.Services.Drive.Proxy.Get)">
            <summary>
            Handles get operation
            </summary>
            <param name="get">Get operation</param>
            <returns>CCR ITask enumerator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleDriveHttpGet(Microsoft.Dss.Core.DsspHttp.HttpGet)">
            <summary>
            Http Get handler on Drive port
            </summary>
            <param name="get">HttpGet operation</param>
            <returns>CCR ITask enumerator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleSubscribe(Microsoft.Robotics.Services.Drive.Proxy.Subscribe)">
            <summary>
            Handles subscribe operation
            </summary>
            <param name="subscribe">Subscribe operation</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleReliableSubscribe(Microsoft.Robotics.Services.Drive.Proxy.ReliableSubscribe)">
            <summary>
            Handles reliable subscribe operation
            </summary>
            <param name="subscribe">Subscribe operation</param>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.pendingSetDrivePower">
            <summary>
            Pending power request
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleSetPower(Microsoft.Robotics.Services.Drive.Proxy.SetDrivePower)">
            <summary>
            Handles setPower operation
            </summary>
            <param name="setPower">SetPower operation</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.NormalizeRotationSpeed(Microsoft.Robotics.Services.Drive.Proxy.SetDrivePower)">
            <summary>
            Ensures that rotation speed can not exceed a preset max value
            </summary>
            <param name="setPower">Drive Power object </param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleSetSpeed(Microsoft.Robotics.Services.Drive.Proxy.SetDriveSpeed)">
            <summary>
            Handles SetSpeed operation, which is not implemented in this service
            </summary>
            <param name="setSpeed">SetSpeed operation</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleEncoderReset(Microsoft.Robotics.Services.Drive.Proxy.ResetEncoders)">
            <summary>
            Resets the encoders, not implemented in this service
            </summary>
            <param name="reset">Request message</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleAllStop(Microsoft.Robotics.Services.Drive.Proxy.AllStop)">
            <summary>
            Handles the AllStop message.
            </summary>
            <param name="allStop">The message.</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleRotateDegrees(Microsoft.Robotics.Services.Drive.Proxy.RotateDegrees)">
            <summary>
            Handles the RotateDegrees message.
            </summary>
            <param name="rotate">The message.</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleDriveDistance(Microsoft.Robotics.Services.Drive.Proxy.DriveDistance)">
            <summary>
            Handles the DriveDistance message.
            </summary>
            <param name="drive">The message.</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleHttpQuery(Microsoft.Dss.Core.DsspHttp.HttpQuery)">
            <summary>
            Http query handler
            </summary>
            <param name="query">Query operation</param>
            <returns>CCR ITask enumerator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HandleHttpGet(Microsoft.Dss.Core.DsspHttp.HttpGet)">
            <summary>
            Http get handler
            </summary>
            <param name="get">Get operation</param>
            <returns>CCR ITask enumerator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HttpHandler(System.Net.HttpListenerContext,Microsoft.Ccr.Core.PortSet{Microsoft.Dss.Core.DsspHttp.HttpResponseType,W3C.Soap.Fault})">
            <summary>
            Handles http requests
            </summary>
            <param name="context">Http context</param>
            <param name="responsePort">Response port</param>
            <returns>CCR ITask enumerator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.TryCreateDepthImage(System.Drawing.Bitmap@)">
            <summary>
            Create depth image representation for visual
            </summary>
            <param name="image">DepthImage outcome</param>
            <returns>Boolean indicating success or failure to create the image</returns>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.floorCeilingMinDepths">
            <summary>
            Pre calculated depths to floor plane
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.floorCeilingMaxDepths">
            <summary>
            Pre calculated depths to ceiling plane
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.depthCameraDefaultPose">
            <summary>
            Default pose for depthcam sensor
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.samplePort">
            <summary>
            Port used to periodically sample sensors
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.SampleSensors(System.DateTime)">
            <summary>
            Samples sensors used for obstacle avoidance
            </summary>
            <param name="timestamp">Sampling timestamp</param>
            <returns>CCR ITask enumerator</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.SetPowerWithAcceleration(System.Double,System.Double)">
            <summary>
            Set Drive Power while honoring a maximum power delta setting
            </summary>
            <param name="leftPower">Requested power to the left motor</param>
            <param name="rightPower">Requested power to the right motor</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.UpdateDepthProfileImage">
            <summary>
            Update depth profile image on form
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.FuseDepthProfileWithIrReadings(System.Double,Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState,System.Int16[])">
            <summary>
            Combines IR readings with depth camera horizontal min depth profile
            </summary>
            <param name="depthCamFov">Depth cam field of view</param>
            <param name="infraredState">Infrared sensor array state</param>
            <param name="minDepthProfile">Depth cam min depth profile</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.FuseDepthProfileWithSonarReadings(System.Double,Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState,System.Int16[])">
            <summary>
            Combines Sonar readings with depth camera horizontal min depth profile
            </summary>
            <param name="depthCamFov">Depth cam field of view</param>
            <param name="sonarState">Sonar sensor array state</param>
            <param name="minDepthProfile">Depth cam min depth profile</param>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.lastControllerUpdate">
            <summary>
            Last controller update in seconds
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.AvoidObstacles(System.Int16[],System.Double)">
            <summary>
            Uses min depth profile to calculate drive control signal 
            for open space and obstacle avoidance
            </summary>
            <param name="minDepthProfile">Depth profile</param>
            <param name="maxDepthInMeters">Max depth range</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.CheckIfValidPendingDriveRequest(Microsoft.Robotics.Services.Drive.Proxy.SetDrivePowerRequest)">
            <summary>
            Checks if autonomous obstacle avoidance should proceed
            </summary>
            <param name="pendingOperation">Pending drive command</param>
            <returns>False if no pending drive request or last request was for stop motion</returns>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.FusePendingDriveCommandWithOpenSpaceControl(System.Double,System.Int16[],System.Double,System.Single,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a common drive command fusing pending user suggestion for motion, with control signal
            calculated for midpoint of open space and away from obstacles
            </summary>
            <param name="maxRangeInMeters">Max range in meters</param>
            <param name="minDepthProfile">Depth profile</param>
            <param name="elapsedTime">Elapsed time since last control update</param>
            <param name="smallestProjectedWidthSquared">Smallest width squared</param>
            <param name="bestStartIndex">Best open space candidate index in horizontal profile</param>
            <param name="avgDepthOfOpening">Average depth within open space</param>
            <param name="nearObstacleIndex">Horizontal profile start index of nearest obstacle</param>
            <param name="nearObstacleCount">Number of columns classifed as obstacle</param>
            <param name="bestWidthInPixelColumns">Best width of open space in column count</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.CalculateControlWithSuggestedSpeeds(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double@,System.Double@)">
            <summary>
            Calculate linear and angular speed.
            Since our depth range is large, maximum speed is reached on the first part of the range.
            </summary>
            <param name="speedSuggestion">Suggested speed</param>
            <param name="angularSpeedSuggestion">Suggested angular speed</param>
            <param name="normalizedWidthOfOpenSpace">Normalized width of open space</param>
            <param name="relativeObstacleSize">Relative obstacle size</param>
            <param name="isPathBlocked">True if paht is blocked</param>
            <param name="angularSpeed">Returns the calculated angular speed</param>
            <param name="speed">Returns the calculated linear speed</param>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.depthDownSampleBuffer">
            <summary>
            Cached downsampled depth image
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.depthProfile">
            <summary>
            Cached horizontalDepthProfile;
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.irSensorProfile">
            <summary>
            Cached ir sensor profile
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.sonarSensorProfile">
            <summary>
            Cached sonar sensor profile
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.lastLeftPower">
            <summary>
            Last power set to the left motor
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.lastRightPower">
            <summary>
            Last power set to the right motor
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.DownSampleDepthImage(Microsoft.Robotics.Services.DepthCamSensor.DepthCamSensorState)">
            <summary>
            Downsamples depth image
            </summary>
            <param name="depthCamState">Depth camera state</param>
            <returns>Downsampled depth buffer</returns>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HasInfraredSensors">
            <summary>
            Gets a value indicating whether we have infrared sensors
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveService.HasSonarSensors">
            <summary>
            Gets a value indicating whether we have sonar sensors
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm">
            <summary>
            The main ObstacleAvoidance Form
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.currentPIDSelection">
            <summary>
            Hold the current active PID index
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.pidControllersControl">
            <summary>
            Holds all PID controllers in the form
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.eventsPort">
            <summary>
            The port for sending events
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.#ctor(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceFormEvents,Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState)">
            <summary>
            Initializes a new instance of the DashboardForm class
            </summary>
            <param name="theEventsPort">The Events Port for passing events back to the service</param>
            <param name="state">The service state</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.ObstacleAvoidanceForm_Load(System.Object,System.EventArgs)">
            <summary>
            Handle Form Load
            </summary>
            <param name="sender">The parameter is not used.</param>
            <param name="e">The parameter is not used.</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.ObstacleAvoidanceForm_FormClosed(System.Object,System.Windows.Forms.FormClosedEventArgs)">
            <summary>
            Handle Form Closed
            </summary>
            <param name="sender">The parameter is not used.</param>
            <param name="e">The parameter is not used.</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.IncrementNumeric_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handle PID increment value change
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.UpdatePIDControllersValue(System.Double,System.Double,System.Double)">
            <summary>
            Update PID controller parameter values on the form.
            This is a one-off call during constructor where we need to 
            set the initial state of the PID controllers
            </summary>
            <param name="kp">Proportional constant</param>
            <param name="ki">Integral constant</param>
            <param name="kd">Derivative constant</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.PostPIDControllersValue">
            <summary>
            Set new PID controller values
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.UpdateJoystickButtons(Microsoft.Robotics.Services.GameController.Proxy.Buttons)">
            <summary>
            Handle the joystick buttons
            </summary>
            <param name="buttons">The current state of all the Joytick buttons</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.PIDControllers_ValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handle value changes on PID controls
            </summary>
            <param name="sender">Sender of the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.depthProfileImage">
            <summary>
            A bitmap to hold the depth profile image
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm.DepthProfileImage">
            <summary>
            Gets or sets the Depth Profile Image
            </summary>
            <remarks>Provides external access for updating the depth profile image</remarks>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceFormEvents">
            <summary>
            Operations Port for ObstacleAvoidance Events
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceFormEvent">
            <summary>
            Class used for events sent by the ObstacleAvoidance Form back to the service
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceFormEvent.obstacleAvoidanceForm">
            <summary>
             Obstacle Avoidance Form
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceFormEvent.#ctor(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm)">
            <summary>
            Initializes an instance of the ObstacleAvoidanceFormEvent class
            </summary>
            <param name="obstacleAvoidanceForm">The associated Form</param>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceFormEvent.ObstacleAvoidanceForm">
            <summary>
            Gets or sets the associated Form
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnLoad">
            <summary>
            Form Loaded message
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnLoad.#ctor(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm)">
            <summary>
            Initializes an instance of the OnLoad class
            </summary>
            <param name="form">The associated Form</param>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnClosed">
            <summary>
            Form Closed message
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnClosed.#ctor(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm)">
            <summary>
            Initializes an instance of the OnClosed class
            </summary>
            <param name="form">The associated Form</param>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnQueryFrame">
            <summary>
            Query Frame message
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnQueryFrame.#ctor(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm)">
            <summary>
            Initializes an instance of the OnQueryFrame class
            </summary>
            <param name="form">The associated form</param>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges">
            <summary>
            PID parameter values changes
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges.kp">
            <summary>
            The Proportional constant
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges.ki">
            <summary>
            The Integral constant
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges.kd">
            <summary>
            The Derivative constant
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges.#ctor(Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceForm,System.Double,System.Double,System.Double)">
            <summary>
            Initializes an instance of the OnPIDChanges class
            </summary>
            <param name="form">The associated form</param>
            <param name="kp">The proportional constant</param>
            <param name="ki">The integral constant</param>
            <param name="kd">The derivative constant</param>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges.Kp">
            <summary>
            Gets or sets the Proportional constant
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges.Ki">
            <summary>
            Gets or sets the Proportional constant
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.OnPIDChanges.Kd">
            <summary>
            Gets or sets the Derivative constant
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Contract">
            <summary>
            Contract class
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Contract.Identifier">
            <summary>
            Contract identifier
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveOperationsPort">
            <summary>
            Operations port
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController">
            <summary>
            Simple PID controller state and behavior
            </summary>     
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.ProportionalGainDefault">
            <summary>
            Default proportional constant
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.DerivativeGainDefault">
            <summary>
            Default derivative constant
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.IntegralGainDefault">
            <summary>
            Default integral constant
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.MaxIntegralError">
            <summary>
            Maximum integral error
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.Ki">
            <summary>
            Integral constant
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.Kp">
            <summary>
             Proportional constant
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.Kd">
            <summary>
             Derivative constant
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.PreviousError">
            <summary>
            Previous error
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.CurrentError">
            <summary>
            Most recent error
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.DerivativeError">
            <summary>
            Derivative error
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.IntegralError">
            <summary>
            Accumulated error
            </summary>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.Update(System.Double,System.Double)">
            <summary>
            Update the controller state
            </summary>
            <param name="newError">The new error value</param>
            <param name="updateInterval">Time since last update</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.CalculateControl(System.Double@,System.Double@)">
            <summary>
            Calculate control. It does not produce a linear speed
            </summary>
            <param name="angularSpeed">Calculated angular speed</param>
            <param name="speed">Calculated linear speed (not used)</param>
        </member>
        <member name="M:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.PIDController.Reset">
            <summary>
            Reset state
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState">
            <summary>
            Service state
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState.RobotWidth">
            <summary>
            Gets or sets robot width in meters
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState.MaxPowerPerWheel">
            <summary>
            Gets or sets max power allowed per wheel
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState.MinRotationSpeed">
            <summary>
            Gets or sets the minimum rotation speed
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState.DepthCameraPosition">
            <summary>
            Gets or sets the depth camera position relative to the floor plane 
            and the projection of the center of mass of the robot to the floor plane
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState.Controller">
            <summary>
            Gets or sets the obstacle avoidance controller state
            </summary>
        </member>
        <member name="P:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.ObstacleAvoidanceDriveState.MaxDeltaPower">
            <summary>
            Gets or sets the maximum allowed change in Power from one call to SetPower to the next
            Smaller numbers will cause smoother accelrations, but can also increase chance of collision with 
            obstacles
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Get">
            <summary>
            Get operation
            </summary>
        </member>
        <member name="T:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners">
            <summary>
            Partner names
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners.Drive">
            <summary>
            Drive service
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners.DepthCamSensor">
            <summary>
            Depth cam service
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners.InfraredSensorArray">
            <summary>
            IR sensor array
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners.SonarSensorArray">
            <summary>
            Sonar analog sensors
            </summary>
        </member>
        <member name="F:Microsoft.Robotics.Services.ObstacleAvoidanceDrive.Partners.PartnerEnumerationTimeoutInSeconds">
            <summary>
            Time we are willing to wait for each partner to start
            </summary>
        </member>
    </members>
</doc>
