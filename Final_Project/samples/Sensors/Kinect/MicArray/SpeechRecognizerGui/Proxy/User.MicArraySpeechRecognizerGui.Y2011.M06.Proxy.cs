//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.MicArraySpeechRecognizerGui.Y2011.M06, Version=0.0.0.0, Culture=neutral, Pub" +
    "licKeyToken=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy {
    
    
    /// <summary>
    ///            The SpeechRecognizerGui state
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml", ElementName="SpeechRecognizerGuiState")]
    [global::System.ComponentModel.DescriptionAttribute("The SpeechRecognizerGui state")]
    public class SpeechRecognizerGuiState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpeechRecognizerGuiState() {
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState _SpeechRecognizerState;
        
        /// <summary>
        ///            The speech recognizer's state
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The speech recognizer\'s state.")]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState SpeechRecognizerState {
            get {
                return this._SpeechRecognizerState;
            }
            set {
                this._SpeechRecognizerState = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry> _SpeechEvents;
        
        /// <summary>
        ///            Past speech events received from speech recognizer
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Past speech events received from speech recognizer.")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry> SpeechEvents {
            get {
                return this._SpeechEvents;
            }
            set {
                this._SpeechEvents = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SpeechRecognizerGuiState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiState typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiState)(target));
            if ((this._SpeechRecognizerState != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState tmp = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechRecognizerState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._SpeechRecognizerState = tmp;
            }
            if ((this._SpeechEvents != null)) {
                int count = this._SpeechEvents.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry tmp1 = default(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry);
                    if ((this._SpeechEvents[index] != null)) {
                        global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry tmp2 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechEvents[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                        tmp1 = tmp2;
                    }
                    tmp0.Add(tmp1);
                }
                typedTarget._SpeechEvents = tmp0;
            }
        }
        
        /// <summary>
        ///Clones SpeechRecognizerGuiState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiState target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpeechRecognizerGuiState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._SpeechRecognizerState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechRecognizerState)).Serialize(writer);
            }
            if ((this._SpeechEvents == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SpeechEvents.Count);
                for (int indexSpeechEvents = 0; (indexSpeechEvents < this._SpeechEvents.Count); indexSpeechEvents = (indexSpeechEvents + 1)) {
                    if ((this._SpeechEvents[indexSpeechEvents] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechEvents[indexSpeechEvents])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes SpeechRecognizerGuiState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpeechRecognizerGuiState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._SpeechRecognizerState = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._SpeechEvents = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._SpeechEvents.Add(default(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry));
                    if ((reader.ReadByte() != 0)) {
                        this._SpeechEvents[index0] = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            EventListEntry - A list of events that have occurred
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml", ElementName="EventListEntry")]
    [global::System.ComponentModel.DescriptionAttribute("EventListEntry - A list of events that have occurred")]
    public class EventListEntry : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EventListEntry() {
        }
        
        private long _Timestamp;
        
        /// <summary>
        ///            Timestamp when the event occurred
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Timestamp when the event occurred")]
        public long Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification _SpeechDetected;
        
        /// <summary>
        ///            Speech Detected Notification
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Speech Detected Notification")]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification SpeechDetected {
            get {
                return this._SpeechDetected;
            }
            set {
                this._SpeechDetected = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification _SpeechRecognized;
        
        /// <summary>
        ///            Speech Recognized Notification
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Speech Recognized Notification")]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification SpeechRecognized {
            get {
                return this._SpeechRecognized;
            }
            set {
                this._SpeechRecognized = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification _RecognitionRejected;
        
        /// <summary>
        ///            Speech Rejected Notification
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Speech Rejected Notification")]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification RecognitionRejected {
            get {
                return this._RecognitionRejected;
            }
            set {
                this._RecognitionRejected = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification _BeamDirectionChanged;
        
        /// <summary>
        ///            Speech Detected Notification
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Speech Detected Notification")]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification BeamDirectionChanged {
            get {
                return this._BeamDirectionChanged;
            }
            set {
                this._BeamDirectionChanged = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation _SpeechInformation;
        
        /// <summary>
        ///            Speech Information
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Speech Information")]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation SpeechInformation {
            get {
                return this._SpeechInformation;
            }
            set {
                this._SpeechInformation = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current EventListEntry to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry)(target));
            typedTarget._Timestamp = this._Timestamp;
            if ((this._SpeechDetected != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification tmp = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechDetected)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._SpeechDetected = tmp;
            }
            if ((this._SpeechRecognized != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification tmp0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechRecognized)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._SpeechRecognized = tmp0;
            }
            if ((this._RecognitionRejected != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification tmp1 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RecognitionRejected)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._RecognitionRejected = tmp1;
            }
            if ((this._BeamDirectionChanged != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification tmp2 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification();
                ((Microsoft.Dss.Core.IDssSerializable)(this._BeamDirectionChanged)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._BeamDirectionChanged = tmp2;
            }
            if ((this._SpeechInformation != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation tmp3 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechInformation)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                typedTarget._SpeechInformation = tmp3;
            }
        }
        
        /// <summary>
        ///Clones EventListEntry
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EventListEntry to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Timestamp);
            if ((this._SpeechDetected == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechDetected)).Serialize(writer);
            }
            if ((this._SpeechRecognized == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechRecognized)).Serialize(writer);
            }
            if ((this._RecognitionRejected == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RecognitionRejected)).Serialize(writer);
            }
            if ((this._BeamDirectionChanged == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._BeamDirectionChanged)).Serialize(writer);
            }
            if ((this._SpeechInformation == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SpeechInformation)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes EventListEntry
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EventListEntry</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Timestamp = reader.ReadInt64();
            if ((reader.ReadByte() != 0)) {
                this._SpeechDetected = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._SpeechRecognized = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._RecognitionRejected = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._BeamDirectionChanged = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._SpeechInformation = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Events query request type
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml", ElementName="EventsQueryRequestType")]
    [global::System.ComponentModel.DescriptionAttribute("Events query request type")]
    public class EventsQueryRequestType : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EventsQueryRequestType() {
        }
        
        private long _NewerThanTimestamp;
        
        /// <summary>
        ///            Newer Than Timestamp
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Newer Than Timestamp")]
        public long NewerThanTimestamp {
            get {
                return this._NewerThanTimestamp;
            }
            set {
                this._NewerThanTimestamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current EventsQueryRequestType to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType)(target));
            typedTarget._NewerThanTimestamp = this._NewerThanTimestamp;
        }
        
        /// <summary>
        ///Clones EventsQueryRequestType
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EventsQueryRequestType to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._NewerThanTimestamp);
        }
        
        /// <summary>
        ///Deserializes EventsQueryRequestType
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EventsQueryRequestType</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._NewerThanTimestamp = reader.ReadInt64();
            return this;
        }
    }
    
    /// <summary>
    ///            Events query response
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml", ElementName="EventsQueryResponse")]
    [global::System.ComponentModel.DescriptionAttribute("Events query response")]
    public class EventsQueryResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EventsQueryResponse() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry> _Events;
        
        /// <summary>
        ///            List of events
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("List of events")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry> Events {
            get {
                return this._Events;
            }
            set {
                this._Events = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current EventsQueryResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryResponse typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryResponse)(target));
            if ((this._Events != null)) {
                int count = this._Events.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry tmp0 = default(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry);
                    if ((this._Events[index] != null)) {
                        global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry tmp1 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Events[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Events = tmp;
            }
        }
        
        /// <summary>
        ///Clones EventsQueryResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryResponse target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EventsQueryResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Events == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Events.Count);
                for (int indexEvents = 0; (indexEvents < this._Events.Count); indexEvents = (indexEvents + 1)) {
                    if ((this._Events[indexEvents] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Events[indexEvents])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes EventsQueryResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EventsQueryResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Events = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Events.Add(default(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry));
                    if ((reader.ReadByte() != 0)) {
                        this._Events[index0] = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventListEntry())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            SpeechRecognizer state query request type
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml", ElementName="SpeechRecognizerStateQueryRequestType")]
    [global::System.ComponentModel.DescriptionAttribute("SpeechRecognizer state query request type")]
    public class SpeechRecognizerStateQueryRequestType : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpeechRecognizerStateQueryRequestType() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SpeechRecognizerStateQueryRequestType to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType)(target));
        }
        
        /// <summary>
        ///Clones SpeechRecognizerStateQueryRequestType
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpeechRecognizerStateQueryRequestType to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes SpeechRecognizerStateQueryRequestType
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpeechRecognizerStateQueryRequestType</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            HTTP POST success type
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
        "ml", ElementName="HttpPostSuccess")]
    [global::System.ComponentModel.DescriptionAttribute("HTTP POST success type")]
    public class HttpPostSuccess : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public HttpPostSuccess() {
        }
        
        /// <summary>
        ///Copies the data member values of the current HttpPostSuccess to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.HttpPostSuccess typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.HttpPostSuccess)(target));
        }
        
        /// <summary>
        ///Clones HttpPostSuccess
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.HttpPostSuccess target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.HttpPostSuccess();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current HttpPostSuccess to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes HttpPostSuccess
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized HttpPostSuccess</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            SpeechRecognizerGui Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("SpeechRecognizerGui Get Operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiState>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiState> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Events query operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Events query operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class EventsQuery : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryResponse>> {
        
        public EventsQuery() {
        }
        
        public EventsQuery(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType body) : 
                base(body) {
        }
        
        public EventsQuery(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryResponse> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Speech recognizer state query operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Speech recognizer state query operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SpeechRecognizerStateQuery : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState>> {
        
        public SpeechRecognizerStateQuery() {
        }
        
        public SpeechRecognizerStateQuery(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType body) : 
                base(body) {
        }
        
        public SpeechRecognizerStateQuery(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            SpeechRecognizerGui Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("SpeechRecognizerGui Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SpeechRecognizerGuiOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Dss.Core.DsspHttp.HttpQuery, global:: Microsoft.Dss.Core.DsspHttp.HttpPost> {
        
        public SpeechRecognizerGuiOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiState> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiState> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryResponse> EventsQuery() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice EventsQuery(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryResponse> EventsQuery(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice EventsQuery(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQueryRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.EventsQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState> SpeechRecognizerStateQuery() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SpeechRecognizerStateQuery(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState> SpeechRecognizerStateQuery(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SpeechRecognizerStateQuery(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQueryRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerStateQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery() {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            SpeechRecognizerGui - Interface for configuring the Speech Recognizer
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("GUI for the MicArraySpeechRecognizer Service")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) KinectMicArraySpeechRecognizerGui")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
            "ml";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
                    "ml", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
                    "ml", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SpeechRecognizerGuiOperations = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SpeechRecognizerGuiOperations, "http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizergui.user.ht" +
                        "ml", "SpeechRecognizerGuiOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizerGui.Proxy.SpeechRecognizerGuiOperations SpeechRecognizerGuiOperations;
    }
}
