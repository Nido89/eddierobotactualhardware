//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.MicArraySpeechRecognizer.Y2011.M06, Version=0.0.0.0, Culture=neutral, Public" +
    "KeyToken=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceTypeRegistrationRequiredAttribute()]

namespace Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy {
    
    
    /// <summary>
    ///            Speech recognizer service state
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="SpeechRecognizerState")]
    [global::System.ComponentModel.DescriptionAttribute("Speech recognizer service state")]
    public class SpeechRecognizerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpeechRecognizerState() {
        }
        
        private bool _IgnoreAudioInput;
        
        /// <summary>
        ///            Whether input from the default audio input device shall be ignored
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Whether input from the default audio input device shall be ignored")]
        public bool IgnoreAudioInput {
            get {
                return this._IgnoreAudioInput;
            }
            set {
                this._IgnoreAudioInput = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.GrammarType _GrammarType;
        
        /// <summary>
        ///            Type of grammar the recognizer uses
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the type of grammar that is used by the recognizer.")]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.GrammarType GrammarType {
            get {
                return this._GrammarType;
            }
            set {
                this._GrammarType = value;
            }
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> _DictionaryGrammar;
        
        /// <summary>
        ///            Dictionary entries of the dictionary-style grammar, where an entry's key is the
        ///            recognizable phrase and its value is the phrase's meaning (semantic value).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Dictionary entries of the dictionary-style grammar.")]
        public global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> DictionaryGrammar {
            get {
                return this._DictionaryGrammar;
            }
            set {
                this._DictionaryGrammar = value;
            }
        }
        
        private string _SrgsFileLocation;
        
        /// <summary>
        ///            Location of SRGS (Speech Recognition Grammar Specification) file that shall be
        ///            used as a grammar.
        ///            </summary>
        /// <remarks>
        ///            SRGS grammars require Microsoft Windows Vista and will not work with Microsoft Windows XP/Server 2003.
        ///            </remarks>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Location of SRGS (Speech Recognition Grammar Specification) file that shall be us" +
            "ed as a grammar.")]
        public string SrgsFileLocation {
            get {
                return this._SrgsFileLocation;
            }
            set {
                this._SrgsFileLocation = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SpeechRecognizerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState)(target));
            typedTarget._IgnoreAudioInput = this._IgnoreAudioInput;
            typedTarget._GrammarType = this._GrammarType;
            if ((this._DictionaryGrammar != null)) {
                global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> tmp = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>();
                ((Microsoft.Dss.Core.IDssSerializable)(this._DictionaryGrammar)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._DictionaryGrammar = tmp;
            }
            typedTarget._SrgsFileLocation = this._SrgsFileLocation;
        }
        
        /// <summary>
        ///Clones SpeechRecognizerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpeechRecognizerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._IgnoreAudioInput);
            writer.Write(((int)(this._GrammarType)));
            if ((this._DictionaryGrammar == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._DictionaryGrammar)).Serialize(writer);
            }
            if ((this._SrgsFileLocation == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SrgsFileLocation);
            }
        }
        
        /// <summary>
        ///Deserializes SpeechRecognizerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpeechRecognizerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._IgnoreAudioInput = reader.ReadBoolean();
            this._GrammarType = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.GrammarType)(reader.ReadInt32()));
            if ((reader.ReadByte() != 0)) {
                this._DictionaryGrammar = ((global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._SrgsFileLocation = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Insert grammar request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="InsertGrammarRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Insert grammar request")]
    public class InsertGrammarRequest : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InsertGrammarRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current InsertGrammarRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest)(target));
        }
        
        /// <summary>
        ///Clones InsertGrammarRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InsertGrammarRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes InsertGrammarRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InsertGrammarRequest</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Modify grammar dictionary request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="ModifyGrammarDictionaryRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Modify grammar dictionary request")]
    public class ModifyGrammarDictionaryRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ModifyGrammarDictionaryRequest() {
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> _DictionaryGrammar;
        
        /// <summary>
        ///            Dictionary grammar that shall be used to modify the current dictionary
        ///            grammar.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Dictionary grammar that shall be used to modify the current dictionary grammar.")]
        public global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> DictionaryGrammar {
            get {
                return this._DictionaryGrammar;
            }
            set {
                this._DictionaryGrammar = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ModifyGrammarDictionaryRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest)(target));
            if ((this._DictionaryGrammar != null)) {
                global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> tmp = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>();
                ((Microsoft.Dss.Core.IDssSerializable)(this._DictionaryGrammar)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._DictionaryGrammar = tmp;
            }
        }
        
        /// <summary>
        ///Clones ModifyGrammarDictionaryRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ModifyGrammarDictionaryRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._DictionaryGrammar == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._DictionaryGrammar)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes ModifyGrammarDictionaryRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ModifyGrammarDictionaryRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._DictionaryGrammar = ((global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Update grammar request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="UpdateGrammarRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Update grammar request")]
    public class UpdateGrammarRequest : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public UpdateGrammarRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current UpdateGrammarRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest)(target));
        }
        
        /// <summary>
        ///Clones UpdateGrammarRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current UpdateGrammarRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes UpdateGrammarRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized UpdateGrammarRequest</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Update or insert grammar request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="UpsertGrammarRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Update or insert grammar request")]
    public class UpsertGrammarRequest : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public UpsertGrammarRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current UpsertGrammarRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest)(target));
        }
        
        /// <summary>
        ///Clones UpsertGrammarRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current UpsertGrammarRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes UpsertGrammarRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized UpsertGrammarRequest</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Delete grammar request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="DeleteGrammarRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Delete grammar request")]
    public class DeleteGrammarRequest : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DeleteGrammarRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current DeleteGrammarRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest)(target));
        }
        
        /// <summary>
        ///Clones DeleteGrammarRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DeleteGrammarRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes DeleteGrammarRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DeleteGrammarRequest</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Set SRGS grammar file request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="SetSrgsGrammarFileRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Set SRGS grammar file request")]
    public class SetSrgsGrammarFileRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetSrgsGrammarFileRequest() {
        }
        
        private string _FileLocation;
        
        /// <summary>
        ///            Location of the SRGS grammar file inside the DSS node's /store directory
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Location of the SRGS grammar file inside the DSS node\'s /store directory")]
        public string FileLocation {
            get {
                return this._FileLocation;
            }
            set {
                this._FileLocation = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetSrgsGrammarFileRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest)(target));
            typedTarget._FileLocation = this._FileLocation;
        }
        
        /// <summary>
        ///Clones SetSrgsGrammarFileRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetSrgsGrammarFileRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._FileLocation == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._FileLocation);
            }
        }
        
        /// <summary>
        ///Deserializes SetSrgsGrammarFileRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetSrgsGrammarFileRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._FileLocation = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Emulate recognize request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="EmulateRecognizeRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Emulate recognize request")]
    public class EmulateRecognizeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EmulateRecognizeRequest() {
        }
        
        private string _Text;
        
        /// <summary>
        ///            Text of speech that shall be emulated
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Text of speech that shall be emulated")]
        public string Text {
            get {
                return this._Text;
            }
            set {
                this._Text = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current EmulateRecognizeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest)(target));
            typedTarget._Text = this._Text;
        }
        
        /// <summary>
        ///Clones EmulateRecognizeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EmulateRecognizeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Text == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Text);
            }
        }
        
        /// <summary>
        ///Deserializes EmulateRecognizeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EmulateRecognizeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Text = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Notification that speech has been detected by the speech recognition engine
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="SpeechDetectedNotification")]
    [global::System.ComponentModel.DescriptionAttribute("Notification that speech has been detected by the speech recognition engine")]
    public class SpeechDetectedNotification : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpeechDetectedNotification() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SpeechDetectedNotification to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification)(target));
        }
        
        /// <summary>
        ///Clones SpeechDetectedNotification
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpeechDetectedNotification to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes SpeechDetectedNotification
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpeechDetectedNotification</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Information on detected, recognized or rejected speech
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="SpeechInformation")]
    [global::System.ComponentModel.DescriptionAttribute("Information on detected, recognized or rejected speech")]
    public class SpeechInformation : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpeechInformation() {
        }
        
        private global::System.DateTime _StartTime;
        
        /// <summary>
        ///            Time at which speech started
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Time at which speech started.")]
        public global::System.DateTime StartTime {
            get {
                return this._StartTime;
            }
            set {
                this._StartTime = value;
            }
        }
        
        private double _Angle;
        
        /// <summary>
        ///            Beam angle in radians
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Directional angle of the beam in radians")]
        public double Angle {
            get {
                return this._Angle;
            }
            set {
                this._Angle = value;
            }
        }
        
        private double _DirectionConfidence;
        
        /// <summary>
        ///            Directional angle confidence
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Directional angle confidence (fuzzy boolean)")]
        public double DirectionConfidence {
            get {
                return this._DirectionConfidence;
            }
            set {
                this._DirectionConfidence = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SpeechInformation to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation)(target));
            typedTarget._StartTime = this._StartTime;
            typedTarget._Angle = this._Angle;
            typedTarget._DirectionConfidence = this._DirectionConfidence;
        }
        
        /// <summary>
        ///Clones SpeechInformation
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpeechInformation to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._StartTime, writer);
            writer.Write(this._Angle);
            writer.Write(this._DirectionConfidence);
        }
        
        /// <summary>
        ///Deserializes SpeechInformation
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpeechInformation</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._StartTime = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._Angle = reader.ReadDouble();
            this._DirectionConfidence = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Notification that speech has been recognized by the speech recognition engine
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="SpeechRecognizedNotification")]
    [global::System.ComponentModel.DescriptionAttribute("Notification that speech has been recognized by the speech recognition engine")]
    public class SpeechRecognizedNotification : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechAudioInformation, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpeechRecognizedNotification() {
        }
        
        private float _Confidence;
        
        /// <summary>
        ///            Measure of certainty for a recognized phrase returned by the recognition engine
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Measure of certainty for a recognized phrase returned by the recognition engine.")]
        public float Confidence {
            get {
                return this._Confidence;
            }
            set {
                this._Confidence = value;
            }
        }
        
        private string _Text;
        
        /// <summary>
        ///            Normalized text obtained by the recognition engine from audio input
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Normalized text obtained by the recognition engine from audio input.")]
        public string Text {
            get {
                return this._Text;
            }
            set {
                this._Text = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.RecognizedSemanticValue _Semantics;
        
        /// <summary>
        ///            Semantics of the normalized text obtained by the recognition engine from audio input
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Semantics of the normalized text obtained by the recognition engine from audio in" +
            "put.")]
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.RecognizedSemanticValue Semantics {
            get {
                return this._Semantics;
            }
            set {
                this._Semantics = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SpeechRecognizedNotification to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification)(target));
            typedTarget._Confidence = this._Confidence;
            typedTarget._Text = this._Text;
            if ((this._Semantics != null)) {
                global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.RecognizedSemanticValue tmp = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.RecognizedSemanticValue();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Semantics)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Semantics = tmp;
            }
        }
        
        /// <summary>
        ///Clones SpeechRecognizedNotification
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpeechRecognizedNotification to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._Confidence);
            if ((this._Text == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Text);
            }
            if ((this._Semantics == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Semantics)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes SpeechRecognizedNotification
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpeechRecognizedNotification</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Confidence = reader.ReadSingle();
            if ((reader.ReadByte() != 0)) {
                this._Text = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Semantics = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.RecognizedSemanticValue)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.RecognizedSemanticValue())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Information on the audio input on which speech recognition was performed
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="SpeechAudioInformation")]
    [global::System.ComponentModel.DescriptionAttribute("Information on the audio input on which speech recognition was performed")]
    public class SpeechAudioInformation : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpeechAudioInformation() {
        }
        
        private long _DurationInTicks;
        
        /// <summary>
        ///            Duration of speech in ticks. Workaround using ticks because
        ///            System.TimeSpan itself cannot be XML serialized
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Duration of speech in ticks.")]
        public long DurationInTicks {
            get {
                return this._DurationInTicks;
            }
            set {
                this._DurationInTicks = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SpeechAudioInformation to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechAudioInformation typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechAudioInformation)(target));
            typedTarget._DurationInTicks = this._DurationInTicks;
        }
        
        /// <summary>
        ///Clones SpeechAudioInformation
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechAudioInformation target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechAudioInformation();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpeechAudioInformation to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._DurationInTicks);
        }
        
        /// <summary>
        ///Deserializes SpeechAudioInformation
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpeechAudioInformation</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._DurationInTicks = reader.ReadInt64();
            return this;
        }
    }
    
    /// <summary>
    ///            Notification that speech has been rejected by the speech recognition engine
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="SpeechRecognitionRejectedNotification")]
    [global::System.ComponentModel.DescriptionAttribute("Notification that speech has been rejected by the speech recognition engine")]
    public class SpeechRecognitionRejectedNotification : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechAudioInformation, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SpeechRecognitionRejectedNotification() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SpeechRecognitionRejectedNotification to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification)(target));
        }
        
        /// <summary>
        ///Clones SpeechRecognitionRejectedNotification
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SpeechRecognitionRejectedNotification to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes SpeechRecognitionRejectedNotification
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SpeechRecognitionRejectedNotification</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Notification that beam direction has changed
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="BeamDirectionChangedNotification")]
    [global::System.ComponentModel.DescriptionAttribute("Notification that beam direction has changed")]
    public class BeamDirectionChangedNotification : global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechInformation, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BeamDirectionChangedNotification() {
        }
        
        /// <summary>
        ///Copies the data member values of the current BeamDirectionChangedNotification to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification)(target));
        }
        
        /// <summary>
        ///Clones BeamDirectionChangedNotification
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BeamDirectionChangedNotification to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes BeamDirectionChangedNotification
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BeamDirectionChangedNotification</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Information on the beam that saw a direciton change
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="AudioBeamInformation")]
    [global::System.ComponentModel.DescriptionAttribute("Information on the beam that saw a direciton change")]
    public class AudioBeamInformation : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AudioBeamInformation() {
        }
        
        /// <summary>
        ///Copies the data member values of the current AudioBeamInformation to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.AudioBeamInformation typedTarget = ((global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.AudioBeamInformation)(target));
        }
        
        /// <summary>
        ///Clones AudioBeamInformation
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.AudioBeamInformation target0 = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.AudioBeamInformation();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AudioBeamInformation to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes AudioBeamInformation
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AudioBeamInformation</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            SpeechRecognizer Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("SpeechRecognizer Get Operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Insert operation which inserts all entries of the supplied grammar dictionary into the current
    ///            dictionary. If certain entries exist already a fault is returned and the whole operation fails
    ///            without the current dictionary being modified at all.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Insert operation which inserts all entries of the supplied grammar dictionary int" +
        "o the current dictionary. If certain entries exist already a fault is returned a" +
        "nd the whole operation fails without the current dictionary being modified at al" +
        "l.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class InsertGrammarEntry : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public InsertGrammarEntry() {
        }
        
        public InsertGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest body) : 
                base(body) {
        }
        
        public InsertGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Update operation which updates entries that already exist in the current grammar dictionary with
    ///            the entries of the supplied dictionary. If certain entries in the supplied dictionary do not
    ///            exist in the current dictionary no fault is returned. Instead, only the existing entries are
    ///            updated.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute(@"Update operation which updates entries that already exist in the current grammar dictionary with the entries of the supplied dictionary. If certain entries in the supplied dictionary do not exist in the current dictionary no fault is returned. Instead, only the existing entries are updated.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateGrammarEntry : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateGrammarEntry() {
        }
        
        public UpdateGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest body) : 
                base(body) {
        }
        
        public UpdateGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Update or insert operation which inserts entries from the supplied grammar directory into the
    ///            current dictionary if they do not exist yet or updates entries that already exist with entries
    ///            from the supplied directory.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Update or insert operation which inserts entries from the supplied grammar direct" +
        "ory into the current dictionary if they do not exist yet or updates entries that" +
        " already exist with entries from the supplied directory.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpsertGrammarEntry : global::Microsoft.Dss.ServiceModel.Dssp.Upsert<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType, global:: W3C.Soap.Fault>> {
        
        public UpsertGrammarEntry() {
        }
        
        public UpsertGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest body) : 
                base(body) {
        }
        
        public UpsertGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Delete operation which deletes those entries from the current grammar directory whose keys are
    ///            equal to one of the entries in the supplied directory. If a key from the supplied directory
    ///            does not exist in the current directory no fault is returend. Instead, only the matching entries
    ///            are deleted.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute(@"Delete operation which deletes those entries from the current grammar directory whose keys are equal to one of the entries in the supplied directory. If a key from the supplied directory does not exist in the current directory no fault is returend. Instead, only the matching entries are deleted.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DeleteGrammarEntry : global::Microsoft.Dss.ServiceModel.Dssp.Delete<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault>> {
        
        public DeleteGrammarEntry() {
        }
        
        public DeleteGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest body) : 
                base(body) {
        }
        
        public DeleteGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Set SRGS grammar file operation which sets the grammar type to SRGS file and tries to load the
    ///            specified file, which has to reside inside the DSS node's /store directory. If loading the file
    ///            fails a fault is returned and the speech recognizer falls back into the state it was before it
    ///            processed this message.
    ///            </summary>
    /// <remarks>
    ///            SRGS grammars require Microsoft Windows Vista and will not work with Microsoft Windows XP/Server 2003.
    ///            </remarks>
    [global::System.ComponentModel.DescriptionAttribute(@"Set SRGS grammar file operation which sets the grammar type to SRGS file and tries to load the specified file, which has to reside inside the DSS node's /store directory. If loading the file fails a fault is returned and the speech recognizer falls back into the state it was before it processed this message.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetSrgsGrammarFile : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetSrgsGrammarFile() {
        }
        
        public SetSrgsGrammarFile(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest body) : 
                base(body) {
        }
        
        public SetSrgsGrammarFile(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Speech recognize emulation operation that orders the recognition engine to emulate speech with a
    ///            specific content and to act upon this speech. This is mostly used for testing and debugging.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Speech recognize emulation operation that orders the recognition engine to emulat" +
        "e speech with a specific content and to act upon this speech. This is mostly use" +
        "d for testing and debugging.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class EmulateRecognize : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public EmulateRecognize() {
        }
        
        public EmulateRecognize(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest body) : 
                base(body) {
        }
        
        public EmulateRecognize(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace service state operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Replace service state operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribe operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Speech detected notificaiton
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Speech detected notificaiton")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SpeechDetected : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SpeechDetected() {
        }
        
        public SpeechDetected(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification body) : 
                base(body) {
        }
        
        public SpeechDetected(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Speech recognized notification
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Speech recognized notification")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SpeechRecognized : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SpeechRecognized() {
        }
        
        public SpeechRecognized(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification body) : 
                base(body) {
        }
        
        public SpeechRecognized(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Speech recognition rejected notification
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Speech recognition rejected notification")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SpeechRecognitionRejected : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SpeechRecognitionRejected() {
        }
        
        public SpeechRecognitionRejected(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification body) : 
                base(body) {
        }
        
        public SpeechRecognitionRejected(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Beam direciton change notification
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Beam direciton change notification")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class BeamDirectionChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public BeamDirectionChanged() {
        }
        
        public BeamDirectionChanged(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification body) : 
                base(body) {
        }
        
        public BeamDirectionChanged(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            SpeechRecognizer Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("SpeechRecognizer Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SpeechRecognizerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected, global:: Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged> {
        
        public SpeechRecognizerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> InsertGrammarEntry() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertGrammarEntry(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> InsertGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.InsertGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateGrammarEntry() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateGrammarEntry(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpdateGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType, global:: W3C.Soap.Fault> UpsertGrammarEntry() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpsertGrammarEntry(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpsertResponseType, global:: W3C.Soap.Fault> UpsertGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpsertGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.UpsertGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> DeleteGrammarEntry() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteGrammarEntry(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> DeleteGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteGrammarEntry(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.DeleteGrammarEntry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetSrgsGrammarFile() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetSrgsGrammarFile(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetSrgsGrammarFile(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetSrgsGrammarFile(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFileRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SetSrgsGrammarFile(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> EmulateRecognize() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice EmulateRecognize(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> EmulateRecognize(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice EmulateRecognize(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognizeRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.EmulateRecognize(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerState();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SpeechDetected() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SpeechDetected(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SpeechDetected(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SpeechDetected(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetectedNotification();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechDetected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SpeechRecognized() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SpeechRecognized(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SpeechRecognized(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SpeechRecognized(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizedNotification();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognized(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SpeechRecognitionRejected() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SpeechRecognitionRejected(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SpeechRecognitionRejected(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SpeechRecognitionRejected(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognitionRejected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> BeamDirectionChanged() {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification();
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice BeamDirectionChanged(out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged operation) {
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification();
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> BeamDirectionChanged(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification();
            }
            global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice BeamDirectionChanged(global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification body, out global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChangedNotification();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.BeamDirectionChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Grammar type used in the speech recognition service 
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="GrammarType")]
    [global::System.ComponentModel.DescriptionAttribute("Grammar type used in the speech recognition service")]
    public enum GrammarType : int {
        
        /// <summary>
        ///            A simple text-to-meaning mapping type grammar
        ///            </summary>
        DictionaryStyle = 0,
        
        /// <summary>
        ///            A W3C Speech Recognition Grammar Specification (SRGS) type
        ///            grammar
        ///            </summary>
        Srgs = 1,
    }
    
    /// <summary>
    ///            Type of which the semantic value can be
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", ElementName="RecognizedValueType")]
    [global::System.ComponentModel.DescriptionAttribute("Type of which the semantic value can be")]
    public enum RecognizedValueType : int {
        
        /// <summary>
        ///            Type bool
        ///            </summary>
        Bool = 0,
        
        /// <summary>
        ///            Type float
        ///            </summary>
        Float = 1,
        
        /// <summary>
        ///            Type int
        ///            </summary>
        Int = 2,
        
        /// <summary>
        ///            Type string
        ///            </summary>
        String = 3,
        
        /// <summary>
        ///            Undefined (not set)
        ///            </summary>
        Undefined = 4,
    }
    
    /// <summary>
    ///            SpeechRecognizer service - Recognizes spoken commands from a defined grammar
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Recognizes speech and the direction its coming from, using Kinect MicArray and Mi" +
        "crosoft.Speech framework, and turns it into text and/or semantic values.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) KinectMicArraySpeechRecognizer")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SpeechRecognizerOperations = new global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SpeechRecognizerOperations, "http://schemas.microsoft.com/robotics/2011/06/micarrayspeechrecognizer.user.html", "SpeechRecognizerOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sensors.Kinect.MicArraySpeechRecognizer.Proxy.SpeechRecognizerOperations SpeechRecognizerOperations;
    }
}
