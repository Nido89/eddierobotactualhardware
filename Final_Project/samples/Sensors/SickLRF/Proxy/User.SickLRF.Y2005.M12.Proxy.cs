//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.SickLRF.Y2005.M12, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f907403" +
    "3fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sensors.SickLRF.Proxy {
    
    
    /// <summary>
    ///            Used to hold state data for the SickLRF service.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html", ElementName="State")]
    [global::System.ComponentModel.DescriptionAttribute("The state of the Sick laser range finder (LRF).")]
    public class State : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public State() {
        }
        
        private string _Description;
        
        /// <summary>
        ///            Description of the SickLRF device returned at Power On.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Description of the Sick device.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public string Description {
            get {
                return this._Description;
            }
            set {
                this._Description = value;
            }
        }
        
        private int[] _DistanceMeasurements;
        
        /// <summary>
        ///            Array of distance readings.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The set of distance measurements returned.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int[] DistanceMeasurements {
            get {
                return this._DistanceMeasurements;
            }
            set {
                this._DistanceMeasurements = value;
            }
        }
        
        private int _AngularRange;
        
        /// <summary>
        ///            Angular range of the measurement.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The angular range of the measurement.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int AngularRange {
            get {
                return this._AngularRange;
            }
            set {
                this._AngularRange = value;
            }
        }
        
        private double _AngularResolution;
        
        /// <summary>
        ///            Angular resolution of a given reading.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The angular resolution of the measurement.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public double AngularResolution {
            get {
                return this._AngularResolution;
            }
            set {
                this._AngularResolution = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Units _Units;
        
        /// <summary>
        ///            The units of the data in "DistanceMeasurements"
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Units used for the distance measurements.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Units Units {
            get {
                return this._Units;
            }
            set {
                this._Units = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Time at which the SickLRF unit sent these measurements over the serial link.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The time at which the measurements were sent.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private string _LinkState;
        
        /// <summary>
        ///            Status of the communications link to the SickLRF unit.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Status of the communications link.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public string LinkState {
            get {
                return this._LinkState;
            }
            set {
                this._LinkState = value;
            }
        }
        
        private int _ComPort;
        
        /// <summary>
        ///            Serial port to use for connection to the range finder.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Com port to use for connection to the range finder")]
        public int ComPort {
            get {
                return this._ComPort;
            }
            set {
                this._ComPort = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current State to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State typedTarget = ((global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State)(target));
            typedTarget._Description = this._Description;
            if ((this._DistanceMeasurements != null)) {
                int count = this._DistanceMeasurements.Length;
                int[] tmp = new int[count];
                global::System.Buffer.BlockCopy(this._DistanceMeasurements, 0, tmp, 0, global::System.Buffer.ByteLength(this._DistanceMeasurements));
                typedTarget._DistanceMeasurements = tmp;
            }
            typedTarget._AngularRange = this._AngularRange;
            typedTarget._AngularResolution = this._AngularResolution;
            typedTarget._Units = this._Units;
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._LinkState = this._LinkState;
            typedTarget._ComPort = this._ComPort;
        }
        
        /// <summary>
        ///Clones State
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State target0 = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current State to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Description == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Description);
            }
            if ((this._DistanceMeasurements == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._DistanceMeasurements.Length);
                for (int indexDistanceMeasurements = 0; (indexDistanceMeasurements < this._DistanceMeasurements.Length); indexDistanceMeasurements = (indexDistanceMeasurements + 1)) {
                    writer.Write(this._DistanceMeasurements[indexDistanceMeasurements]);
                }
            }
            writer.Write(this._AngularRange);
            writer.Write(this._AngularResolution);
            writer.Write(((int)(this._Units)));
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._LinkState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._LinkState);
            }
            writer.Write(this._ComPort);
        }
        
        /// <summary>
        ///Deserializes State
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized State</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Description = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                int tmp0 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._DistanceMeasurements = new int[count0];
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._DistanceMeasurements[index] = reader.ReadInt32();
                }
            }
            this._AngularRange = reader.ReadInt32();
            this._AngularResolution = reader.ReadDouble();
            this._Units = ((global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Units)(reader.ReadInt32()));
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                this._LinkState = reader.ReadString();
            }
            this._ComPort = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            ResetType
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html", ElementName="ResetType")]
    [global::System.ComponentModel.DescriptionAttribute("ResetType")]
    public class ResetType : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ResetType() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ResetType to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType typedTarget = ((global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType)(target));
        }
        
        /// <summary>
        ///Clones ResetType
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType target0 = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ResetType to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes ResetType
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ResetType</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Get message.
    ///            Send this message to the SickLRF service port to get the state of the service.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the laser range finder.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace message.
    ///            Send this message to the SickLRF service port to replace the state of the service.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("Measurement")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates when the laser range finder reports a new measurement.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReliableSubscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>, global:: Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.SickLRFOperations> {
        
        public ReliableSubscribe() {
        }
        
        public ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body) : 
                base(body) {
        }
        
        public ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
        
        public ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort, global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.SickLRFOperations notificationPort) : 
                base(body, responsePort, notificationPort) {
        }
    }
    
    /// <summary>
    ///            Subscribe message.
    ///            Send this message to the SickLRF service port to subscribe to the SickLRF service.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribe message. Send this message to the SickLRF service port to subscribe to " +
        "the SickLRF service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>, global:: Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.SickLRFOperations> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort, global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.SickLRFOperations notificationPort) : 
                base(body, responsePort, notificationPort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Resets the laser range finder.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Reset : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType>> {
        
        public Reset() {
        }
        
        public Reset(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body) : 
                base(body) {
        }
        
        public Reset(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Main service port type
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Main service port type")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SickLRFOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get, global:: Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace, global:: Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe, global:: Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset, global:: Microsoft.Dss.Core.DsspHttp.HttpGet> {
        
        public SickLRFOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> Replace() {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> Replace(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            }
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body, out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReliableSubscribe(global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.ReliableSubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ReliableSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> Reset() {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Reset(out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset operation) {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType> Reset(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            }
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Reset(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body, out global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            }
            operation = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.Reset(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Units of measure
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html", ElementName="Units")]
    [global::System.ComponentModel.DescriptionAttribute("Units of measure")]
    public enum Units : int {
        
        /// <summary>
        ///            Centimeters
        ///            </summary>
        Centimeters = 0,
        
        /// <summary>
        ///            Millimeters
        ///            </summary>
        Millimeters = 1,
    }
    
    /// <summary>
    ///            Sick Laser Range Finder service.
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to a Sick Laser Range Finder LMS2xx.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Sick Laser Range Finder")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SickLRFOperations = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.SickLRFOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SickLRFOperations, "http://schemas.microsoft.com/xw/2005/12/sicklrf.user.html", "SickLRFOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.SickLRFOperations SickLRFOperations;
    }
}
