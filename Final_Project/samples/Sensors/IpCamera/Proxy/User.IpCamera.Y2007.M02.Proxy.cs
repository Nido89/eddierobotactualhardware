//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.IpCamera.Y2007.M02, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f90740" +
    "33fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.IpCamera.Proxy {
    
    
    /// <summary>
    ///            State class for Ip Camera service
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/02/ipcamera.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/02/ipcamera.user.html", ElementName="IpCameraState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the IP camera state.")]
    public class IpCameraState : global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamState, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public IpCameraState() {
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssUri _CameraImageLocation;
        
        /// <summary>
        ///            Specifies the location of the camera image.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the location of the camera image.")]
        public global::Microsoft.Dss.Core.Utilities.DssUri CameraImageLocation {
            get {
                return this._CameraImageLocation;
            }
            set {
                this._CameraImageLocation = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current IpCameraState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState typedTarget = ((global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState)(target));
            if ((this._CameraImageLocation != null)) {
                global::Microsoft.Dss.Core.Utilities.DssUri tmp = new global::Microsoft.Dss.Core.Utilities.DssUri();
                ((Microsoft.Dss.Core.IDssSerializable)(this._CameraImageLocation)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._CameraImageLocation = tmp;
            }
        }
        
        /// <summary>
        ///Clones IpCameraState
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState target0 = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IpCameraState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._CameraImageLocation == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._CameraImageLocation)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes IpCameraState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IpCameraState</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                this._CameraImageLocation = ((global::Microsoft.Dss.Core.Utilities.DssUri)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssUri())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Get operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the state of the IP camera service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Changes (or indicates a change to) the entire IP camera state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Ip Camera Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Ip Camera Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class IpCameraOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace, global:: Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame, global:: Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame, global:: Microsoft.Robotics.Services.WebCam.Proxy.Subscribe, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Dss.Core.DsspHttp.HttpQuery, global:: Microsoft.Dss.Core.DsspHttp.HttpPost> {
        
        public IpCameraOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> Replace() {
            global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState body = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState();
            global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState body = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState();
            operation = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType> Replace(global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState();
            }
            global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState body, out global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global::W3C.Soap.Fault> UpdateFrame(global::System.DateTime timeStamp) {
            global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest body = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest(timeStamp);
            global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateFrame(global::System.DateTime timeStamp, out global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame operation) {
            global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest body = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest(timeStamp);
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global::W3C.Soap.Fault> UpdateFrame(global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest();
            }
            global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateFrame(global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest body, out global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest();
            }
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameResponse, global::W3C.Soap.Fault> QueryFrame() {
            global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest body = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest();
            global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryFrame(out global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame operation) {
            global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest body = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest();
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameResponse, global::W3C.Soap.Fault> QueryFrame(global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest();
            }
            global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryFrame(global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest body, out global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest();
            }
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery() {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Ip camera service implementation
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to an IP camera.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Ip Camera")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/02/ipcamera.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/02/ipcamera.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/02/ipcamera.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.IpCameraOperations = new global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraOperations();
            this.WebCamOperations = new global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.IpCameraOperations, "http://schemas.microsoft.com/robotics/2007/02/ipcamera.user.html", "IpCameraOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.WebCamOperations, "http://schemas.microsoft.com/robotics/2006/05/webcamservice.html", "WebCamOperations", null));
        }
        
        public global::Microsoft.Robotics.Services.Sample.IpCamera.Proxy.IpCameraOperations IpCameraOperations;
        
        public global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamOperations WebCamOperations;
    }
}
