//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("WebCam Sensor Service")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.WebCamService.Y2006.M05, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f" +
    "9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy {
    
    
    /// <summary>
    ///            Format description
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html", ElementName="Format")]
    [global::System.ComponentModel.DescriptionAttribute("Format description")]
    public class Format : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Format() {
        }
        
        private int _Width;
        
        /// <summary>
        ///            Image width
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the image width.")]
        public int Width {
            get {
                return this._Width;
            }
            set {
                this._Width = value;
            }
        }
        
        private int _Height;
        
        /// <summary>
        ///            Image height
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the image height.")]
        public int Height {
            get {
                return this._Height;
            }
            set {
                this._Height = value;
            }
        }
        
        private int _MinFramesPerSecond;
        
        /// <summary>
        ///            Minimum FPS
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the minumum capture rate in frames per second (fps).")]
        public int MinFramesPerSecond {
            get {
                return this._MinFramesPerSecond;
            }
            set {
                this._MinFramesPerSecond = value;
            }
        }
        
        private int _MaxFramesPerSecond;
        
        /// <summary>
        ///            Max FPS
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the maximum capture rate in frames per second (fps).")]
        public int MaxFramesPerSecond {
            get {
                return this._MaxFramesPerSecond;
            }
            set {
                this._MaxFramesPerSecond = value;
            }
        }
        
        private string _Compression;
        
        /// <summary>
        ///            Compression to use (FourCC 4 byte code)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the compression to use.\n(FourCC 4 byte code.)")]
        public string Compression {
            get {
                return this._Compression;
            }
            set {
                this._Compression = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Format to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format typedTarget = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format)(target));
            typedTarget._Width = this._Width;
            typedTarget._Height = this._Height;
            typedTarget._MinFramesPerSecond = this._MinFramesPerSecond;
            typedTarget._MaxFramesPerSecond = this._MaxFramesPerSecond;
            typedTarget._Compression = this._Compression;
        }
        
        /// <summary>
        ///Clones Format
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format target0 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Format to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Width);
            writer.Write(this._Height);
            writer.Write(this._MinFramesPerSecond);
            writer.Write(this._MaxFramesPerSecond);
            if ((this._Compression == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Compression);
            }
        }
        
        /// <summary>
        ///Deserializes Format
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Format</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Width = reader.ReadInt32();
            this._Height = reader.ReadInt32();
            this._MinFramesPerSecond = reader.ReadInt32();
            this._MaxFramesPerSecond = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._Compression = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            WebCam service state
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html", ElementName="WebCamState")]
    [global::System.ComponentModel.DescriptionAttribute("The state of the webcam service.")]
    public class WebCamState : global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamState, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public WebCamState() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance> _Cameras = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance>();
        
        /// <summary>
        ///            List of available cameras on the system.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the set of available cameras.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance> Cameras {
            get {
                return this._Cameras;
            }
            set {
                this._Cameras = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance _Selected;
        
        /// <summary>
        ///            The currently selected camera
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the currently selected camera.")]
        public global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance Selected {
            get {
                return this._Selected;
            }
            set {
                this._Selected = value;
            }
        }
        
        private string _CaptureFile;
        
        /// <summary>
        ///            The file, if any, to capture a stream of image to.
        ///            If this is non-null then every image that the camera captures
        ///            will be stored to this file.
        ///            </summary>
        /// <remarks>Not supported on .Net CF</remarks>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the file, if any, to capture a stream of image to.\n(If this is non-null" +
            " then every image that the camera captures will be stored to this file.)\nNot sup" +
            "ported on .Net CF.")]
        public string CaptureFile {
            get {
                return this._CaptureFile;
            }
            set {
                this._CaptureFile = value;
            }
        }
        
        private bool _FramesOnDemand;
        
        /// <summary>
        ///            When this is true, webcam only captures frames when requested.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("When this is true, webcam only captures frames when requested.")]
        public bool FramesOnDemand {
            get {
                return this._FramesOnDemand;
            }
            set {
                this._FramesOnDemand = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current WebCamState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState typedTarget = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState)(target));
            if ((this._Cameras != null)) {
                int count = this._Cameras.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance tmp0 = default(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance);
                    if ((this._Cameras[index] != null)) {
                        global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance tmp1 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Cameras[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Cameras = tmp;
            }
            if ((this._Selected != null)) {
                global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance tmp2 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Selected)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._Selected = tmp2;
            }
            typedTarget._CaptureFile = this._CaptureFile;
            typedTarget._FramesOnDemand = this._FramesOnDemand;
        }
        
        /// <summary>
        ///Clones WebCamState
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState target0 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current WebCamState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._Cameras == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Cameras.Count);
                for (int indexCameras = 0; (indexCameras < this._Cameras.Count); indexCameras = (indexCameras + 1)) {
                    if ((this._Cameras[indexCameras] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Cameras[indexCameras])).Serialize(writer);
                    }
                }
            }
            if ((this._Selected == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Selected)).Serialize(writer);
            }
            if ((this._CaptureFile == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._CaptureFile);
            }
            writer.Write(this._FramesOnDemand);
        }
        
        /// <summary>
        ///Deserializes WebCamState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized WebCamState</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Cameras = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Cameras.Add(default(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance));
                    if ((reader.ReadByte() != 0)) {
                        this._Cameras[index0] = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                this._Selected = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._CaptureFile = reader.ReadString();
            }
            this._FramesOnDemand = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Represents a camera on the system.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html", ElementName="CameraInstance")]
    [global::System.ComponentModel.DescriptionAttribute("Represents a camera on the system.")]
    public class CameraInstance : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CameraInstance() {
        }
        
        private string _FriendlyName;
        
        /// <summary>
        ///            Human readable name for the camera
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the user friendly name for the camera.")]
        public string FriendlyName {
            get {
                return this._FriendlyName;
            }
            set {
                this._FriendlyName = value;
            }
        }
        
        private string _DevicePath;
        
        /// <summary>
        ///            System internal device name for the camera
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies system internal device name for the camera.")]
        public string DevicePath {
            get {
                return this._DevicePath;
            }
            set {
                this._DevicePath = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format> _SupportedFormats;
        
        /// <summary>
        ///            List of image formats supported by this camera
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the set of images supported by the camera.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format> SupportedFormats {
            get {
                return this._SupportedFormats;
            }
            set {
                this._SupportedFormats = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format _Format;
        
        /// <summary>
        ///            The currently selected format used for capture.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the currently selected format used for capture.")]
        public global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format Format {
            get {
                return this._Format;
            }
            set {
                this._Format = value;
            }
        }
        
        private bool _InUse;
        
        /// <summary>
        ///            Specifies if this camera instance is currently being used for capture
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies if this camera instance is currently being used for capture")]
        public bool InUse {
            get {
                return this._InUse;
            }
            set {
                this._InUse = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CameraInstance to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance typedTarget = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance)(target));
            typedTarget._FriendlyName = this._FriendlyName;
            typedTarget._DevicePath = this._DevicePath;
            if ((this._SupportedFormats != null)) {
                int count = this._SupportedFormats.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format tmp0 = default(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format);
                    if ((this._SupportedFormats[index] != null)) {
                        global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format tmp1 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SupportedFormats[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._SupportedFormats = tmp;
            }
            if ((this._Format != null)) {
                global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format tmp2 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Format)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._Format = tmp2;
            }
            typedTarget._InUse = this._InUse;
        }
        
        /// <summary>
        ///Clones CameraInstance
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance target0 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CameraInstance to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._FriendlyName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._FriendlyName);
            }
            if ((this._DevicePath == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._DevicePath);
            }
            if ((this._SupportedFormats == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SupportedFormats.Count);
                for (int indexSupportedFormats = 0; (indexSupportedFormats < this._SupportedFormats.Count); indexSupportedFormats = (indexSupportedFormats + 1)) {
                    if ((this._SupportedFormats[indexSupportedFormats] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SupportedFormats[indexSupportedFormats])).Serialize(writer);
                    }
                }
            }
            if ((this._Format == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Format)).Serialize(writer);
            }
            writer.Write(this._InUse);
        }
        
        /// <summary>
        ///Deserializes CameraInstance
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CameraInstance</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._FriendlyName = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._DevicePath = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._SupportedFormats = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._SupportedFormats.Add(default(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format));
                    if ((reader.ReadByte() != 0)) {
                        this._SupportedFormats[index0] = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                this._Format = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format())).Deserialize(reader)));
            }
            this._InUse = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Message body used by the UpdateDevice message
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html", ElementName="UpdateDeviceRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Message body used by the UpdateDevice message")]
    public class UpdateDeviceRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public UpdateDeviceRequest() {
        }
        
        private global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance _Selected = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance();
        
        /// <summary>
        ///            The camera to set as the currently selected capture device.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the currently selected camera.")]
        public global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance Selected {
            get {
                return this._Selected;
            }
            set {
                this._Selected = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current UpdateDeviceRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest typedTarget = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest)(target));
            if ((this._Selected != null)) {
                global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance tmp = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Selected)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Selected = tmp;
            }
        }
        
        /// <summary>
        ///Clones UpdateDeviceRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest target0 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current UpdateDeviceRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Selected == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Selected)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes UpdateDeviceRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized UpdateDeviceRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Selected = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            type used for serializing the pipe server output log
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html", ElementName="PipeServerOutput")]
    [global::System.ComponentModel.DescriptionAttribute("type used for serializing the pipe server output log")]
    public class PipeServerOutput : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PipeServerOutput() {
        }
        
        private global::System.Collections.Generic.List<string> _Output;
        
        /// <summary>
        ///            the output
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("the output")]
        public global::System.Collections.Generic.List<string> Output {
            get {
                return this._Output;
            }
            set {
                this._Output = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PipeServerOutput to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput typedTarget = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput)(target));
            if ((this._Output != null)) {
                int count = this._Output.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(this._Output);
                typedTarget._Output = tmp;
            }
        }
        
        /// <summary>
        ///Clones PipeServerOutput
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput target0 = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PipeServerOutput to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Output == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Output.Count);
                for (int indexOutput = 0; (indexOutput < this._Output.Count); indexOutput = (indexOutput + 1)) {
                    if ((this._Output[indexOutput] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        writer.Write(this._Output[indexOutput]);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes PipeServerOutput
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PipeServerOutput</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Output = new global::System.Collections.Generic.List<string>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._Output.Add(default(string));
                    if ((reader.ReadByte() != 0)) {
                        this._Output[index] = reader.ReadString();
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Frame format update operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sets or changes which size and compression will be used for capture (or indicates" +
        " when these have been changed).")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateFormat : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateFormat() {
        }
        
        public UpdateFormat(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format body) : 
                base(body) {
        }
        
        public UpdateFormat(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get message
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Retrieves the capture state and a list of connected cameras.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace message
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Provides the startup state of the camera service (or indicates when the entire st" +
        "ate of the camera service changes).")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            UpdateDevice message
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Selects which connected camera will be used for capture (or indicates when the ca" +
        "mera has been changed).")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateDevice : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateDevice() {
        }
        
        public UpdateDevice(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest body) : 
                base(body) {
        }
        
        public UpdateDevice(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Webcam service operations port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Webcam service operations port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class WebCamServiceOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame, global:: Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat, global:: Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame, global:: Microsoft.Robotics.Services.WebCam.Proxy.Subscribe, global:: Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get, global:: Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace, global:: Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Dss.Core.DsspHttp.HttpPost, global:: Microsoft.Dss.Core.DsspHttp.HttpQuery> {
        
        public WebCamServiceOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameResponse, global::W3C.Soap.Fault> QueryFrame() {
            global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest body = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest();
            global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryFrame(out global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame operation) {
            global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest body = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest();
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameResponse, global::W3C.Soap.Fault> QueryFrame(global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest();
            }
            global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryFrame(global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest body, out global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrameRequest();
            }
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.QueryFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateFormat() {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateFormat(out global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat operation) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format();
            operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateFormat(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format();
            }
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateFormat(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format body, out global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format();
            }
            operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateFormat(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global::W3C.Soap.Fault> UpdateFrame(global::System.DateTime timeStamp) {
            global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest body = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest(timeStamp);
            global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateFrame(global::System.DateTime timeStamp, out global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame operation) {
            global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest body = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest(timeStamp);
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global::W3C.Soap.Fault> UpdateFrame(global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest();
            }
            global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateFrame(global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest body, out global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrameRequest();
            }
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.UpdateFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global::W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.WebCam.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState();
            operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState();
            }
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState body, out global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState();
            }
            operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateDevice() {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateDevice(out global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice operation) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest();
            operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateDevice(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest();
            }
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateDevice(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest body, out global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest();
            }
            operation = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDevice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery() {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Webcam service implementation class
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Captures images from an attached camera.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) WebCam")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.WebCamServiceOperations = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamServiceOperations();
            this.WebCamOperations = new global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.WebCamServiceOperations, "http://schemas.microsoft.com/robotics/2006/05/multidevicewebcamservice.user.html", "WebCamServiceOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.WebCamOperations, "http://schemas.microsoft.com/robotics/2006/05/webcamservice.html", "WebCamOperations", null));
        }
        
        public global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamServiceOperations WebCamServiceOperations;
        
        public global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamOperations WebCamOperations;
    }
}
namespace Microsoft.Robotics.Services.WebCamReplay.Proxy {
    
    
    /// <summary>
    ///            Webcam Replay service.
    ///            Replays images previously captured by the WebCam service.
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Replays images previously captured by the WebCam service.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) WebCam Replay")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/07/webcamreplay.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/07/webcamreplay.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/07/webcamreplay.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.WebCamServiceOperations = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamServiceOperations();
            this.WebCamOperations = new global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.WebCamServiceOperations, "http://schemas.microsoft.com/robotics/2006/07/webcamreplay.user.html", "WebCamServiceOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.WebCamOperations, "http://schemas.microsoft.com/robotics/2006/05/webcamservice.html", "WebCamOperations", null));
        }
        
        public global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamServiceOperations WebCamServiceOperations;
        
        public global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamOperations WebCamOperations;
    }
}
