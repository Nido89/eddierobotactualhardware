//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("WebCam Sensor Service")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.WebCamService.Y2006.M05, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f" +
    "9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_Format_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Format));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_Format_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_Format));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_WebCamState_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_WebCamState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.WebCamState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_WebCamState_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_WebCamState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_UpdateDeviceRequest_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_UpdateDeviceRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.UpdateDeviceRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_UpdateDeviceRequest_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_UpdateDeviceRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_PipeServerOutput_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_PipeServerOutput));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.MultiDeviceWebCam.PipeServerOutput), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_MultiDeviceWebCam_PipeServerOutput_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_PipeServerOutput));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_WebCam_Proxy_WebCamState_TO_Microsoft_Robotics_Services_WebCam_Proxy_WebCamState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.WebCam.WebCamState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_WebCam_Proxy_WebCamState_TO_Microsoft_Robotics_Services_WebCam_Proxy_WebCamState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Pose), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Pose), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Vector3), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Quaternion), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Vector2), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector2_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector2));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Vector2), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector2_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector20));
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_Format_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Format(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format)(transformFrom));
            target.Width = from.Width;
            target.Height = from.Height;
            target.MinFramesPerSecond = from.MinFramesPerSecond;
            target.MaxFramesPerSecond = from.MaxFramesPerSecond;
            target.Compression = from.Compression;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_Format_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_Format(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format)(transformFrom));
            target.Width = from.Width;
            target.Height = from.Height;
            target.MinFramesPerSecond = from.MinFramesPerSecond;
            target.MaxFramesPerSecond = from.MaxFramesPerSecond;
            target.Compression = from.Compression;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_WebCamState_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_WebCamState(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.WebCamState target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.WebCamState();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState)(transformFrom));
            if ((from.Cameras != null)) {
                int count = from.Cameras.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance tmp0 = default(global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance);
                    if ((from.Cameras[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance)(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance(from.Cameras[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.Cameras = tmp;
            }
            else {
                target.Cameras = null;
            }
            if ((from.Selected != null)) {
                target.Selected = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance)(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance(from.Selected)));
            }
            else {
                target.Selected = null;
            }
            target.CaptureFile = from.CaptureFile;
            target.FramesOnDemand = from.FramesOnDemand;
            target.CameraDeviceName = from.CameraDeviceName;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.Pose)));
            target.ImageSize = ((global::Microsoft.Robotics.PhysicalModel.Vector2)(Microsoft_Robotics_PhysicalModel_Proxy_Vector2_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector2(from.ImageSize)));
            target.ViewAngle = from.ViewAngle;
            target.Quality = from.Quality;
            target.LastFrameUpdate = from.LastFrameUpdate;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_WebCamState_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_WebCamState(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.WebCamState();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.WebCamState from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.WebCamState)(transformFrom));
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance> tmp = from.Cameras;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance tmp1 = default(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance);
                    global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance)(Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.Cameras = tmp0;
            }
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance tmp3 = from.Selected;
            if ((tmp3 != null)) {
                target.Selected = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance)(Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance(tmp3)));
            }
            target.CaptureFile = from.CaptureFile;
            target.FramesOnDemand = from.FramesOnDemand;
            target.CameraDeviceName = from.CameraDeviceName;
            global::Microsoft.Robotics.PhysicalModel.Pose tmp4 = from.Pose;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp4)));
            global::Microsoft.Robotics.PhysicalModel.Vector2 tmp5 = from.ImageSize;
            target.ImageSize = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector2)(Microsoft_Robotics_PhysicalModel_Proxy_Vector2_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector20(tmp5)));
            target.ViewAngle = from.ViewAngle;
            target.Quality = from.Quality;
            target.LastFrameUpdate = from.LastFrameUpdate;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance)(transformFrom));
            target.FriendlyName = from.FriendlyName;
            target.DevicePath = from.DevicePath;
            if ((from.SupportedFormats != null)) {
                int count = from.SupportedFormats.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format tmp0 = default(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format);
                    if ((from.SupportedFormats[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format)(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_Format_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Format(from.SupportedFormats[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.SupportedFormats = tmp;
            }
            else {
                target.SupportedFormats = null;
            }
            if ((from.Format != null)) {
                target.Format = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format)(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_Format_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Format(from.Format)));
            }
            else {
                target.Format = null;
            }
            target.InUse = from.InUse;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance)(transformFrom));
            target.FriendlyName = from.FriendlyName;
            target.DevicePath = from.DevicePath;
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format> tmp = from.SupportedFormats;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format tmp1 = default(global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format);
                    global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format)(Microsoft_Robotics_Services_MultiDeviceWebCam_Format_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_Format(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.SupportedFormats = tmp0;
            }
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Format tmp3 = from.Format;
            if ((tmp3 != null)) {
                target.Format = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.Format)(Microsoft_Robotics_Services_MultiDeviceWebCam_Format_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_Format(tmp3)));
            }
            target.InUse = from.InUse;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_UpdateDeviceRequest_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_UpdateDeviceRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.UpdateDeviceRequest target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.UpdateDeviceRequest();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest)(transformFrom));
            if ((from.Selected != null)) {
                target.Selected = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance)(Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance(from.Selected)));
            }
            else {
                target.Selected = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_UpdateDeviceRequest_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_UpdateDeviceRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.UpdateDeviceRequest();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.UpdateDeviceRequest from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.UpdateDeviceRequest)(transformFrom));
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.CameraInstance tmp = from.Selected;
            if ((tmp != null)) {
                target.Selected = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.CameraInstance)(Microsoft_Robotics_Services_MultiDeviceWebCam_CameraInstance_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_CameraInstance(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_PipeServerOutput_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_PipeServerOutput(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.PipeServerOutput target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.PipeServerOutput();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput)(transformFrom));
            if ((from.Output != null)) {
                int count = from.Output.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.Output);
                target.Output = tmp;
            }
            else {
                target.Output = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_MultiDeviceWebCam_PipeServerOutput_TO_Microsoft_Robotics_Services_MultiDeviceWebCam_Proxy_PipeServerOutput(object transformFrom) {
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput target = new global::Microsoft.Robotics.Services.MultiDeviceWebCam.Proxy.PipeServerOutput();
            global::Microsoft.Robotics.Services.MultiDeviceWebCam.PipeServerOutput from = ((global::Microsoft.Robotics.Services.MultiDeviceWebCam.PipeServerOutput)(transformFrom));
            global::System.Collections.Generic.List<string> tmp = from.Output;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<string> tmp0 = new global::System.Collections.Generic.List<string>(count);
                tmp0.AddRange(tmp);
                target.Output = tmp0;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_WebCam_Proxy_WebCamState_TO_Microsoft_Robotics_Services_WebCam_Proxy_WebCamState(object transformFrom) {
            global::Microsoft.Robotics.Services.WebCam.WebCamState target = new global::Microsoft.Robotics.Services.WebCam.WebCamState();
            global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamState from = ((global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamState)(transformFrom));
            target.CameraDeviceName = from.CameraDeviceName;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.Pose)));
            target.ImageSize = ((global::Microsoft.Robotics.PhysicalModel.Vector2)(Microsoft_Robotics_PhysicalModel_Proxy_Vector2_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector2(from.ImageSize)));
            target.ViewAngle = from.ViewAngle;
            target.Quality = from.Quality;
            target.LastFrameUpdate = from.LastFrameUpdate;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_WebCam_Proxy_WebCamState_TO_Microsoft_Robotics_Services_WebCam_Proxy_WebCamState0(object transformFrom) {
            global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamState target = new global::Microsoft.Robotics.Services.WebCam.Proxy.WebCamState();
            global::Microsoft.Robotics.Services.WebCam.WebCamState from = ((global::Microsoft.Robotics.Services.WebCam.WebCamState)(transformFrom));
            target.CameraDeviceName = from.CameraDeviceName;
            global::Microsoft.Robotics.PhysicalModel.Pose tmp = from.Pose;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp)));
            global::Microsoft.Robotics.PhysicalModel.Vector2 tmp0 = from.ImageSize;
            target.ImageSize = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector2)(Microsoft_Robotics_PhysicalModel_Proxy_Vector2_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector20(tmp0)));
            target.ViewAngle = from.ViewAngle;
            target.Quality = from.Quality;
            target.LastFrameUpdate = from.LastFrameUpdate;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Pose target = new global::Microsoft.Robotics.PhysicalModel.Pose();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Pose from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(transformFrom));
            target.Position = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.Position)));
            target.Orientation = ((global::Microsoft.Robotics.PhysicalModel.Quaternion)(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion(from.Orientation)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Pose target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Pose();
            global::Microsoft.Robotics.PhysicalModel.Pose from = ((global::Microsoft.Robotics.PhysicalModel.Pose)(transformFrom));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.Position;
            target.Position = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            global::Microsoft.Robotics.PhysicalModel.Quaternion tmp0 = from.Orientation;
            target.Orientation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion)(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0(tmp0)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Vector3 target = new global::Microsoft.Robotics.PhysicalModel.Vector3();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3();
            global::Microsoft.Robotics.PhysicalModel.Vector3 from = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Quaternion target = new global::Microsoft.Robotics.PhysicalModel.Quaternion();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.W = from.W;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion();
            global::Microsoft.Robotics.PhysicalModel.Quaternion from = ((global::Microsoft.Robotics.PhysicalModel.Quaternion)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.W = from.W;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector2_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector2(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Vector2 target = new global::Microsoft.Robotics.PhysicalModel.Vector2();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector2 from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector2)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector2_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector20(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector2 target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Vector2();
            global::Microsoft.Robotics.PhysicalModel.Vector2 from = ((global::Microsoft.Robotics.PhysicalModel.Vector2)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            return target;
        }
    }
}
