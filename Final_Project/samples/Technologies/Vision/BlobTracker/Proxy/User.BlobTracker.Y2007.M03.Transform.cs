//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.BlobTracker.Y2007.M03, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f90" +
    "74033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_BlobTrackerState_TO_Microsoft_Robotics_Services_Sample_BlobTracker_BlobTrackerState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.BlobTracker.BlobTrackerState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_BlobTracker_BlobTrackerState_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_BlobTrackerState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ColorBin_TO_Microsoft_Robotics_Services_Sample_BlobTracker_ColorBin));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_BlobTracker_ColorBin_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ColorBin));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_FoundBlob_TO_Microsoft_Robotics_Services_Sample_BlobTracker_FoundBlob));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_BlobTracker_FoundBlob_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_FoundBlob));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ImageProcessedRequest_TO_Microsoft_Robotics_Services_Sample_BlobTracker_ImageProcessedRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.BlobTracker.ImageProcessedRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_BlobTracker_ImageProcessedRequest_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ImageProcessedRequest));
        }
        
        public static object Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_BlobTrackerState_TO_Microsoft_Robotics_Services_Sample_BlobTracker_BlobTrackerState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.BlobTrackerState target = new global::Microsoft.Robotics.Services.Sample.BlobTracker.BlobTrackerState();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState from = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState)(transformFrom));
            if ((from.ColorBins != null)) {
                int count = from.ColorBins.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin tmp0 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin);
                    if ((from.ColorBins[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin)(Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ColorBin_TO_Microsoft_Robotics_Services_Sample_BlobTracker_ColorBin(from.ColorBins[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.ColorBins = tmp;
            }
            else {
                target.ColorBins = null;
            }
            target.TimeStamp = from.TimeStamp;
            if ((from.Results != null)) {
                int count0 = from.Results.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob> tmp1 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob tmp2 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob);
                    if ((from.Results[index0] != null)) {
                        tmp2 = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob)(Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_FoundBlob_TO_Microsoft_Robotics_Services_Sample_BlobTracker_FoundBlob(from.Results[index0])));
                    }
                    else {
                        tmp2 = null;
                    }
                    tmp1.Add(tmp2);
                }
                target.Results = tmp1;
            }
            else {
                target.Results = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_BlobTracker_BlobTrackerState_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_BlobTrackerState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState target = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.BlobTrackerState from = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.BlobTrackerState)(transformFrom));
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin> tmp = from.ColorBins;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin tmp1 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin);
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin)(Microsoft_Robotics_Services_Sample_BlobTracker_ColorBin_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ColorBin(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.ColorBins = tmp0;
            }
            target.TimeStamp = from.TimeStamp;
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob> tmp3 = from.Results;
            if ((tmp3 != null)) {
                int count0 = tmp3.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob> tmp4 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob tmp5 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob);
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob tmp6 = tmp3[index0];
                    if ((tmp6 != null)) {
                        tmp5 = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob)(Microsoft_Robotics_Services_Sample_BlobTracker_FoundBlob_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_FoundBlob(tmp6)));
                    }
                    tmp4.Add(tmp5);
                }
                target.Results = tmp4;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ColorBin_TO_Microsoft_Robotics_Services_Sample_BlobTracker_ColorBin(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin target = new global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin from = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin)(transformFrom));
            target.Name = from.Name;
            target.RedMin = from.RedMin;
            target.RedMax = from.RedMax;
            target.GreenMin = from.GreenMin;
            target.GreenMax = from.GreenMax;
            target.BlueMin = from.BlueMin;
            target.BlueMax = from.BlueMax;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_BlobTracker_ColorBin_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ColorBin(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin target = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin from = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.ColorBin)(transformFrom));
            target.Name = from.Name;
            target.RedMin = from.RedMin;
            target.RedMax = from.RedMax;
            target.GreenMin = from.GreenMin;
            target.GreenMax = from.GreenMax;
            target.BlueMin = from.BlueMin;
            target.BlueMax = from.BlueMax;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_FoundBlob_TO_Microsoft_Robotics_Services_Sample_BlobTracker_FoundBlob(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob target = new global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob from = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob)(transformFrom));
            if ((from.XProjection != null)) {
                int count = from.XProjection.Length;
                int[] tmp = new int[count];
                global::System.Buffer.BlockCopy(from.XProjection, 0, tmp, 0, global::System.Buffer.ByteLength(from.XProjection));
                target.XProjection = tmp;
            }
            else {
                target.XProjection = null;
            }
            if ((from.YProjection != null)) {
                int count0 = from.YProjection.Length;
                int[] tmp0 = new int[count0];
                global::System.Buffer.BlockCopy(from.YProjection, 0, tmp0, 0, global::System.Buffer.ByteLength(from.YProjection));
                target.YProjection = tmp0;
            }
            else {
                target.YProjection = null;
            }
            target.Name = from.Name;
            target.MeanX = from.MeanX;
            target.MeanY = from.MeanY;
            target.StdDevX = from.StdDevX;
            target.StdDevY = from.StdDevY;
            target.SkewX = from.SkewX;
            target.SkewY = from.SkewY;
            target.Area = from.Area;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_BlobTracker_FoundBlob_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_FoundBlob(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob target = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob from = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob)(transformFrom));
            int[] tmp = from.XProjection;
            if ((tmp != null)) {
                int count = tmp.Length;
                int[] tmp0 = new int[count];
                global::System.Buffer.BlockCopy(tmp, 0, tmp0, 0, global::System.Buffer.ByteLength(tmp));
                target.XProjection = tmp0;
            }
            int[] tmp1 = from.YProjection;
            if ((tmp1 != null)) {
                int count0 = tmp1.Length;
                int[] tmp2 = new int[count0];
                global::System.Buffer.BlockCopy(tmp1, 0, tmp2, 0, global::System.Buffer.ByteLength(tmp1));
                target.YProjection = tmp2;
            }
            target.Name = from.Name;
            target.MeanX = from.MeanX;
            target.MeanY = from.MeanY;
            target.StdDevX = from.StdDevX;
            target.StdDevY = from.StdDevY;
            target.SkewX = from.SkewX;
            target.SkewY = from.SkewY;
            target.Area = from.Area;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ImageProcessedRequest_TO_Microsoft_Robotics_Services_Sample_BlobTracker_ImageProcessedRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.ImageProcessedRequest target = new global::Microsoft.Robotics.Services.Sample.BlobTracker.ImageProcessedRequest();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest from = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            if ((from.Results != null)) {
                int count = from.Results.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob tmp0 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob);
                    if ((from.Results[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob)(Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_FoundBlob_TO_Microsoft_Robotics_Services_Sample_BlobTracker_FoundBlob(from.Results[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.Results = tmp;
            }
            else {
                target.Results = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_BlobTracker_ImageProcessedRequest_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_ImageProcessedRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest target = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.ImageProcessedRequest from = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.ImageProcessedRequest)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob> tmp = from.Results;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob tmp1 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob);
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.FoundBlob tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob)(Microsoft_Robotics_Services_Sample_BlobTracker_FoundBlob_TO_Microsoft_Robotics_Services_Sample_BlobTracker_Proxy_FoundBlob(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.Results = tmp0;
            }
            return target;
        }
    }
}
