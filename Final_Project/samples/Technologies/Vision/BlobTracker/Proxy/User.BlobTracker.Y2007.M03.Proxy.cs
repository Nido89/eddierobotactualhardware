//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.BlobTracker.Y2007.M03, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f90" +
    "74033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.BlobTracker.Proxy {
    
    
    /// <summary>
    ///            The BlobTracker State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html", ElementName="BlobTrackerState")]
    [global::System.ComponentModel.DescriptionAttribute("The blob tracker\'s state")]
    public class BlobTrackerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BlobTrackerState() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin> _ColorBins = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin>();
        
        /// <summary>
        ///            The set of color bins
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The set of color bins")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin> ColorBins {
            get {
                return this._ColorBins;
            }
            set {
                this._ColorBins = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            TimeStamp of the last update
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("TimeStamp of the last update")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob> _Results = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob>();
        
        /// <summary>
        ///            The list of matching blobs found
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The list of matching blobs found")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob> Results {
            get {
                return this._Results;
            }
            set {
                this._Results = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BlobTrackerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState typedTarget = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState)(target));
            if ((this._ColorBins != null)) {
                int count = this._ColorBins.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin tmp0 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin);
                    if ((this._ColorBins[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin tmp1 = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._ColorBins[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._ColorBins = tmp;
            }
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._Results != null)) {
                int count0 = this._Results.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob> tmp2 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob tmp3 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob);
                    if ((this._Results[index0] != null)) {
                        global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob tmp4 = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Results[index0])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                        tmp3 = tmp4;
                    }
                    tmp2.Add(tmp3);
                }
                typedTarget._Results = tmp2;
            }
        }
        
        /// <summary>
        ///Clones BlobTrackerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState target0 = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BlobTrackerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._ColorBins == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ColorBins.Count);
                for (int indexColorBins = 0; (indexColorBins < this._ColorBins.Count); indexColorBins = (indexColorBins + 1)) {
                    if ((this._ColorBins[indexColorBins] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._ColorBins[indexColorBins])).Serialize(writer);
                    }
                }
            }
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._Results == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Results.Count);
                for (int indexResults = 0; (indexResults < this._Results.Count); indexResults = (indexResults + 1)) {
                    if ((this._Results[indexResults] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Results[indexResults])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes BlobTrackerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BlobTrackerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count1 = reader.ReadInt32();
                this._ColorBins = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin>(count1);
                for (int index1 = 0; (index1 < count1); index1 = (index1 + 1)) {
                    this._ColorBins.Add(default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin));
                    if ((reader.ReadByte() != 0)) {
                        this._ColorBins[index1] = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin())).Deserialize(reader)));
                    }
                }
            }
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                int count2 = reader.ReadInt32();
                this._Results = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob>(count2);
                for (int index2 = 0; (index2 < count2); index2 = (index2 + 1)) {
                    this._Results.Add(default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob));
                    if ((reader.ReadByte() != 0)) {
                        this._Results[index2] = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Specifies a color bin (set)
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html", ElementName="ColorBin")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a color bin (set)")]
    public class ColorBin : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorBin() {
        }
        
        private string _Name;
        
        /// <summary>
        ///            Indicates the name of the color bin (set).
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the name of the color bin (set).")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private int _RedMin;
        
        /// <summary>
        ///            Indicates minimum red value of the color bin.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates minimum red value of the color bin.")]
        public int RedMin {
            get {
                return this._RedMin;
            }
            set {
                this._RedMin = value;
            }
        }
        
        private int _RedMax;
        
        /// <summary>
        ///            Indicates maximum red value of the color bin.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates maximum red value of the color bin.")]
        public int RedMax {
            get {
                return this._RedMax;
            }
            set {
                this._RedMax = value;
            }
        }
        
        private int _GreenMin;
        
        /// <summary>
        ///            Indicates minimum green value of the color bin.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates minimum green value of the color bin.")]
        public int GreenMin {
            get {
                return this._GreenMin;
            }
            set {
                this._GreenMin = value;
            }
        }
        
        private int _GreenMax;
        
        /// <summary>
        ///            Indicates maximum green value of the color bin.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates maximum green value of the color bin.")]
        public int GreenMax {
            get {
                return this._GreenMax;
            }
            set {
                this._GreenMax = value;
            }
        }
        
        private int _BlueMin;
        
        /// <summary>
        ///            Indicates minimum blue value of the color bin.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates minimum blue value of the color bin.")]
        public int BlueMin {
            get {
                return this._BlueMin;
            }
            set {
                this._BlueMin = value;
            }
        }
        
        private int _BlueMax;
        
        /// <summary>
        ///            Indicates maximum blue value of the color bin.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates maximum blue value of the color bin.")]
        public int BlueMax {
            get {
                return this._BlueMax;
            }
            set {
                this._BlueMax = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorBin to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin typedTarget = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin)(target));
            typedTarget._Name = this._Name;
            typedTarget._RedMin = this._RedMin;
            typedTarget._RedMax = this._RedMax;
            typedTarget._GreenMin = this._GreenMin;
            typedTarget._GreenMax = this._GreenMax;
            typedTarget._BlueMin = this._BlueMin;
            typedTarget._BlueMax = this._BlueMax;
        }
        
        /// <summary>
        ///Clones ColorBin
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin target0 = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorBin to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(this._RedMin);
            writer.Write(this._RedMax);
            writer.Write(this._GreenMin);
            writer.Write(this._GreenMax);
            writer.Write(this._BlueMin);
            writer.Write(this._BlueMax);
        }
        
        /// <summary>
        ///Deserializes ColorBin
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorBin</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._RedMin = reader.ReadInt32();
            this._RedMax = reader.ReadInt32();
            this._GreenMin = reader.ReadInt32();
            this._GreenMax = reader.ReadInt32();
            this._BlueMin = reader.ReadInt32();
            this._BlueMax = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Specifies information about the detected blob.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html", ElementName="FoundBlob")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies information about the detected blob.")]
    public class FoundBlob : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FoundBlob() {
        }
        
        private int[] _XProjection;
        
        /// <summary>
        ///            Indicates the X projection.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the X projection.")]
        public int[] XProjection {
            get {
                return this._XProjection;
            }
            set {
                this._XProjection = value;
            }
        }
        
        private int[] _YProjection;
        
        /// <summary>
        ///            Indicates the Y projection.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Y projection.")]
        public int[] YProjection {
            get {
                return this._YProjection;
            }
            set {
                this._YProjection = value;
            }
        }
        
        private string _Name;
        
        /// <summary>
        ///            Indicates the name of the blob.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the name of the blob.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private double _MeanX;
        
        /// <summary>
        ///            Indicates the X mean value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the X mean value.")]
        public double MeanX {
            get {
                return this._MeanX;
            }
            set {
                this._MeanX = value;
            }
        }
        
        private double _MeanY;
        
        /// <summary>
        ///            Indicates the Y mean value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Y mean value.")]
        public double MeanY {
            get {
                return this._MeanY;
            }
            set {
                this._MeanY = value;
            }
        }
        
        private double _StdDevX;
        
        /// <summary>
        ///            Indicates the X standard deviation value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the X standard deviation value.")]
        public double StdDevX {
            get {
                return this._StdDevX;
            }
            set {
                this._StdDevX = value;
            }
        }
        
        private double _StdDevY;
        
        /// <summary>
        ///            Indicates the Y standard deviation value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Y standard deviation value.")]
        public double StdDevY {
            get {
                return this._StdDevY;
            }
            set {
                this._StdDevY = value;
            }
        }
        
        private double _SkewX;
        
        /// <summary>
        ///            Indicates the X skew value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the X skew value.")]
        public double SkewX {
            get {
                return this._SkewX;
            }
            set {
                this._SkewX = value;
            }
        }
        
        private double _SkewY;
        
        /// <summary>
        ///            Indicates the Y skew value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the Y skew value.")]
        public double SkewY {
            get {
                return this._SkewY;
            }
            set {
                this._SkewY = value;
            }
        }
        
        private double _Area;
        
        /// <summary>
        ///            Indicates area. This is the number of pixels that contribute to the blob.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates area. This is the number of pixels that contribute to the blob.")]
        public double Area {
            get {
                return this._Area;
            }
            set {
                this._Area = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FoundBlob to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob typedTarget = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob)(target));
            if ((this._XProjection != null)) {
                int count = this._XProjection.Length;
                int[] tmp = new int[count];
                global::System.Buffer.BlockCopy(this._XProjection, 0, tmp, 0, global::System.Buffer.ByteLength(this._XProjection));
                typedTarget._XProjection = tmp;
            }
            if ((this._YProjection != null)) {
                int count0 = this._YProjection.Length;
                int[] tmp0 = new int[count0];
                global::System.Buffer.BlockCopy(this._YProjection, 0, tmp0, 0, global::System.Buffer.ByteLength(this._YProjection));
                typedTarget._YProjection = tmp0;
            }
            typedTarget._Name = this._Name;
            typedTarget._MeanX = this._MeanX;
            typedTarget._MeanY = this._MeanY;
            typedTarget._StdDevX = this._StdDevX;
            typedTarget._StdDevY = this._StdDevY;
            typedTarget._SkewX = this._SkewX;
            typedTarget._SkewY = this._SkewY;
            typedTarget._Area = this._Area;
        }
        
        /// <summary>
        ///Clones FoundBlob
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob target0 = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FoundBlob to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._XProjection == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._XProjection.Length);
                for (int indexXProjection = 0; (indexXProjection < this._XProjection.Length); indexXProjection = (indexXProjection + 1)) {
                    writer.Write(this._XProjection[indexXProjection]);
                }
            }
            if ((this._YProjection == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._YProjection.Length);
                for (int indexYProjection = 0; (indexYProjection < this._YProjection.Length); indexYProjection = (indexYProjection + 1)) {
                    writer.Write(this._YProjection[indexYProjection]);
                }
            }
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(this._MeanX);
            writer.Write(this._MeanY);
            writer.Write(this._StdDevX);
            writer.Write(this._StdDevY);
            writer.Write(this._SkewX);
            writer.Write(this._SkewY);
            writer.Write(this._Area);
        }
        
        /// <summary>
        ///Deserializes FoundBlob
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FoundBlob</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int tmp1 = reader.ReadInt32();
                int count1 = reader.ReadInt32();
                this._XProjection = new int[count1];
                for (int index = 0; (index < count1); index = (index + 1)) {
                    this._XProjection[index] = reader.ReadInt32();
                }
            }
            if ((reader.ReadByte() != 0)) {
                int tmp2 = reader.ReadInt32();
                int count2 = reader.ReadInt32();
                this._YProjection = new int[count2];
                for (int index0 = 0; (index0 < count2); index0 = (index0 + 1)) {
                    this._YProjection[index0] = reader.ReadInt32();
                }
            }
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._MeanX = reader.ReadDouble();
            this._MeanY = reader.ReadDouble();
            this._StdDevX = reader.ReadDouble();
            this._StdDevY = reader.ReadDouble();
            this._SkewX = reader.ReadDouble();
            this._SkewY = reader.ReadDouble();
            this._Area = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Indicates the ImageProcessed request.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html", ElementName="ImageProcessedRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates the ImageProcessed request.")]
    public class ImageProcessedRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ImageProcessedRequest() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Indicates the time the image was processed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time the image was processed.")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob> _Results = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob>();
        
        /// <summary>
        ///            Indicates the list of blobs found.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the list of blobs found.")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob> Results {
            get {
                return this._Results;
            }
            set {
                this._Results = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ImageProcessedRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._Results != null)) {
                int count = this._Results.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob tmp0 = default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob);
                    if ((this._Results[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob tmp1 = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Results[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Results = tmp;
            }
        }
        
        /// <summary>
        ///Clones ImageProcessedRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest target0 = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ImageProcessedRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._Results == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Results.Count);
                for (int indexResults = 0; (indexResults < this._Results.Count); indexResults = (indexResults + 1)) {
                    if ((this._Results[indexResults] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Results[indexResults])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes ImageProcessedRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ImageProcessedRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Results = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Results.Add(default(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob));
                    if ((reader.ReadByte() != 0)) {
                        this._Results[index0] = ((global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.FoundBlob())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            BlobTracker Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            BlobTracker Update Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates when an image has been processed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ImageProcessed : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ImageProcessed() {
        }
        
        public ImageProcessed(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest body) : 
                base(body) {
        }
        
        public ImageProcessed(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            BlobTracker Subscribe Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to the service notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            BlobTracker InsertBin Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Inserts a color bin for processing/analysis.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class InsertBin : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public InsertBin() {
        }
        
        public InsertBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body) : 
                base(body) {
        }
        
        public InsertBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            BlobTracker DeleteBin Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Deletes a color bin for processing/analysis.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DeleteBin : global::Microsoft.Dss.ServiceModel.Dssp.Delete<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault>> {
        
        public DeleteBin() {
        }
        
        public DeleteBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body) : 
                base(body) {
        }
        
        public DeleteBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            BlobTracker UpdateBin Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Updates a color bin for processing/analysis.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateBin : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateBin() {
        }
        
        public UpdateBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body) : 
                base(body) {
        }
        
        public UpdateBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            BlobTracker Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("BlobTracker Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class BlobTrackerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed, global:: Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin, global:: Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin, global:: Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin> {
        
        public BlobTrackerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ImageProcessed() {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ImageProcessed(out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed operation) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ImageProcessed(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest();
            }
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ImageProcessed(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest body, out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessedRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ImageProcessed(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> InsertBin() {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertBin(out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin operation) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> InsertBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            }
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body, out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.InsertBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> DeleteBin() {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteBin(out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin operation) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> DeleteBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            }
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body, out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.DeleteBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateBin() {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateBin(out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin operation) {
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            }
            global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateBin(global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin body, out global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.ColorBin();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.UpdateBin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Implementation class for BlobTracker
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Finds specific blobs (regions) within an image for simple color tracking.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Blob Tracker")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.BlobTrackerOperations = new global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.BlobTrackerOperations, "http://schemas.microsoft.com/robotics/2007/03/blobtracker.user.html", "BlobTrackerOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.BlobTracker.Proxy.BlobTrackerOperations BlobTrackerOperations;
    }
}
