//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.BlobTrackerCalibrate.Y2007.M04, Version=0.0.0.0, Culture=neutral, PublicKeyT" +
    "oken=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy {
    
    
    /// <summary>
    ///            The BlobTrackerCalibrate State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.user.html", ElementName="BlobTrackerCalibrateState")]
    [global::System.ComponentModel.DescriptionAttribute("The BlobTrackerCalibrate State")]
    public class BlobTrackerCalibrateState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BlobTrackerCalibrateState() {
        }
        
        private bool _Processing;
        
        /// <summary>
        ///            Indicates if the service is in the processing state.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if the service is in the processing state.")]
        public bool Processing {
            get {
                return this._Processing;
            }
            set {
                this._Processing = value;
            }
        }
        
        private bool _Shutdown;
        
        /// <summary>
        ///            Indicates if the service is shut down.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if the service is shut down.")]
        public bool Shutdown {
            get {
                return this._Shutdown;
            }
            set {
                this._Shutdown = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BlobTrackerCalibrateState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateState typedTarget = ((global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateState)(target));
            typedTarget._Processing = this._Processing;
            typedTarget._Shutdown = this._Shutdown;
        }
        
        /// <summary>
        ///Clones BlobTrackerCalibrateState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateState target0 = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BlobTrackerCalibrateState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Processing);
            writer.Write(this._Shutdown);
        }
        
        /// <summary>
        ///Deserializes BlobTrackerCalibrateState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BlobTrackerCalibrateState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Processing = reader.ReadBoolean();
            this._Shutdown = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Request type for updating the Processing state
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.user.html", ElementName="UpdateProcessingRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Request type for updating the Processing state")]
    public class UpdateProcessingRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public UpdateProcessingRequest() {
        }
        
        public UpdateProcessingRequest(bool processing) {
            this._Processing = processing;
        }
        
        private bool _Processing;
        
        /// <summary>
        ///            Is processing?
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Is processing?")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public bool Processing {
            get {
                return this._Processing;
            }
            set {
                this._Processing = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current UpdateProcessingRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest)(target));
            typedTarget._Processing = this._Processing;
        }
        
        /// <summary>
        ///Clones UpdateProcessingRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest target0 = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current UpdateProcessingRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Processing);
        }
        
        /// <summary>
        ///Deserializes UpdateProcessingRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized UpdateProcessingRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Processing = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            BlobTrackerCalibrate Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the training service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            BlobTrackerCalibrate UpdateProcessing Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("BlobTrackerCalibrate UpdateProcessing Operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateProcessing : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateProcessing() {
        }
        
        public UpdateProcessing(global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest body) : 
                base(body) {
        }
        
        public UpdateProcessing(global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            BlobTrackerCalibrate Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("BlobTrackerCalibrate Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class BlobTrackerCalibrateOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing> {
        
        public BlobTrackerCalibrateOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateProcessing(bool processing) {
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest body = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest(processing);
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing operation = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateProcessing(bool processing, out global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing operation) {
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest body = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest(processing);
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateProcessing(global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest();
            }
            global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing operation = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateProcessing(global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest body, out global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessingRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.UpdateProcessing(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Implementation class for BlobTrackerCalibrate
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides a simple interface for training the Blob Tracker service.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Blob Tracker Calibrate")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.BlobTrackerCalibrateOperations = new global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.BlobTrackerCalibrateOperations, "http://schemas.microsoft.com/robotics/2007/04/blobtrackercalibrate.user.html", "BlobTrackerCalibrateOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.BlobTrackerCalibrate.Proxy.BlobTrackerCalibrateOperations BlobTrackerCalibrateOperations;
    }
}
