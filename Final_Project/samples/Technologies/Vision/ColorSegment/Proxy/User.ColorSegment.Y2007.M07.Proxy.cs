//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.ColorSegment.Y2007.M07, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f9" +
    "074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.ColorSegment.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="ColorSegmentState")]
    public class ColorSegmentState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorSegmentState() {
        }
        
        private bool _Processing;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Processing {
            get {
                return this._Processing;
            }
            set {
                this._Processing = value;
            }
        }
        
        private int _FrameCount;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int FrameCount {
            get {
                return this._FrameCount;
            }
            set {
                this._FrameCount = value;
            }
        }
        
        private int _DroppedFrames;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public int DroppedFrames {
            get {
                return this._DroppedFrames;
            }
            set {
                this._DroppedFrames = value;
            }
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssUri _ImageSource;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Dss.Core.Utilities.DssUri ImageSource {
            get {
                return this._ImageSource;
            }
            set {
                this._ImageSource = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings _Settings = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings();
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        public global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings Settings {
            get {
                return this._Settings;
            }
            set {
                this._Settings = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet> _Colors = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet>();
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet> Colors {
            get {
                return this._Colors;
            }
            set {
                this._Colors = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage _SegmentedImage;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage SegmentedImage {
            get {
                return this._SegmentedImage;
            }
            set {
                this._SegmentedImage = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas _FoundColorAreas;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas FoundColorAreas {
            get {
                return this._FoundColorAreas;
            }
            set {
                this._FoundColorAreas = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorSegmentState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentState typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentState)(target));
            typedTarget._Processing = this._Processing;
            typedTarget._FrameCount = this._FrameCount;
            typedTarget._DroppedFrames = this._DroppedFrames;
            if ((this._ImageSource != null)) {
                global::Microsoft.Dss.Core.Utilities.DssUri tmp = new global::Microsoft.Dss.Core.Utilities.DssUri();
                ((Microsoft.Dss.Core.IDssSerializable)(this._ImageSource)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._ImageSource = tmp;
            }
            if ((this._Settings != null)) {
                global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings tmp0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Settings)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._Settings = tmp0;
            }
            if ((this._Colors != null)) {
                int count = this._Colors.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet> tmp1 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet tmp2 = default(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet);
                    if ((this._Colors[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet tmp3 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Colors[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                        tmp2 = tmp3;
                    }
                    tmp1.Add(tmp2);
                }
                typedTarget._Colors = tmp1;
            }
            if ((this._SegmentedImage != null)) {
                global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage tmp4 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SegmentedImage)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                typedTarget._SegmentedImage = tmp4;
            }
            if ((this._FoundColorAreas != null)) {
                global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas tmp5 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas();
                ((Microsoft.Dss.Core.IDssSerializable)(this._FoundColorAreas)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp5)));
                typedTarget._FoundColorAreas = tmp5;
            }
        }
        
        /// <summary>
        ///Clones ColorSegmentState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentState target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorSegmentState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Processing);
            writer.Write(this._FrameCount);
            writer.Write(this._DroppedFrames);
            if ((this._ImageSource == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._ImageSource)).Serialize(writer);
            }
            if ((this._Settings == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Settings)).Serialize(writer);
            }
            if ((this._Colors == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Colors.Count);
                for (int indexColors = 0; (indexColors < this._Colors.Count); indexColors = (indexColors + 1)) {
                    if ((this._Colors[indexColors] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Colors[indexColors])).Serialize(writer);
                    }
                }
            }
            if ((this._SegmentedImage == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SegmentedImage)).Serialize(writer);
            }
            if ((this._FoundColorAreas == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._FoundColorAreas)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes ColorSegmentState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorSegmentState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Processing = reader.ReadBoolean();
            this._FrameCount = reader.ReadInt32();
            this._DroppedFrames = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._ImageSource = ((global::Microsoft.Dss.Core.Utilities.DssUri)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssUri())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Settings = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Colors = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Colors.Add(default(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet));
                    if ((reader.ReadByte() != 0)) {
                        this._Colors[index0] = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                this._SegmentedImage = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._FoundColorAreas = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="Settings")]
    public class Settings : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Settings() {
        }
        
        public Settings(double threshold, bool showPartialMatches, bool despeckle, int minBlobSize) {
            this._Threshold = threshold;
            this._ShowPartialMatches = showPartialMatches;
            this._Despeckle = despeckle;
            this._MinBlobSize = minBlobSize;
        }
        
        private double _Threshold;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public double Threshold {
            get {
                return this._Threshold;
            }
            set {
                this._Threshold = value;
            }
        }
        
        private bool _ShowPartialMatches;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public bool ShowPartialMatches {
            get {
                return this._ShowPartialMatches;
            }
            set {
                this._ShowPartialMatches = value;
            }
        }
        
        private bool _Despeckle;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public bool Despeckle {
            get {
                return this._Despeckle;
            }
            set {
                this._Despeckle = value;
            }
        }
        
        private int _MinBlobSize;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public int MinBlobSize {
            get {
                return this._MinBlobSize;
            }
            set {
                this._MinBlobSize = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Settings to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings)(target));
            typedTarget._Threshold = this._Threshold;
            typedTarget._ShowPartialMatches = this._ShowPartialMatches;
            typedTarget._Despeckle = this._Despeckle;
            typedTarget._MinBlobSize = this._MinBlobSize;
        }
        
        /// <summary>
        ///Clones Settings
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Settings to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Threshold);
            writer.Write(this._ShowPartialMatches);
            writer.Write(this._Despeckle);
            writer.Write(this._MinBlobSize);
        }
        
        /// <summary>
        ///Deserializes Settings
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Settings</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Threshold = reader.ReadDouble();
            this._ShowPartialMatches = reader.ReadBoolean();
            this._Despeckle = reader.ReadBoolean();
            this._MinBlobSize = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="ColorSet")]
    public class ColorSet : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorSet() {
        }
        
        private string _Name;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition> _Colors = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition>();
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition> Colors {
            get {
                return this._Colors;
            }
            set {
                this._Colors = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorSet to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet)(target));
            typedTarget._Name = this._Name;
            if ((this._Colors != null)) {
                int count = this._Colors.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition tmp0 = default(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition);
                    if ((this._Colors[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition tmp1 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Colors[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Colors = tmp;
            }
        }
        
        /// <summary>
        ///Clones ColorSet
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorSet to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            if ((this._Colors == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Colors.Count);
                for (int indexColors = 0; (indexColors < this._Colors.Count); indexColors = (indexColors + 1)) {
                    if ((this._Colors[indexColors] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Colors[indexColors])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes ColorSet
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorSet</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Colors = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Colors.Add(default(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition));
                    if ((reader.ReadByte() != 0)) {
                        this._Colors[index0] = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="ColorDefinition")]
    public class ColorDefinition : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorDefinition() {
        }
        
        public ColorDefinition(string name, int y, int cb, int cr) {
            this._Name = name;
            this._Y = y;
            this._Cb = cb;
            this._Cr = cr;
        }
        
        private string _Name;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private int _Y;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private int _Cb;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public int Cb {
            get {
                return this._Cb;
            }
            set {
                this._Cb = value;
            }
        }
        
        private int _Cr;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public int Cr {
            get {
                return this._Cr;
            }
            set {
                this._Cr = value;
            }
        }
        
        private int _SigmaY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int SigmaY {
            get {
                return this._SigmaY;
            }
            set {
                this._SigmaY = value;
            }
        }
        
        private int _SigmaCb;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int SigmaCb {
            get {
                return this._SigmaCb;
            }
            set {
                this._SigmaCb = value;
            }
        }
        
        private int _SigmaCr;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int SigmaCr {
            get {
                return this._SigmaCr;
            }
            set {
                this._SigmaCr = value;
            }
        }
        
        private int _R;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int R {
            get {
                return this._R;
            }
            set {
                this._R = value;
            }
        }
        
        private int _G;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int G {
            get {
                return this._G;
            }
            set {
                this._G = value;
            }
        }
        
        private int _B;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int B {
            get {
                return this._B;
            }
            set {
                this._B = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorDefinition to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition)(target));
            typedTarget._Name = this._Name;
            typedTarget._Y = this._Y;
            typedTarget._Cb = this._Cb;
            typedTarget._Cr = this._Cr;
            typedTarget._SigmaY = this._SigmaY;
            typedTarget._SigmaCb = this._SigmaCb;
            typedTarget._SigmaCr = this._SigmaCr;
            typedTarget._R = this._R;
            typedTarget._G = this._G;
            typedTarget._B = this._B;
        }
        
        /// <summary>
        ///Clones ColorDefinition
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorDefinition to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(this._Y);
            writer.Write(this._Cb);
            writer.Write(this._Cr);
            writer.Write(this._SigmaY);
            writer.Write(this._SigmaCb);
            writer.Write(this._SigmaCr);
            writer.Write(this._R);
            writer.Write(this._G);
            writer.Write(this._B);
        }
        
        /// <summary>
        ///Deserializes ColorDefinition
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorDefinition</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._Y = reader.ReadInt32();
            this._Cb = reader.ReadInt32();
            this._Cr = reader.ReadInt32();
            this._SigmaY = reader.ReadInt32();
            this._SigmaCb = reader.ReadInt32();
            this._SigmaCr = reader.ReadInt32();
            this._R = reader.ReadInt32();
            this._G = reader.ReadInt32();
            this._B = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="SegmentedImage")]
    public class SegmentedImage : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SegmentedImage() {
        }
        
        public SegmentedImage(int width, int height) {
            this._Width = width;
            this._height = height;
        }
        
        private global::System.DateTime _TimeStamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private int _Width;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int Width {
            get {
                return this._Width;
            }
            set {
                this._Width = value;
            }
        }
        
        private int _height;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int height {
            get {
                return this._height;
            }
            set {
                this._height = value;
            }
        }
        
        private byte[] _Segmented;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public byte[] Segmented {
            get {
                return this._Segmented;
            }
            set {
                this._Segmented = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SegmentedImage to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._Width = this._Width;
            typedTarget._height = this._height;
            if ((this._Segmented != null)) {
                int count = this._Segmented.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._Segmented, 0, tmp, 0, global::System.Buffer.ByteLength(this._Segmented));
                typedTarget._Segmented = tmp;
            }
        }
        
        /// <summary>
        ///Clones SegmentedImage
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SegmentedImage to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            writer.Write(this._Width);
            writer.Write(this._height);
            if ((this._Segmented == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Segmented.Length);
                writer.Write(this._Segmented);
            }
        }
        
        /// <summary>
        ///Deserializes SegmentedImage
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SegmentedImage</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._Width = reader.ReadInt32();
            this._height = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Segmented = reader.ReadBytes(count0);
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="FoundColorAreas")]
    public class FoundColorAreas : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FoundColorAreas() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea> _Areas = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea>();
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea> Areas {
            get {
                return this._Areas;
            }
            set {
                this._Areas = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FoundColorAreas to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._Areas != null)) {
                int count = this._Areas.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea tmp0 = default(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea);
                    if ((this._Areas[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea tmp1 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Areas[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Areas = tmp;
            }
        }
        
        /// <summary>
        ///Clones FoundColorAreas
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FoundColorAreas to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._Areas == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Areas.Count);
                for (int indexAreas = 0; (indexAreas < this._Areas.Count); indexAreas = (indexAreas + 1)) {
                    if ((this._Areas[indexAreas] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Areas[indexAreas])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes FoundColorAreas
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FoundColorAreas</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Areas = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Areas.Add(default(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea));
                    if ((reader.ReadByte() != 0)) {
                        this._Areas[index0] = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="ColorArea")]
    public class ColorArea : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorArea() {
        }
        
        public ColorArea(string name) {
            this._Name = name;
        }
        
        private string _Name;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private int _CenterX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int CenterX {
            get {
                return this._CenterX;
            }
            set {
                this._CenterX = value;
            }
        }
        
        private int _CenterY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int CenterY {
            get {
                return this._CenterY;
            }
            set {
                this._CenterY = value;
            }
        }
        
        private int _MinX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MinX {
            get {
                return this._MinX;
            }
            set {
                this._MinX = value;
            }
        }
        
        private int _MaxX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MaxX {
            get {
                return this._MaxX;
            }
            set {
                this._MaxX = value;
            }
        }
        
        private int _MinY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MinY {
            get {
                return this._MinY;
            }
            set {
                this._MinY = value;
            }
        }
        
        private int _MaxY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int MaxY {
            get {
                return this._MaxY;
            }
            set {
                this._MaxY = value;
            }
        }
        
        private int _Area;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Area {
            get {
                return this._Area;
            }
            set {
                this._Area = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorArea to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea)(target));
            typedTarget._Name = this._Name;
            typedTarget._CenterX = this._CenterX;
            typedTarget._CenterY = this._CenterY;
            typedTarget._MinX = this._MinX;
            typedTarget._MaxX = this._MaxX;
            typedTarget._MinY = this._MinY;
            typedTarget._MaxY = this._MaxY;
            typedTarget._Area = this._Area;
        }
        
        /// <summary>
        ///Clones ColorArea
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorArea();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorArea to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(this._CenterX);
            writer.Write(this._CenterY);
            writer.Write(this._MinX);
            writer.Write(this._MaxX);
            writer.Write(this._MinY);
            writer.Write(this._MaxY);
            writer.Write(this._Area);
        }
        
        /// <summary>
        ///Deserializes ColorArea
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorArea</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._CenterX = reader.ReadInt32();
            this._CenterY = reader.ReadInt32();
            this._MinX = reader.ReadInt32();
            this._MaxX = reader.ReadInt32();
            this._MinY = reader.ReadInt32();
            this._MaxY = reader.ReadInt32();
            this._Area = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="ProcessFrameRequest")]
    public class ProcessFrameRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ProcessFrameRequest() {
        }
        
        public ProcessFrameRequest(bool process) {
            this._Process = process;
        }
        
        private bool _Process;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public bool Process {
            get {
                return this._Process;
            }
            set {
                this._Process = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ProcessFrameRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest)(target));
            typedTarget._Process = this._Process;
        }
        
        /// <summary>
        ///Clones ProcessFrameRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ProcessFrameRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Process);
        }
        
        /// <summary>
        ///Deserializes ProcessFrameRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ProcessFrameRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Process = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="FilteredSubscribeRequest")]
    public class FilteredSubscribeRequest : global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FilteredSubscribeRequest() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Filter _Filter;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Filter Filter {
            get {
                return this._Filter;
            }
            set {
                this._Filter = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FilteredSubscribeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest)(target));
            typedTarget._Filter = this._Filter;
        }
        
        /// <summary>
        ///Clones FilteredSubscribeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest target0 = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FilteredSubscribeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._Filter)));
        }
        
        /// <summary>
        ///Deserializes FilteredSubscribeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FilteredSubscribeRequest</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Filter = ((global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Filter)(reader.ReadInt32()));
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ProcessFrame : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public ProcessFrame() {
        }
        
        public ProcessFrame(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest body) : 
                base(body) {
        }
        
        public ProcessFrame(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateSegmentedImage : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateSegmentedImage() {
        }
        
        public UpdateSegmentedImage(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage body) : 
                base(body) {
        }
        
        public UpdateSegmentedImage(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateColorAreas : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateColorAreas() {
        }
        
        public UpdateColorAreas(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas body) : 
                base(body) {
        }
        
        public UpdateColorAreas(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class FilteredSubscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>> {
        
        public FilteredSubscribe() {
        }
        
        public FilteredSubscribe(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest body) : 
                base(body) {
        }
        
        public FilteredSubscribe(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddColorDefinition : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType>> {
        
        public AddColorDefinition() {
        }
        
        public AddColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body) : 
                base(body) {
        }
        
        public AddColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RemoveColorDefinition : global::Microsoft.Dss.ServiceModel.Dssp.Delete<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType>> {
        
        public RemoveColorDefinition() {
        }
        
        public RemoveColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body) : 
                base(body) {
        }
        
        public RemoveColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateColorDefinition : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateColorDefinition() {
        }
        
        public UpdateColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body) : 
                base(body) {
        }
        
        public UpdateColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class FindColorDefinition : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet>> {
        
        public FindColorDefinition() {
        }
        
        public FindColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body) : 
                base(body) {
        }
        
        public FindColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateSettings : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateSettings() {
        }
        
        public UpdateSettings(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings body) : 
                base(body) {
        }
        
        public UpdateSettings(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ColorSegmentOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Dss.Core.DsspHttp.HttpQuery, global:: Microsoft.Dss.Core.DsspHttp.HttpPost, global:: Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings> {
        
        public ColorSegmentOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> ProcessFrame(bool process) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest(process);
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ProcessFrame(bool process, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame operation) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest(process);
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> ProcessFrame(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ProcessFrame(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrameRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ProcessFrame(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateSegmentedImage(int width, int height) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage(width, height);
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateSegmentedImage(int width, int height, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage operation) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage(width, height);
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateSegmentedImage(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateSegmentedImage(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.SegmentedImage();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSegmentedImage(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateColorAreas() {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas();
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateColorAreas(out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas operation) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas();
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateColorAreas(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateColorAreas(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FoundColorAreas();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorAreas(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> FilteredSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest();
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FilteredSubscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe operation, params System.Type[] types) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> FilteredSubscribe(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FilteredSubscribe(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribeRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FilteredSubscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType> AddColorDefinition(string name, int y, int cb, int cr) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition(name, y, cb, cr);
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddColorDefinition(string name, int y, int cb, int cr, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition operation) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition(name, y, cb, cr);
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType> AddColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.AddColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> RemoveColorDefinition(string name, int y, int cb, int cr) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition(name, y, cb, cr);
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RemoveColorDefinition(string name, int y, int cb, int cr, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition operation) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition(name, y, cb, cr);
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> RemoveColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RemoveColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.RemoveColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateColorDefinition(string name, int y, int cb, int cr) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition(name, y, cb, cr);
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateColorDefinition(string name, int y, int cb, int cr, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition operation) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition(name, y, cb, cr);
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet> FindColorDefinition(string name, int y, int cb, int cr) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition(name, y, cb, cr);
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FindColorDefinition(string name, int y, int cb, int cr, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition operation) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition(name, y, cb, cr);
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSet> FindColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FindColorDefinition(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorDefinition();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.FindColorDefinition(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery() {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateSettings(double threshold, bool showPartialMatches, bool despeckle, int minBlobSize) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings(threshold, showPartialMatches, despeckle, minBlobSize);
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateSettings(double threshold, bool showPartialMatches, bool despeckle, int minBlobSize, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings operation) {
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings(threshold, showPartialMatches, despeckle, minBlobSize);
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateSettings(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings();
            }
            global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateSettings(global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings body, out global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.Settings();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.UpdateSettings(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", ElementName="Filter")]
    [global::System.FlagsAttribute()]
    public enum Filter : int {
        
        None = 0,
        
        ColorDefinitions = 1,
        
        SegmentedImage = 2,
        
        Settings = 4,
        
        ColorAreas = 8,
        
        Internal = 16,
        
        All = 31,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("The ColorSegment Service")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) ColorSegment")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ColorSegmentOperations = new global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ColorSegmentOperations, "http://schemas.microsoft.com/robotics/2007/07/colorsegment.user.html", "ColorSegmentOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.ColorSegment.Proxy.ColorSegmentOperations ColorSegmentOperations;
    }
}
