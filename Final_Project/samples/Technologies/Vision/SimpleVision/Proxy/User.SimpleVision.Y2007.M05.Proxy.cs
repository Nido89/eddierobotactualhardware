//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.SimpleVision.Y2007.M05, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f9" +
    "074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.SimpleVision.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", ElementName="SimpleVisionState")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the vision service state.")]
    public class SimpleVisionState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SimpleVisionState() {
        }
        
        private int _WebCamPollingIntervalInMs;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the polling interval for the webcam service (in ms).")]
        public int WebCamPollingIntervalInMs {
            get {
                return this._WebCamPollingIntervalInMs;
            }
            set {
                this._WebCamPollingIntervalInMs = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector _TrackingObjectColor;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the color to be tracked (RGB and similarity threshold).")]
        public global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector TrackingObjectColor {
            get {
                return this._TrackingObjectColor;
            }
            set {
                this._TrackingObjectColor = value;
            }
        }
        
        private int _ColorAreaThreshold;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the color object detection area threshold (minimum number of pixels).\n(" +
            "Default value = 200, typical range = 50-5000)")]
        public int ColorAreaThreshold {
            get {
                return this._ColorAreaThreshold;
            }
            set {
                this._ColorAreaThreshold = value;
            }
        }
        
        private int _SkinAreaThreshold;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the skin region detection area threshold (minimum number of pixels).\n(D" +
            "efault value = 250, typical range = 50-5000)")]
        public int SkinAreaThreshold {
            get {
                return this._SkinAreaThreshold;
            }
            set {
                this._SkinAreaThreshold = value;
            }
        }
        
        private int _HeadAreaThreshold;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the head region detection area threshold (minimum number of pixels).\n(D" +
            "efault value = 250, typical range = 50-5000)")]
        public int HeadAreaThreshold {
            get {
                return this._HeadAreaThreshold;
            }
            set {
                this._HeadAreaThreshold = value;
            }
        }
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the image width.")]
        public const int ImageWidth = 160;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the image height.")]
        public const int ImageHeight = 120;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the face width.")]
        public const int FaceWidth = 60;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the face height.")]
        public const int FaceHeight = 60;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies maximum number of regions for segmentation.")]
        public const int MaxRegions = 5;
        
        /// <summary>
        ///Copies the data member values of the current SimpleVisionState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState typedTarget = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState)(target));
            typedTarget._WebCamPollingIntervalInMs = this._WebCamPollingIntervalInMs;
            if ((this._TrackingObjectColor != null)) {
                global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector tmp = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector();
                ((Microsoft.Dss.Core.IDssSerializable)(this._TrackingObjectColor)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._TrackingObjectColor = tmp;
            }
            typedTarget._ColorAreaThreshold = this._ColorAreaThreshold;
            typedTarget._SkinAreaThreshold = this._SkinAreaThreshold;
            typedTarget._HeadAreaThreshold = this._HeadAreaThreshold;
        }
        
        /// <summary>
        ///Clones SimpleVisionState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState target0 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SimpleVisionState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._WebCamPollingIntervalInMs);
            if ((this._TrackingObjectColor == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._TrackingObjectColor)).Serialize(writer);
            }
            writer.Write(this._ColorAreaThreshold);
            writer.Write(this._SkinAreaThreshold);
            writer.Write(this._HeadAreaThreshold);
        }
        
        /// <summary>
        ///Deserializes SimpleVisionState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SimpleVisionState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._WebCamPollingIntervalInMs = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._TrackingObjectColor = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector())).Deserialize(reader)));
            }
            this._ColorAreaThreshold = reader.ReadInt32();
            this._SkinAreaThreshold = reader.ReadInt32();
            this._HeadAreaThreshold = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", ElementName="ColorVector")]
    public class ColorVector : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ColorVector() {
        }
        
        private double _Red;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the normalized Red value = Red/(Red+Green+Blue).\n(Range = 0.0-1.0)")]
        public double Red {
            get {
                return this._Red;
            }
            set {
                this._Red = value;
            }
        }
        
        private double _Green;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the normalized Green value = Green/(Red+Green+Blue).\n(Range = 0.0-1.0)")]
        public double Green {
            get {
                return this._Green;
            }
            set {
                this._Green = value;
            }
        }
        
        private double _Blue;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the normalized Blue value = Blue/(Red+Green+Blue).\n(Range = 0.0-1.0)")]
        public double Blue {
            get {
                return this._Blue;
            }
            set {
                this._Blue = value;
            }
        }
        
        private double _SimilarityMeasure;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the similarity threshold value; comparing two color vectors.\n(Typical r" +
            "ange = 0.9~1.0)")]
        public double SimilarityMeasure {
            get {
                return this._SimilarityMeasure;
            }
            set {
                this._SimilarityMeasure = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ColorVector to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector typedTarget = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector)(target));
            typedTarget._Red = this._Red;
            typedTarget._Green = this._Green;
            typedTarget._Blue = this._Blue;
            typedTarget._SimilarityMeasure = this._SimilarityMeasure;
        }
        
        /// <summary>
        ///Clones ColorVector
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector target0 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ColorVector to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Red);
            writer.Write(this._Green);
            writer.Write(this._Blue);
            writer.Write(this._SimilarityMeasure);
        }
        
        /// <summary>
        ///Deserializes ColorVector
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ColorVector</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Red = reader.ReadDouble();
            this._Green = reader.ReadDouble();
            this._Blue = reader.ReadDouble();
            this._SimilarityMeasure = reader.ReadDouble();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", ElementName="ObjectResult")]
    public class ObjectResult : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ObjectResult() {
        }
        
        private bool _ObjectFound;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a color object was found.")]
        public bool ObjectFound {
            get {
                return this._ObjectFound;
            }
            set {
                this._ObjectFound = value;
            }
        }
        
        private int _XMean;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the color object\'s X mean value.")]
        public int XMean {
            get {
                return this._XMean;
            }
            set {
                this._XMean = value;
            }
        }
        
        private int _YMean;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the color object\'s Y mean value.")]
        public int YMean {
            get {
                return this._YMean;
            }
            set {
                this._YMean = value;
            }
        }
        
        private int _Area;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the color object\'s area.")]
        public int Area {
            get {
                return this._Area;
            }
            set {
                this._Area = value;
            }
        }
        
        private double _XStdDev;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the color object\'s X standard deviation value.")]
        public double XStdDev {
            get {
                return this._XStdDev;
            }
            set {
                this._XStdDev = value;
            }
        }
        
        private double _YStdDev;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the color object\'s Y standard deviation value.")]
        public double YStdDev {
            get {
                return this._YStdDev;
            }
            set {
                this._YStdDev = value;
            }
        }
        
        private bool _MotionFound;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates object moved.")]
        public bool MotionFound {
            get {
                return this._MotionFound;
            }
            set {
                this._MotionFound = value;
            }
        }
        
        private int _XMotion;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates object movement in the X direction.")]
        public int XMotion {
            get {
                return this._XMotion;
            }
            set {
                this._XMotion = value;
            }
        }
        
        private int _YMotion;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates object movement in the Y direction.")]
        public int YMotion {
            get {
                return this._YMotion;
            }
            set {
                this._YMotion = value;
            }
        }
        
        private int _MotionSize;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates size of the object movement.")]
        public int MotionSize {
            get {
                return this._MotionSize;
            }
            set {
                this._MotionSize = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ObjectResult to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult typedTarget = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult)(target));
            typedTarget._ObjectFound = this._ObjectFound;
            typedTarget._XMean = this._XMean;
            typedTarget._YMean = this._YMean;
            typedTarget._Area = this._Area;
            typedTarget._XStdDev = this._XStdDev;
            typedTarget._YStdDev = this._YStdDev;
            typedTarget._MotionFound = this._MotionFound;
            typedTarget._XMotion = this._XMotion;
            typedTarget._YMotion = this._YMotion;
            typedTarget._MotionSize = this._MotionSize;
        }
        
        /// <summary>
        ///Clones ObjectResult
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult target0 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ObjectResult to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._ObjectFound);
            writer.Write(this._XMean);
            writer.Write(this._YMean);
            writer.Write(this._Area);
            writer.Write(this._XStdDev);
            writer.Write(this._YStdDev);
            writer.Write(this._MotionFound);
            writer.Write(this._XMotion);
            writer.Write(this._YMotion);
            writer.Write(this._MotionSize);
        }
        
        /// <summary>
        ///Deserializes ObjectResult
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ObjectResult</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._ObjectFound = reader.ReadBoolean();
            this._XMean = reader.ReadInt32();
            this._YMean = reader.ReadInt32();
            this._Area = reader.ReadInt32();
            this._XStdDev = reader.ReadDouble();
            this._YStdDev = reader.ReadDouble();
            this._MotionFound = reader.ReadBoolean();
            this._XMotion = reader.ReadInt32();
            this._YMotion = reader.ReadInt32();
            this._MotionSize = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", ElementName="FaceResult")]
    public class FaceResult : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FaceResult() {
        }
        
        private bool _IsFaceResultValid;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indiates that the face result is valid.")]
        public bool IsFaceResultValid {
            get {
                return this._IsFaceResultValid;
            }
            set {
                this._IsFaceResultValid = value;
            }
        }
        
        private bool _HeadFound;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a face was found.")]
        public bool HeadFound {
            get {
                return this._HeadFound;
            }
            set {
                this._HeadFound = value;
            }
        }
        
        private bool _HeadFoundOnColorObject;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates a face was found on a color object.")]
        public bool HeadFoundOnColorObject {
            get {
                return this._HeadFoundOnColorObject;
            }
            set {
                this._HeadFoundOnColorObject = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType _HeadBoxRegion;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the region rectangle of the detected face.")]
        public global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType HeadBoxRegion {
            get {
                return this._HeadBoxRegion;
            }
            set {
                this._HeadBoxRegion = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FaceResult to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult typedTarget = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult)(target));
            typedTarget._IsFaceResultValid = this._IsFaceResultValid;
            typedTarget._HeadFound = this._HeadFound;
            typedTarget._HeadFoundOnColorObject = this._HeadFoundOnColorObject;
            typedTarget._HeadBoxRegion = this._HeadBoxRegion;
        }
        
        /// <summary>
        ///Clones FaceResult
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult target0 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FaceResult to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._IsFaceResultValid);
            writer.Write(this._HeadFound);
            writer.Write(this._HeadFoundOnColorObject);
            ((Microsoft.Dss.Core.IDssSerializable)(this._HeadBoxRegion)).Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes FaceResult
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FaceResult</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._IsFaceResultValid = reader.ReadBoolean();
            this._HeadFound = reader.ReadBoolean();
            this._HeadFoundOnColorObject = reader.ReadBoolean();
            this._HeadBoxRegion = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType())).Deserialize(reader)));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", ElementName="RectangleType")]
    public struct RectangleType : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        /// <summary>
        ///Copies the data member values of the current RectangleType to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones RectangleType
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType target0 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RectangleType to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes RectangleType
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RectangleType</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", ElementName="HandGestureResult")]
    public class HandGestureResult : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public HandGestureResult() {
        }
        
        private bool _LeftHandGestureFound;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates left hand gesture found.")]
        public bool LeftHandGestureFound {
            get {
                return this._LeftHandGestureFound;
            }
            set {
                this._LeftHandGestureFound = value;
            }
        }
        
        private int _LeftHandX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates left hand X coordinate.")]
        public int LeftHandX {
            get {
                return this._LeftHandX;
            }
            set {
                this._LeftHandX = value;
            }
        }
        
        private int _LeftHandY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates left hand Y coordinate.")]
        public int LeftHandY {
            get {
                return this._LeftHandY;
            }
            set {
                this._LeftHandY = value;
            }
        }
        
        private bool _RightHandGestureFound;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates right hand gesture found.")]
        public bool RightHandGestureFound {
            get {
                return this._RightHandGestureFound;
            }
            set {
                this._RightHandGestureFound = value;
            }
        }
        
        private int _RightHandX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates right hand X coordinate.")]
        public int RightHandX {
            get {
                return this._RightHandX;
            }
            set {
                this._RightHandX = value;
            }
        }
        
        private int _RightHandY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates right hand Y coordinate.")]
        public int RightHandY {
            get {
                return this._RightHandY;
            }
            set {
                this._RightHandY = value;
            }
        }
        
        private bool _IsHandGestureResultValid;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if hand gesture detection result is valid.")]
        public bool IsHandGestureResultValid {
            get {
                return this._IsHandGestureResultValid;
            }
            set {
                this._IsHandGestureResultValid = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current HandGestureResult to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult typedTarget = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult)(target));
            typedTarget._LeftHandGestureFound = this._LeftHandGestureFound;
            typedTarget._LeftHandX = this._LeftHandX;
            typedTarget._LeftHandY = this._LeftHandY;
            typedTarget._RightHandGestureFound = this._RightHandGestureFound;
            typedTarget._RightHandX = this._RightHandX;
            typedTarget._RightHandY = this._RightHandY;
            typedTarget._IsHandGestureResultValid = this._IsHandGestureResultValid;
        }
        
        /// <summary>
        ///Clones HandGestureResult
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult target0 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current HandGestureResult to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._LeftHandGestureFound);
            writer.Write(this._LeftHandX);
            writer.Write(this._LeftHandY);
            writer.Write(this._RightHandGestureFound);
            writer.Write(this._RightHandX);
            writer.Write(this._RightHandY);
            writer.Write(this._IsHandGestureResultValid);
        }
        
        /// <summary>
        ///Deserializes HandGestureResult
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized HandGestureResult</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._LeftHandGestureFound = reader.ReadBoolean();
            this._LeftHandX = reader.ReadInt32();
            this._LeftHandY = reader.ReadInt32();
            this._RightHandGestureFound = reader.ReadBoolean();
            this._RightHandX = reader.ReadInt32();
            this._RightHandY = reader.ReadInt32();
            this._IsHandGestureResultValid = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", ElementName="PointType")]
    public struct PointType : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        /// <summary>
        ///Copies the data member values of the current PointType to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            throw new System.InvalidOperationException("CopyTo() is not valid for structs!");
        }
        
        /// <summary>
        ///Clones PointType
        ///</summary>
        ///<returns>cloned value</returns>
        public object Clone() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.PointType target0 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.PointType();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PointType to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes PointType
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PointType</returns>
        public object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the vision tracking service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Sets the object tracking color.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetObjectTrackingColor : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetObjectTrackingColor() {
        }
        
        public SetObjectTrackingColor(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector body) : 
                base(body) {
        }
        
        public SetObjectTrackingColor(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DisplayNameAttribute("DetectColoredObject")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates that a colored object has been detected.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class NotifyObjectDetection : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public NotifyObjectDetection() {
        }
        
        public NotifyObjectDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult body) : 
                base(body) {
        }
        
        public NotifyObjectDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DisplayNameAttribute("(User) DetectFace")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates that a face was detected.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class NotifyFaceDetection : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public NotifyFaceDetection() {
        }
        
        public NotifyFaceDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult body) : 
                base(body) {
        }
        
        public NotifyFaceDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DisplayNameAttribute("(User) DetectHandGesture")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates that a hand gesture was detected.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class NotifyHandGestureDetection : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public NotifyHandGestureDetection() {
        }
        
        public NotifyHandGestureDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult body) : 
                base(body) {
        }
        
        public NotifyHandGestureDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SimpleVisionOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor, global:: Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection, global:: Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection, global:: Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection> {
        
        public SimpleVisionOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetObjectTrackingColor() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetObjectTrackingColor(out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor operation) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector();
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetObjectTrackingColor(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector();
            }
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetObjectTrackingColor(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector body, out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SetObjectTrackingColor(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> NotifyObjectDetection() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice NotifyObjectDetection(out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection operation) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult();
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> NotifyObjectDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult();
            }
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice NotifyObjectDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult body, out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyObjectDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> NotifyFaceDetection() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice NotifyFaceDetection(out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection operation) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult();
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> NotifyFaceDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult();
            }
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice NotifyFaceDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult body, out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyFaceDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> NotifyHandGestureDetection() {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice NotifyHandGestureDetection(out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection operation) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult();
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> NotifyHandGestureDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult();
            }
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice NotifyHandGestureDetection(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult body, out global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.NotifyHandGestureDetection(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to a set of basic services for color and face detection and hand " +
        "gesture recognition.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Simple Vision")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SimpleVisionOperations = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SimpleVisionOperations, "http://schemas.microsoft.com/robotics/2007/05/simplevision.user.html", "SimpleVisionOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionOperations SimpleVisionOperations;
    }
}
