//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.SimpleVision.Y2007.M05, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f9" +
    "074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_SimpleVisionState_TO_Microsoft_Robotics_Services_Sample_SimpleVision_SimpleVisionState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.SimpleVisionState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_SimpleVisionState_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_SimpleVisionState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ColorVector_TO_Microsoft_Robotics_Services_Sample_SimpleVision_ColorVector));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.ColorVector), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_ColorVector_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ColorVector));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ObjectResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_ObjectResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.ObjectResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_ObjectResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ObjectResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_FaceResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_FaceResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.FaceResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_FaceResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_FaceResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_RectangleType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_RectangleType));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.RectangleType), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_RectangleType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_RectangleType));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_HandGestureResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_HandGestureResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.HandGestureResult), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_HandGestureResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_HandGestureResult));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.PointType), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_PointType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_PointType));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sample.SimpleVision.PointType), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sample_SimpleVision_PointType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_PointType));
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_SimpleVisionState_TO_Microsoft_Robotics_Services_Sample_SimpleVision_SimpleVisionState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.SimpleVisionState target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.SimpleVisionState();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState)(transformFrom));
            target.WebCamPollingIntervalInMs = from.WebCamPollingIntervalInMs;
            if ((from.TrackingObjectColor != null)) {
                target.TrackingObjectColor = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.ColorVector)(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ColorVector_TO_Microsoft_Robotics_Services_Sample_SimpleVision_ColorVector(from.TrackingObjectColor)));
            }
            else {
                target.TrackingObjectColor = null;
            }
            target.ColorAreaThreshold = from.ColorAreaThreshold;
            target.SkinAreaThreshold = from.SkinAreaThreshold;
            target.HeadAreaThreshold = from.HeadAreaThreshold;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_SimpleVisionState_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_SimpleVisionState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.SimpleVisionState();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.SimpleVisionState from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.SimpleVisionState)(transformFrom));
            target.WebCamPollingIntervalInMs = from.WebCamPollingIntervalInMs;
            global::Microsoft.Robotics.Services.Sample.SimpleVision.ColorVector tmp = from.TrackingObjectColor;
            if ((tmp != null)) {
                target.TrackingObjectColor = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector)(Microsoft_Robotics_Services_Sample_SimpleVision_ColorVector_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ColorVector(tmp)));
            }
            target.ColorAreaThreshold = from.ColorAreaThreshold;
            target.SkinAreaThreshold = from.SkinAreaThreshold;
            target.HeadAreaThreshold = from.HeadAreaThreshold;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ColorVector_TO_Microsoft_Robotics_Services_Sample_SimpleVision_ColorVector(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.ColorVector target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.ColorVector();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector)(transformFrom));
            target.Red = from.Red;
            target.Green = from.Green;
            target.Blue = from.Blue;
            target.SimilarityMeasure = from.SimilarityMeasure;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_ColorVector_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ColorVector(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ColorVector();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.ColorVector from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.ColorVector)(transformFrom));
            target.Red = from.Red;
            target.Green = from.Green;
            target.Blue = from.Blue;
            target.SimilarityMeasure = from.SimilarityMeasure;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ObjectResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_ObjectResult(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.ObjectResult target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.ObjectResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult)(transformFrom));
            target.ObjectFound = from.ObjectFound;
            target.XMean = from.XMean;
            target.YMean = from.YMean;
            target.Area = from.Area;
            target.XStdDev = from.XStdDev;
            target.YStdDev = from.YStdDev;
            target.MotionFound = from.MotionFound;
            target.XMotion = from.XMotion;
            target.YMotion = from.YMotion;
            target.MotionSize = from.MotionSize;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_ObjectResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_ObjectResult(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.ObjectResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.ObjectResult from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.ObjectResult)(transformFrom));
            target.ObjectFound = from.ObjectFound;
            target.XMean = from.XMean;
            target.YMean = from.YMean;
            target.Area = from.Area;
            target.XStdDev = from.XStdDev;
            target.YStdDev = from.YStdDev;
            target.MotionFound = from.MotionFound;
            target.XMotion = from.XMotion;
            target.YMotion = from.YMotion;
            target.MotionSize = from.MotionSize;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_FaceResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_FaceResult(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.FaceResult target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.FaceResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult)(transformFrom));
            target.IsFaceResultValid = from.IsFaceResultValid;
            target.HeadFound = from.HeadFound;
            target.HeadFoundOnColorObject = from.HeadFoundOnColorObject;
            target.HeadBoxRegion = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.RectangleType)(Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_RectangleType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_RectangleType(from.HeadBoxRegion)));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_FaceResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_FaceResult(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.FaceResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.FaceResult from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.FaceResult)(transformFrom));
            target.IsFaceResultValid = from.IsFaceResultValid;
            target.HeadFound = from.HeadFound;
            target.HeadFoundOnColorObject = from.HeadFoundOnColorObject;
            global::Microsoft.Robotics.Services.Sample.SimpleVision.RectangleType tmp = from.HeadBoxRegion;
            target.HeadBoxRegion = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType)(Microsoft_Robotics_Services_Sample_SimpleVision_RectangleType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_RectangleType(tmp)));
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType _cachedInstance0 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.RectangleType();
        
        private static global::Microsoft.Robotics.Services.Sample.SimpleVision.RectangleType _cachedInstance = new global::Microsoft.Robotics.Services.Sample.SimpleVision.RectangleType();
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_RectangleType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_RectangleType(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_RectangleType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_RectangleType(object transformFrom) {
            return _cachedInstance0;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_HandGestureResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_HandGestureResult(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.HandGestureResult target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.HandGestureResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult)(transformFrom));
            target.LeftHandGestureFound = from.LeftHandGestureFound;
            target.LeftHandX = from.LeftHandX;
            target.LeftHandY = from.LeftHandY;
            target.RightHandGestureFound = from.RightHandGestureFound;
            target.RightHandX = from.RightHandX;
            target.RightHandY = from.RightHandY;
            target.IsHandGestureResultValid = from.IsHandGestureResultValid;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_HandGestureResult_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_HandGestureResult(object transformFrom) {
            global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult target = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.HandGestureResult();
            global::Microsoft.Robotics.Services.Sample.SimpleVision.HandGestureResult from = ((global::Microsoft.Robotics.Services.Sample.SimpleVision.HandGestureResult)(transformFrom));
            target.LeftHandGestureFound = from.LeftHandGestureFound;
            target.LeftHandX = from.LeftHandX;
            target.LeftHandY = from.LeftHandY;
            target.RightHandGestureFound = from.RightHandGestureFound;
            target.RightHandX = from.RightHandX;
            target.RightHandY = from.RightHandY;
            target.IsHandGestureResultValid = from.IsHandGestureResultValid;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.PointType _cachedInstance2 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.Proxy.PointType();
        
        private static global::Microsoft.Robotics.Services.Sample.SimpleVision.PointType _cachedInstance1 = new global::Microsoft.Robotics.Services.Sample.SimpleVision.PointType();
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_PointType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_PointType(object transformFrom) {
            return _cachedInstance1;
        }
        
        public static object Microsoft_Robotics_Services_Sample_SimpleVision_PointType_TO_Microsoft_Robotics_Services_Sample_SimpleVision_Proxy_PointType(object transformFrom) {
            return _cachedInstance2;
        }
    }
}
