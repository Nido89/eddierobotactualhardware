//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.TextToSpeech.Y2006.M05, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f9" +
    "074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy {
    
    
    /// <summary>
    ///            Text To Speech Service state
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html", ElementName="TextToSpeechState")]
    [global::System.ComponentModel.DescriptionAttribute("Text To Speech Service state")]
    public class TextToSpeechState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TextToSpeechState() {
        }
        
        private global::System.Collections.Generic.List<string> _Voices;
        
        /// <summary>
        ///            List of available voices
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the set of voices available.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) List of available voices")]
        public global::System.Collections.Generic.List<string> Voices {
            get {
                return this._Voices;
            }
            set {
                this._Voices = value;
            }
        }
        
        private string _Voice;
        
        /// <summary>
        ///            Voice which will say text
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the specific voice used.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Voice which will say text")]
        public string Voice {
            get {
                return this._Voice;
            }
            set {
                this._Voice = value;
            }
        }
        
        private int _Volume;
        
        /// <summary>
        ///            Volume of voice (range: 0 to 100)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the speaking output volume.\n(0 to 100)")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Voice volume")]
        public int Volume {
            get {
                return this._Volume;
            }
            set {
                this._Volume = value;
            }
        }
        
        private int _Rate;
        
        /// <summary>
        ///            Rate of speech (range: -10 to 10)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the speaking rate.\n(-10 to +10)")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Speech rate")]
        public int Rate {
            get {
                return this._Rate;
            }
            set {
                this._Rate = value;
            }
        }
        
        private string _SpeechText;
        
        /// <summary>
        ///            Text to be spoken
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the text to be spoken.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Text to be spoken")]
        public string SpeechText {
            get {
                return this._SpeechText;
            }
            set {
                this._SpeechText = value;
            }
        }
        
        private bool _DisableAudioOutput;
        
        /// <summary>
        ///            Output audio
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Whether audio output shall be disabled or not.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Disable audio output")]
        public bool DisableAudioOutput {
            get {
                return this._DisableAudioOutput;
            }
            set {
                this._DisableAudioOutput = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TextToSpeechState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState typedTarget = ((global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState)(target));
            if ((this._Voices != null)) {
                int count = this._Voices.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(this._Voices);
                typedTarget._Voices = tmp;
            }
            typedTarget._Voice = this._Voice;
            typedTarget._Volume = this._Volume;
            typedTarget._Rate = this._Rate;
            typedTarget._SpeechText = this._SpeechText;
            typedTarget._DisableAudioOutput = this._DisableAudioOutput;
        }
        
        /// <summary>
        ///Clones TextToSpeechState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState target0 = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TextToSpeechState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Voices == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Voices.Count);
                for (int indexVoices = 0; (indexVoices < this._Voices.Count); indexVoices = (indexVoices + 1)) {
                    if ((this._Voices[indexVoices] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        writer.Write(this._Voices[indexVoices]);
                    }
                }
            }
            if ((this._Voice == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Voice);
            }
            writer.Write(this._Volume);
            writer.Write(this._Rate);
            if ((this._SpeechText == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SpeechText);
            }
            writer.Write(this._DisableAudioOutput);
        }
        
        /// <summary>
        ///Deserializes TextToSpeechState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TextToSpeechState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Voices = new global::System.Collections.Generic.List<string>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._Voices.Add(default(string));
                    if ((reader.ReadByte() != 0)) {
                        this._Voices[index] = reader.ReadString();
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                this._Voice = reader.ReadString();
            }
            this._Volume = reader.ReadInt32();
            this._Rate = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._SpeechText = reader.ReadString();
            }
            this._DisableAudioOutput = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Text to be spoken asynchronously
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html", ElementName="SayTextRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Text to be spoken asynchronously")]
    public class SayTextRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SayTextRequest() {
        }
        
        private string _SpeechText;
        
        /// <summary>
        ///            Text to be spoken
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the text to be spoken.")]
        public string SpeechText {
            get {
                return this._SpeechText;
            }
            set {
                this._SpeechText = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SayTextRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest typedTarget = ((global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest)(target));
            typedTarget._SpeechText = this._SpeechText;
        }
        
        /// <summary>
        ///Clones SayTextRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest target0 = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SayTextRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._SpeechText == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SpeechText);
            }
        }
        
        /// <summary>
        ///Deserializes SayTextRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SayTextRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._SpeechText = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Text to be spoken synchronously
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html", ElementName="SayTextSynchRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Text to be spoken synchronously")]
    public class SayTextSynchRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SayTextSynchRequest() {
        }
        
        private string _SpeechText;
        
        /// <summary>
        ///            Text to be spoken
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the text to be spoken.")]
        public string SpeechText {
            get {
                return this._SpeechText;
            }
            set {
                this._SpeechText = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SayTextSynchRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest typedTarget = ((global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest)(target));
            typedTarget._SpeechText = this._SpeechText;
        }
        
        /// <summary>
        ///Clones SayTextSynchRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest target0 = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SayTextSynchRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._SpeechText == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SpeechText);
            }
        }
        
        /// <summary>
        ///Deserializes SayTextSynchRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SayTextSynchRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._SpeechText = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Request body for the SetRate message
    ///            </summary>
    /// <see cref="T:Microsoft.Robotics.Technologies.Speech.TextToSpeech.SetRate" />
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html", ElementName="SetRateRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Request body for the SetRate message")]
    public class SetRateRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetRateRequest() {
        }
        
        private int _Rate;
        
        /// <summary>
        ///            The new speech rate.
        ///            This must be between -10 and 10.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the speaking rate.\n(-10 to +10)")]
        public int Rate {
            get {
                return this._Rate;
            }
            set {
                this._Rate = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetRateRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest typedTarget = ((global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest)(target));
            typedTarget._Rate = this._Rate;
        }
        
        /// <summary>
        ///Clones SetRateRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest target0 = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetRateRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Rate);
        }
        
        /// <summary>
        ///Deserializes SetRateRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetRateRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Rate = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Request body for the SetVolume message
    ///            </summary>
    /// <see cref="T:Microsoft.Robotics.Technologies.Speech.TextToSpeech.SetVolume" />
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html", ElementName="SetVolumeRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Request body for the SetVolume message")]
    public class SetVolumeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetVolumeRequest() {
        }
        
        private int _Volume;
        
        /// <summary>
        ///            The new speech volume.
        ///            This must be between 0 and 100.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the speaking output volume.\n(0 to 100)")]
        public int Volume {
            get {
                return this._Volume;
            }
            set {
                this._Volume = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetVolumeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest typedTarget = ((global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest)(target));
            typedTarget._Volume = this._Volume;
        }
        
        /// <summary>
        ///Clones SetVolumeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest target0 = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetVolumeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Volume);
        }
        
        /// <summary>
        ///Deserializes SetVolumeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetVolumeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Volume = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Request body for the SetVoice message
    ///            </summary>
    /// <see cref="T:Microsoft.Robotics.Technologies.Speech.TextToSpeech.SetVoice" />
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html", ElementName="SetVoiceRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Request body for the SetVoice message")]
    public class SetVoiceRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetVoiceRequest() {
        }
        
        private string _Voice;
        
        /// <summary>
        ///            The new voice to use.
        ///            This must be in the list in the state.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the specific voice used.")]
        public string Voice {
            get {
                return this._Voice;
            }
            set {
                this._Voice = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetVoiceRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest typedTarget = ((global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest)(target));
            typedTarget._Voice = this._Voice;
        }
        
        /// <summary>
        ///Clones SetVoiceRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest target0 = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetVoiceRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Voice == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Voice);
            }
        }
        
        /// <summary>
        ///Deserializes SetVoiceRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetVoiceRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Voice = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Viseme notification
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2006/05/texttospeech.user.html", ElementName="VisemeNotification")]
    [global::System.ComponentModel.DescriptionAttribute("Viseme notification")]
    public class VisemeNotification : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public VisemeNotification() {
        }
        
        private int _Viseme;
        
        /// <summary>
        ///            Current viseme
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Current viseme.")]
        public int Viseme {
            get {
                return this._Viseme;
            }
            set {
                this._Viseme = value;
            }
        }
        
        private int _NextViseme;
        
        /// <summary>
        ///            Next viseme
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Next viseme.")]
        public int NextViseme {
            get {
                return this._NextViseme;
            }
            set {
                this._NextViseme = value;
            }
        }
        
        private long _AudioPositionInTicks;
        
        /// <summary>
        ///            Audio position in ticks. Workaround using ticks because
        ///            System.TimeSpan itself cannot be XML serialized
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Audio position in ticks.")]
        public long AudioPositionInTicks {
            get {
                return this._AudioPositionInTicks;
            }
            set {
                this._AudioPositionInTicks = value;
            }
        }
        
        private long _DurationInTicks;
        
        /// <summary>
        ///            Duration in ticks. Workaround using ticks because
        ///            System.TimeSpan itself cannot be XML serialized
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Duration in ticks.")]
        public long DurationInTicks {
            get {
                return this._DurationInTicks;
            }
            set {
                this._DurationInTicks = value;
            }
        }
        
        private global::System.Speech.Synthesis.SynthesizerEmphasis _Emphasis;
        
        /// <summary>
        ///            Emphasis
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Emphasis")]
        public global::System.Speech.Synthesis.SynthesizerEmphasis Emphasis {
            get {
                return this._Emphasis;
            }
            set {
                this._Emphasis = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current VisemeNotification to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification typedTarget = ((global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification)(target));
            typedTarget._Viseme = this._Viseme;
            typedTarget._NextViseme = this._NextViseme;
            typedTarget._AudioPositionInTicks = this._AudioPositionInTicks;
            typedTarget._DurationInTicks = this._DurationInTicks;
            typedTarget._Emphasis = this._Emphasis;
        }
        
        /// <summary>
        ///Clones VisemeNotification
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification target0 = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current VisemeNotification to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Viseme);
            writer.Write(this._NextViseme);
            writer.Write(this._AudioPositionInTicks);
            writer.Write(this._DurationInTicks);
            writer.Write(((int)(this._Emphasis)));
        }
        
        /// <summary>
        ///Deserializes VisemeNotification
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized VisemeNotification</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Viseme = reader.ReadInt32();
            this._NextViseme = reader.ReadInt32();
            this._AudioPositionInTicks = reader.ReadInt64();
            this._DurationInTicks = reader.ReadInt64();
            this._Emphasis = ((global::System.Speech.Synthesis.SynthesizerEmphasis)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            returns the text to speech state
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Get")]
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the text-to-speech service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Changes all writable text to speech settings
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Replace")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the current state of the text-to-speech service.\nThis can be used to set the" +
        " rate, volume, voice and text to say all in one message.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Will say the text asynchronously
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SayText")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the text to be spoken asynchronously.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SayText : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SayText() {
        }
        
        public SayText(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest body) : 
                base(body) {
        }
        
        public SayText(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Will say the text (blocking)
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SayTextSynchronous")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the text to be spoken synchronously.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SayTextSynch : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SayTextSynch() {
        }
        
        public SayTextSynch(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest body) : 
                base(body) {
        }
        
        public SayTextSynch(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Set the speech rate
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SetRate")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the rate at which the text is spoken.\nAcceptable values are between -10 and " +
        "10.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetRate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetRate() {
        }
        
        public SetRate(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest body) : 
                base(body) {
        }
        
        public SetRate(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Set the speech volume
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SetVolume")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the volume at which the text is spoken.\nAcceptable values are between 0 and " +
        "100.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetVolume : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetVolume() {
        }
        
        public SetVolume(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest body) : 
                base(body) {
        }
        
        public SetVolume(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Set the speech voice
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SetVoice")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the voice which is used to say the text.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetVoice : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetVoice() {
        }
        
        public SetVoice(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest body) : 
                base(body) {
        }
        
        public SetVoice(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Subscribe")]
    [global::System.ComponentModel.DescriptionAttribute("Subscribe operation.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Viseme notificaiton
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) VisemeNotify")]
    [global::System.ComponentModel.DescriptionAttribute("Viseme notification.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class VisemeNotify : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public VisemeNotify() {
        }
        
        public VisemeNotify(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification body) : 
                base(body) {
        }
        
        public VisemeNotify(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Fault notificaiton
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) FaultNotify")]
    [global::System.ComponentModel.DescriptionAttribute("Fault notification.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class FaultNotify : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::W3C.Soap.Fault, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public FaultNotify() {
        }
        
        public FaultNotify(global::W3C.Soap.Fault body) : 
                base(body) {
        }
        
        public FaultNotify(global::W3C.Soap.Fault body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            the text to speech operations port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("the text to speech operations port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SpeechTextOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Dss.Core.DsspHttp.HttpPost, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify, global:: Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify> {
        
        public SpeechTextOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace operation) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.TextToSpeechState();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SayText() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SayText(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText operation) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SayText(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SayText(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextRequest();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayText(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SayTextSynch() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SayTextSynch(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch operation) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SayTextSynch(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SayTextSynch(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynchRequest();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SayTextSynch(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetRate() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetRate(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate operation) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetRate(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetRate(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRateRequest();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetRate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetVolume() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetVolume(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume operation) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetVolume(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetVolume(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolumeRequest();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVolume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetVoice() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetVoice(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice operation) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetVoice(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetVoice(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoiceRequest();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SetVoice(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> VisemeNotify() {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice VisemeNotify(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify operation) {
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> VisemeNotify(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice VisemeNotify(global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotification();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.VisemeNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> FaultNotify() {
            global::W3C.Soap.Fault body = new global::W3C.Soap.Fault();
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FaultNotify(out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify operation) {
            global::W3C.Soap.Fault body = new global::W3C.Soap.Fault();
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> FaultNotify(global::W3C.Soap.Fault body) {
            if ((body == null)) {
                body = new global::W3C.Soap.Fault();
            }
            global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FaultNotify(global::W3C.Soap.Fault body, out global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify operation) {
            if ((body == null)) {
                body = new global::W3C.Soap.Fault();
            }
            operation = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.FaultNotify(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Main text to speech implementation class
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Converts text to speech using the .NET speech synthesis framework.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Text to Speech (TTS)")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2006/05/texttospeech.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2006/05/texttospeech.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2006/05/texttospeech.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SpeechTextOperations = new global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SpeechTextOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SpeechTextOperations, "http://schemas.microsoft.com/2006/05/texttospeech.user.html", "SpeechTextOperations", ""));
        }
        
        public global::Microsoft.Robotics.Technologies.Speech.TextToSpeech.Proxy.SpeechTextOperations SpeechTextOperations;
    }
}
