//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.SpeechRecognizer.Y2008.M02, Version=0.0.0.0, Culture=neutral, PublicKeyToken" +
    "=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizerState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognizerState_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognizerState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizerState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognizerState_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognizerState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.InsertGrammarRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_InsertGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_InsertGrammarRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.InsertGrammarRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_InsertGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_InsertGrammarRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_ModifyGrammarDictionaryRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_ModifyGrammarDictionaryRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.ModifyGrammarDictionaryRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_ModifyGrammarDictionaryRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_ModifyGrammarDictionaryRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpdateGrammarRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_UpdateGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_UpdateGrammarRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpdateGrammarRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_UpdateGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_UpdateGrammarRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpsertGrammarRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_UpsertGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_UpsertGrammarRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpsertGrammarRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_UpsertGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_UpsertGrammarRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.DeleteGrammarRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_DeleteGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_DeleteGrammarRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.DeleteGrammarRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_DeleteGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_DeleteGrammarRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SetSrgsGrammarFileRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SetSrgsGrammarFileRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SetSrgsGrammarFileRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SetSrgsGrammarFileRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SetSrgsGrammarFileRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SetSrgsGrammarFileRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.EmulateRecognizeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_EmulateRecognizeRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_EmulateRecognizeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.EmulateRecognizeRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_EmulateRecognizeRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_EmulateRecognizeRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechDetectedNotification), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechDetectedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechDetectedNotification));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechDetectedNotification), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechDetectedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechDetectedNotification));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechInformation), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechInformation_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechInformation));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechInformation), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechInformation_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechInformation));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizedNotification), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognizedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognizedNotification));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizedNotification), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognizedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognizedNotification));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechAudioInformation), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechAudioInformation_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechAudioInformation));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechAudioInformation), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechAudioInformation_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechAudioInformation));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognitionRejectedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognitionRejectedNotification));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognitionRejectedNotification), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognitionRejectedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognitionRejectedNotification));
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognizerState_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognizerState(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizerState target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizerState();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizerState from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizerState)(transformFrom));
            target.IgnoreAudioInput = from.IgnoreAudioInput;
            target.GrammarType = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.GrammarType)(((int)(from.GrammarType))));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = default(global::System.Collections.Generic.Dictionary<string, global:: System.String>);
            if ((from.DictionaryGrammar != null)) {
                tmp = new global::System.Collections.Generic.Dictionary<string, global:: System.String>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = from.DictionaryGrammar.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp0 = default(string);
                    string tmp1 = default(string);
                    tmp0 = iterator.Current;
                    tmp1 = from.DictionaryGrammar[iterator.Current];
                    tmp.Add(tmp0, tmp1);
                }
            }
            else {
                tmp = null;
            }
            target.DictionaryGrammar = tmp;
            target.SrgsFileLocation = from.SrgsFileLocation;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognizerState_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognizerState(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizerState target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizerState();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizerState from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizerState)(transformFrom));
            target.IgnoreAudioInput = from.IgnoreAudioInput;
            target.GrammarType = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.GrammarType)(((int)(from.GrammarType))));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = from.DictionaryGrammar;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> tmp0 = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>);
            if ((tmp != null)) {
                tmp0 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = tmp.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp1 = default(string);
                    string tmp2 = default(string);
                    tmp1 = iterator.Current;
                    tmp2 = tmp[iterator.Current];
                    tmp0.Add(tmp1, tmp2);
                }
            }
            target.DictionaryGrammar = tmp0;
            target.SrgsFileLocation = from.SrgsFileLocation;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_InsertGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_InsertGrammarRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.InsertGrammarRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.InsertGrammarRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.InsertGrammarRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.InsertGrammarRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = default(global::System.Collections.Generic.Dictionary<string, global:: System.String>);
            if ((from.DictionaryGrammar != null)) {
                tmp = new global::System.Collections.Generic.Dictionary<string, global:: System.String>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = from.DictionaryGrammar.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp0 = default(string);
                    string tmp1 = default(string);
                    tmp0 = iterator.Current;
                    tmp1 = from.DictionaryGrammar[iterator.Current];
                    tmp.Add(tmp0, tmp1);
                }
            }
            else {
                tmp = null;
            }
            target.DictionaryGrammar = tmp;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_InsertGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_InsertGrammarRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.InsertGrammarRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.InsertGrammarRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.InsertGrammarRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.InsertGrammarRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = from.DictionaryGrammar;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> tmp0 = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>);
            if ((tmp != null)) {
                tmp0 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = tmp.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp1 = default(string);
                    string tmp2 = default(string);
                    tmp1 = iterator.Current;
                    tmp2 = tmp[iterator.Current];
                    tmp0.Add(tmp1, tmp2);
                }
            }
            target.DictionaryGrammar = tmp0;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_ModifyGrammarDictionaryRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_ModifyGrammarDictionaryRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.ModifyGrammarDictionaryRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.ModifyGrammarDictionaryRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = default(global::System.Collections.Generic.Dictionary<string, global:: System.String>);
            if ((from.DictionaryGrammar != null)) {
                tmp = new global::System.Collections.Generic.Dictionary<string, global:: System.String>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = from.DictionaryGrammar.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp0 = default(string);
                    string tmp1 = default(string);
                    tmp0 = iterator.Current;
                    tmp1 = from.DictionaryGrammar[iterator.Current];
                    tmp.Add(tmp0, tmp1);
                }
            }
            else {
                tmp = null;
            }
            target.DictionaryGrammar = tmp;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_ModifyGrammarDictionaryRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_ModifyGrammarDictionaryRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.ModifyGrammarDictionaryRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.ModifyGrammarDictionaryRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.ModifyGrammarDictionaryRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = from.DictionaryGrammar;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> tmp0 = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>);
            if ((tmp != null)) {
                tmp0 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = tmp.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp1 = default(string);
                    string tmp2 = default(string);
                    tmp1 = iterator.Current;
                    tmp2 = tmp[iterator.Current];
                    tmp0.Add(tmp1, tmp2);
                }
            }
            target.DictionaryGrammar = tmp0;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_UpdateGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_UpdateGrammarRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpdateGrammarRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpdateGrammarRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpdateGrammarRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpdateGrammarRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = default(global::System.Collections.Generic.Dictionary<string, global:: System.String>);
            if ((from.DictionaryGrammar != null)) {
                tmp = new global::System.Collections.Generic.Dictionary<string, global:: System.String>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = from.DictionaryGrammar.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp0 = default(string);
                    string tmp1 = default(string);
                    tmp0 = iterator.Current;
                    tmp1 = from.DictionaryGrammar[iterator.Current];
                    tmp.Add(tmp0, tmp1);
                }
            }
            else {
                tmp = null;
            }
            target.DictionaryGrammar = tmp;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_UpdateGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_UpdateGrammarRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpdateGrammarRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpdateGrammarRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpdateGrammarRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpdateGrammarRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = from.DictionaryGrammar;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> tmp0 = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>);
            if ((tmp != null)) {
                tmp0 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = tmp.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp1 = default(string);
                    string tmp2 = default(string);
                    tmp1 = iterator.Current;
                    tmp2 = tmp[iterator.Current];
                    tmp0.Add(tmp1, tmp2);
                }
            }
            target.DictionaryGrammar = tmp0;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_UpsertGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_UpsertGrammarRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpsertGrammarRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpsertGrammarRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpsertGrammarRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpsertGrammarRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = default(global::System.Collections.Generic.Dictionary<string, global:: System.String>);
            if ((from.DictionaryGrammar != null)) {
                tmp = new global::System.Collections.Generic.Dictionary<string, global:: System.String>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = from.DictionaryGrammar.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp0 = default(string);
                    string tmp1 = default(string);
                    tmp0 = iterator.Current;
                    tmp1 = from.DictionaryGrammar[iterator.Current];
                    tmp.Add(tmp0, tmp1);
                }
            }
            else {
                tmp = null;
            }
            target.DictionaryGrammar = tmp;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_UpsertGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_UpsertGrammarRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpsertGrammarRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.UpsertGrammarRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpsertGrammarRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.UpsertGrammarRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = from.DictionaryGrammar;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> tmp0 = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>);
            if ((tmp != null)) {
                tmp0 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = tmp.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp1 = default(string);
                    string tmp2 = default(string);
                    tmp1 = iterator.Current;
                    tmp2 = tmp[iterator.Current];
                    tmp0.Add(tmp1, tmp2);
                }
            }
            target.DictionaryGrammar = tmp0;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_DeleteGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_DeleteGrammarRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.DeleteGrammarRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.DeleteGrammarRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.DeleteGrammarRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.DeleteGrammarRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = default(global::System.Collections.Generic.Dictionary<string, global:: System.String>);
            if ((from.DictionaryGrammar != null)) {
                tmp = new global::System.Collections.Generic.Dictionary<string, global:: System.String>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = from.DictionaryGrammar.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp0 = default(string);
                    string tmp1 = default(string);
                    tmp0 = iterator.Current;
                    tmp1 = from.DictionaryGrammar[iterator.Current];
                    tmp.Add(tmp0, tmp1);
                }
            }
            else {
                tmp = null;
            }
            target.DictionaryGrammar = tmp;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_DeleteGrammarRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_DeleteGrammarRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.DeleteGrammarRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.DeleteGrammarRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.DeleteGrammarRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.DeleteGrammarRequest)(transformFrom));
            global::System.Collections.Generic.Dictionary<string, global:: System.String> tmp = from.DictionaryGrammar;
            global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string> tmp0 = default(global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>);
            if ((tmp != null)) {
                tmp0 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, string>();
                for (global::System.Collections.Generic.IEnumerator<string> iterator = tmp.Keys.GetEnumerator(); iterator.MoveNext(); 
                ) {
                    string tmp1 = default(string);
                    string tmp2 = default(string);
                    tmp1 = iterator.Current;
                    tmp2 = tmp[iterator.Current];
                    tmp0.Add(tmp1, tmp2);
                }
            }
            target.DictionaryGrammar = tmp0;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SetSrgsGrammarFileRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SetSrgsGrammarFileRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SetSrgsGrammarFileRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SetSrgsGrammarFileRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SetSrgsGrammarFileRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SetSrgsGrammarFileRequest)(transformFrom));
            target.FileLocation = from.FileLocation;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SetSrgsGrammarFileRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SetSrgsGrammarFileRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SetSrgsGrammarFileRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SetSrgsGrammarFileRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SetSrgsGrammarFileRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SetSrgsGrammarFileRequest)(transformFrom));
            target.FileLocation = from.FileLocation;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_EmulateRecognizeRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_EmulateRecognizeRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.EmulateRecognizeRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.EmulateRecognizeRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.EmulateRecognizeRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.EmulateRecognizeRequest)(transformFrom));
            target.Text = from.Text;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_EmulateRecognizeRequest_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_EmulateRecognizeRequest(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.EmulateRecognizeRequest target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.EmulateRecognizeRequest();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.EmulateRecognizeRequest from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.EmulateRecognizeRequest)(transformFrom));
            target.Text = from.Text;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechDetectedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechDetectedNotification(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechDetectedNotification target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechDetectedNotification();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechDetectedNotification from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechDetectedNotification)(transformFrom));
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechDetectedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechDetectedNotification(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechDetectedNotification target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechDetectedNotification();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechDetectedNotification from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechDetectedNotification)(transformFrom));
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechInformation_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechInformation(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechInformation target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechInformation();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechInformation from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechInformation)(transformFrom));
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechInformation_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechInformation(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechInformation target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechInformation();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechInformation from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechInformation)(transformFrom));
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognizedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognizedNotification(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizedNotification target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizedNotification();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizedNotification from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizedNotification)(transformFrom));
            target.Confidence = from.Confidence;
            target.Text = from.Text;
            if ((from.Semantics != null)) {
                global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.RecognizedSemanticValue tmp = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.RecognizedSemanticValue();
                ((Microsoft.Dss.Core.IDssSerializable)(from.Semantics)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                target.Semantics = tmp;
            }
            else {
                target.Semantics = null;
            }
            target.DurationInTicks = from.DurationInTicks;
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognizedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognizedNotification(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizedNotification target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognizedNotification();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizedNotification from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognizedNotification)(transformFrom));
            target.Confidence = from.Confidence;
            target.Text = from.Text;
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.RecognizedSemanticValue tmp = from.Semantics;
            if ((tmp != null)) {
                global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.RecognizedSemanticValue tmp0 = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.RecognizedSemanticValue();
                ((Microsoft.Dss.Core.IDssSerializable)(tmp)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                target.Semantics = tmp0;
            }
            target.DurationInTicks = from.DurationInTicks;
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechAudioInformation_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechAudioInformation(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechAudioInformation target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechAudioInformation();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechAudioInformation from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechAudioInformation)(transformFrom));
            target.DurationInTicks = from.DurationInTicks;
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechAudioInformation_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechAudioInformation(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechAudioInformation target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechAudioInformation();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechAudioInformation from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechAudioInformation)(transformFrom));
            target.DurationInTicks = from.DurationInTicks;
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognitionRejectedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognitionRejectedNotification(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognitionRejectedNotification target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognitionRejectedNotification();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification)(transformFrom));
            target.DurationInTicks = from.DurationInTicks;
            target.StartTime = from.StartTime;
            return target;
        }
        
        public static object Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_SpeechRecognitionRejectedNotification_TO_Microsoft_Robotics_Technologies_Speech_SpeechRecognizer_Proxy_SpeechRecognitionRejectedNotification(object transformFrom) {
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification target = new global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.Proxy.SpeechRecognitionRejectedNotification();
            global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognitionRejectedNotification from = ((global::Microsoft.Robotics.Technologies.Speech.SpeechRecognizer.SpeechRecognitionRejectedNotification)(transformFrom));
            target.DurationInTicks = from.DurationInTicks;
            target.StartTime = from.StartTime;
            return target;
        }
    }
}
