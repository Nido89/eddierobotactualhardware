//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.CustomSimulatedEntities.Y2009.M03, Version=0.0.0.0, Culture=neutral, PublicK" +
    "eyToken=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.CustomSimulatedEntities.Proxy.CustomSimulatedEntitiesState), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_Proxy_CustomSimulatedEntitiesState_TO_Robotics_CustomSimulatedEntities_CustomSimulatedEntitiesState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.CustomSimulatedEntities.CustomSimulatedEntitiesState), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_CustomSimulatedEntitiesState_TO_Robotics_CustomSimulatedEntities_Proxy_CustomSimulatedEntitiesState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.CustomSimulatedEntities.Proxy.SimulatedLRFEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_Proxy_SimulatedLRFEntity_TO_Robotics_CustomSimulatedEntities_SimulatedLRFEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.CustomSimulatedEntities.SimulatedLRFEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_SimulatedLRFEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedLRFEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.CustomSimulatedEntities.Proxy.SimulatedSonarEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_Proxy_SimulatedSonarEntity_TO_Robotics_CustomSimulatedEntities_SimulatedSonarEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.CustomSimulatedEntities.SimulatedSonarEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_SimulatedSonarEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedSonarEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.CustomSimulatedEntities.Proxy.SimulatedIREntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_Proxy_SimulatedIREntity_TO_Robotics_CustomSimulatedEntities_SimulatedIREntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.CustomSimulatedEntities.SimulatedIREntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_SimulatedIREntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedIREntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.CustomSimulatedEntities.Proxy.SimulatedColorSensorEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_Proxy_SimulatedColorSensorEntity_TO_Robotics_CustomSimulatedEntities_SimulatedColorSensorEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.CustomSimulatedEntities.SimulatedColorSensorEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_SimulatedColorSensorEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedColorSensorEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.CustomSimulatedEntities.Proxy.SimulatedBrightnessSensorEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_Proxy_SimulatedBrightnessSensorEntity_TO_Robotics_CustomSimulatedEntities_SimulatedBrightnessSensorEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.CustomSimulatedEntities.SimulatedBrightnessSensorEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_SimulatedBrightnessSensorEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedBrightnessSensorEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.CustomSimulatedEntities.Proxy.SimulatedCompassEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_Proxy_SimulatedCompassEntity_TO_Robotics_CustomSimulatedEntities_SimulatedCompassEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.CustomSimulatedEntities.SimulatedCompassEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_SimulatedCompassEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedCompassEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Robotics.CustomSimulatedEntities.Proxy.SimulatedGPSEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_Proxy_SimulatedGPSEntity_TO_Robotics_CustomSimulatedEntities_SimulatedGPSEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Robotics.CustomSimulatedEntities.SimulatedGPSEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Robotics_CustomSimulatedEntities_SimulatedGPSEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedGPSEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.Proxy.LaserRangeFinderEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_LaserRangeFinderEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_LaserRangeFinderEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_LaserRangeFinderEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_LaserRangeFinderEntity0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.BoxShape), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShapeProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.BoxShapeProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_ShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.ShapeProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_ShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Vector3), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.MaterialProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialAdvancedProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.MaterialAdvancedProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.SpringProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.SpringProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.MassDensity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.MassDensity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Pose), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Pose), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Quaternion), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeAdvancedProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector4_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector4));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Vector4), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector4_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector40));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.ContactNotificationFilter), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Proxy.Shape), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_Shape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_Shape));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Physics.Shape), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Physics_Proxy_Shape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_Shape0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_VisualEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_VisualEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.VisualEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_VisualEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_VisualEntity0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Joint), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Joint), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.JointProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.JointProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector_TO_Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.EntityJointConnector), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector_TO_Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.JointProjectionProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.JointProjectionProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.JointLinearProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.JointLinearProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.JointDriveProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.JointLimitProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.JointAngularProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.JointAngularProperties), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Proxy.Entity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Proxy_Entity_TO_Microsoft_Robotics_Simulation_Proxy_Entity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Entity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Proxy_Entity_TO_Microsoft_Robotics_Simulation_Proxy_Entity0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Proxy.EntityState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.EntityState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Proxy.RenderingAssets), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Proxy_RenderingAssets_TO_Microsoft_Robotics_Simulation_Proxy_RenderingAssets));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.RenderingAssets), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Proxy_RenderingAssets_TO_Microsoft_Robotics_Simulation_Proxy_RenderingAssets0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_SonarEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_SonarEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.SonarEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_SonarEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_SonarEntity0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCamBasedRaycastSensorEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_DepthCamBasedRaycastSensorEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_DepthCamBasedRaycastSensorEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_DepthCamBasedRaycastSensorEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_DepthCamBasedRaycastSensorEntity0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCameraEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_DepthCameraEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_DepthCameraEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.DepthCameraEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_DepthCameraEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_DepthCameraEntity0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_CameraEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_CameraEntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.CameraEntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_CameraEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_CameraEntity0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_IREntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_IREntity));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Simulation.Engine.IREntity), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Simulation_Engine_Proxy_IREntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_IREntity0));
        }
        
        private static global::Robotics.CustomSimulatedEntities.Proxy.CustomSimulatedEntitiesState _cachedInstance0 = new global::Robotics.CustomSimulatedEntities.Proxy.CustomSimulatedEntitiesState();
        
        private static global::Robotics.CustomSimulatedEntities.CustomSimulatedEntitiesState _cachedInstance = new global::Robotics.CustomSimulatedEntities.CustomSimulatedEntitiesState();
        
        public static object Robotics_CustomSimulatedEntities_Proxy_CustomSimulatedEntitiesState_TO_Robotics_CustomSimulatedEntities_CustomSimulatedEntitiesState(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object Robotics_CustomSimulatedEntities_CustomSimulatedEntitiesState_TO_Robotics_CustomSimulatedEntities_Proxy_CustomSimulatedEntitiesState(object transformFrom) {
            return _cachedInstance0;
        }
        
        public static object Robotics_CustomSimulatedEntities_Proxy_SimulatedLRFEntity_TO_Robotics_CustomSimulatedEntities_SimulatedLRFEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.SimulatedLRFEntity target = new global::Robotics.CustomSimulatedEntities.SimulatedLRFEntity();
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedLRFEntity from = ((global::Robotics.CustomSimulatedEntities.Proxy.SimulatedLRFEntity)(transformFrom));
            if ((from.LaserBox != null)) {
                target.LaserBox = ((global::Microsoft.Robotics.Simulation.Physics.BoxShape)(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape(from.LaserBox)));
            }
            else {
                target.LaserBox = null;
            }
            target.ImpactPointEffect = from.ImpactPointEffect;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_SimulatedLRFEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedLRFEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedLRFEntity target = new global::Robotics.CustomSimulatedEntities.Proxy.SimulatedLRFEntity();
            global::Robotics.CustomSimulatedEntities.SimulatedLRFEntity from = ((global::Robotics.CustomSimulatedEntities.SimulatedLRFEntity)(transformFrom));
            global::Microsoft.Robotics.Simulation.Physics.BoxShape tmp = from.LaserBox;
            if ((tmp != null)) {
                target.LaserBox = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape)(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape0(tmp)));
            }
            target.ImpactPointEffect = from.ImpactPointEffect;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp0 = from.ParentJoint;
            if ((tmp0 != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp0)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp1 = from.EmbeddedResourceAssemblies;
            if ((tmp1 != null)) {
                int count = tmp1.Count;
                global::System.Collections.Generic.List<string> tmp2 = new global::System.Collections.Generic.List<string>(count);
                tmp2.AddRange(tmp1);
                target.EmbeddedResourceAssemblies = tmp2;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp5 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp5)));
            global::Microsoft.Robotics.Simulation.EntityState tmp6 = from.State;
            if ((tmp6 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp6)));
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_Proxy_SimulatedSonarEntity_TO_Robotics_CustomSimulatedEntities_SimulatedSonarEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.SimulatedSonarEntity target = new global::Robotics.CustomSimulatedEntities.SimulatedSonarEntity();
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedSonarEntity from = ((global::Robotics.CustomSimulatedEntities.Proxy.SimulatedSonarEntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_SimulatedSonarEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedSonarEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedSonarEntity target = new global::Robotics.CustomSimulatedEntities.Proxy.SimulatedSonarEntity();
            global::Robotics.CustomSimulatedEntities.SimulatedSonarEntity from = ((global::Robotics.CustomSimulatedEntities.SimulatedSonarEntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_Proxy_SimulatedIREntity_TO_Robotics_CustomSimulatedEntities_SimulatedIREntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.SimulatedIREntity target = new global::Robotics.CustomSimulatedEntities.SimulatedIREntity();
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedIREntity from = ((global::Robotics.CustomSimulatedEntities.Proxy.SimulatedIREntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_SimulatedIREntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedIREntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedIREntity target = new global::Robotics.CustomSimulatedEntities.Proxy.SimulatedIREntity();
            global::Robotics.CustomSimulatedEntities.SimulatedIREntity from = ((global::Robotics.CustomSimulatedEntities.SimulatedIREntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_Proxy_SimulatedColorSensorEntity_TO_Robotics_CustomSimulatedEntities_SimulatedColorSensorEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.SimulatedColorSensorEntity target = new global::Robotics.CustomSimulatedEntities.SimulatedColorSensorEntity();
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedColorSensorEntity from = ((global::Robotics.CustomSimulatedEntities.Proxy.SimulatedColorSensorEntity)(transformFrom));
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_SimulatedColorSensorEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedColorSensorEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedColorSensorEntity target = new global::Robotics.CustomSimulatedEntities.Proxy.SimulatedColorSensorEntity();
            global::Robotics.CustomSimulatedEntities.SimulatedColorSensorEntity from = ((global::Robotics.CustomSimulatedEntities.SimulatedColorSensorEntity)(transformFrom));
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_Proxy_SimulatedBrightnessSensorEntity_TO_Robotics_CustomSimulatedEntities_SimulatedBrightnessSensorEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.SimulatedBrightnessSensorEntity target = new global::Robotics.CustomSimulatedEntities.SimulatedBrightnessSensorEntity();
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedBrightnessSensorEntity from = ((global::Robotics.CustomSimulatedEntities.Proxy.SimulatedBrightnessSensorEntity)(transformFrom));
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_SimulatedBrightnessSensorEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedBrightnessSensorEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedBrightnessSensorEntity target = new global::Robotics.CustomSimulatedEntities.Proxy.SimulatedBrightnessSensorEntity();
            global::Robotics.CustomSimulatedEntities.SimulatedBrightnessSensorEntity from = ((global::Robotics.CustomSimulatedEntities.SimulatedBrightnessSensorEntity)(transformFrom));
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_Proxy_SimulatedCompassEntity_TO_Robotics_CustomSimulatedEntities_SimulatedCompassEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.SimulatedCompassEntity target = new global::Robotics.CustomSimulatedEntities.SimulatedCompassEntity();
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedCompassEntity from = ((global::Robotics.CustomSimulatedEntities.Proxy.SimulatedCompassEntity)(transformFrom));
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_SimulatedCompassEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedCompassEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedCompassEntity target = new global::Robotics.CustomSimulatedEntities.Proxy.SimulatedCompassEntity();
            global::Robotics.CustomSimulatedEntities.SimulatedCompassEntity from = ((global::Robotics.CustomSimulatedEntities.SimulatedCompassEntity)(transformFrom));
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_Proxy_SimulatedGPSEntity_TO_Robotics_CustomSimulatedEntities_SimulatedGPSEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.SimulatedGPSEntity target = new global::Robotics.CustomSimulatedEntities.SimulatedGPSEntity();
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedGPSEntity from = ((global::Robotics.CustomSimulatedEntities.Proxy.SimulatedGPSEntity)(transformFrom));
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Robotics_CustomSimulatedEntities_SimulatedGPSEntity_TO_Robotics_CustomSimulatedEntities_Proxy_SimulatedGPSEntity(object transformFrom) {
            global::Robotics.CustomSimulatedEntities.Proxy.SimulatedGPSEntity target = new global::Robotics.CustomSimulatedEntities.Proxy.SimulatedGPSEntity();
            global::Robotics.CustomSimulatedEntities.SimulatedGPSEntity from = ((global::Robotics.CustomSimulatedEntities.SimulatedGPSEntity)(transformFrom));
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_LaserRangeFinderEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_LaserRangeFinderEntity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity target = new global::Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity();
            global::Microsoft.Robotics.Simulation.Engine.Proxy.LaserRangeFinderEntity from = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.LaserRangeFinderEntity)(transformFrom));
            if ((from.LaserBox != null)) {
                target.LaserBox = ((global::Microsoft.Robotics.Simulation.Physics.BoxShape)(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape(from.LaserBox)));
            }
            else {
                target.LaserBox = null;
            }
            target.ImpactPointEffect = from.ImpactPointEffect;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_LaserRangeFinderEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_LaserRangeFinderEntity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.Proxy.LaserRangeFinderEntity target = new global::Microsoft.Robotics.Simulation.Engine.Proxy.LaserRangeFinderEntity();
            global::Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity from = ((global::Microsoft.Robotics.Simulation.Engine.LaserRangeFinderEntity)(transformFrom));
            global::Microsoft.Robotics.Simulation.Physics.BoxShape tmp = from.LaserBox;
            if ((tmp != null)) {
                target.LaserBox = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape)(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape0(tmp)));
            }
            target.ImpactPointEffect = from.ImpactPointEffect;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp0 = from.ParentJoint;
            if ((tmp0 != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp0)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp1 = from.EmbeddedResourceAssemblies;
            if ((tmp1 != null)) {
                int count = tmp1.Count;
                global::System.Collections.Generic.List<string> tmp2 = new global::System.Collections.Generic.List<string>(count);
                tmp2.AddRange(tmp1);
                target.EmbeddedResourceAssemblies = tmp2;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp5 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp5)));
            global::Microsoft.Robotics.Simulation.EntityState tmp6 = from.State;
            if ((tmp6 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp6)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.BoxShape target = new global::Microsoft.Robotics.Simulation.Physics.BoxShape();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape)(transformFrom));
            if ((from.BoxState != null)) {
                target.BoxState = ((global::Microsoft.Robotics.Simulation.Physics.BoxShapeProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties(from.BoxState)));
            }
            else {
                target.BoxState = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShape0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape();
            global::Microsoft.Robotics.Simulation.Physics.BoxShape from = ((global::Microsoft.Robotics.Simulation.Physics.BoxShape)(transformFrom));
            global::Microsoft.Robotics.Simulation.Physics.BoxShapeProperties tmp = from.BoxState;
            if ((tmp != null)) {
                target.BoxState = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShapeProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties0(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.BoxShapeProperties target = new global::Microsoft.Robotics.Simulation.Physics.BoxShapeProperties();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShapeProperties from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShapeProperties)(transformFrom));
            target.Name = from.Name;
            target.ShapeId = ((global::Microsoft.Robotics.Simulation.Physics.Shapes)(((int)(from.ShapeId))));
            target.Dimensions = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.Dimensions)));
            target.Radius = from.Radius;
            if ((from.Material != null)) {
                target.Material = ((global::Microsoft.Robotics.Simulation.Physics.MaterialProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties(from.Material)));
            }
            else {
                target.Material = null;
            }
            if ((from.MassDensity != null)) {
                target.MassDensity = ((global::Microsoft.Robotics.Simulation.Physics.MassDensity)(Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity(from.MassDensity)));
            }
            else {
                target.MassDensity = null;
            }
            if ((from.Advanced != null)) {
                target.Advanced = ((global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties(from.Advanced)));
            }
            else {
                target.Advanced = null;
            }
            target.LocalPose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.LocalPose)));
            target.TextureFileName = from.TextureFileName;
            target.DiffuseColor = ((global::Microsoft.Robotics.PhysicalModel.Vector4)(Microsoft_Robotics_PhysicalModel_Proxy_Vector4_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector4(from.DiffuseColor)));
            target.EnableContactNotifications = from.EnableContactNotifications;
            if ((from.ContactFilter != null)) {
                target.ContactFilter = ((global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter)(Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter(from.ContactFilter)));
            }
            else {
                target.ContactFilter = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_BoxShapeProperties0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShapeProperties target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShapeProperties();
            global::Microsoft.Robotics.Simulation.Physics.BoxShapeProperties from = ((global::Microsoft.Robotics.Simulation.Physics.BoxShapeProperties)(transformFrom));
            target.Name = from.Name;
            target.ShapeId = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.Shapes)(((int)(from.ShapeId))));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.Dimensions;
            target.Dimensions = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            target.Radius = from.Radius;
            global::Microsoft.Robotics.Simulation.Physics.MaterialProperties tmp0 = from.Material;
            if ((tmp0 != null)) {
                target.Material = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties0(tmp0)));
            }
            global::Microsoft.Robotics.Simulation.Physics.MassDensity tmp1 = from.MassDensity;
            if ((tmp1 != null)) {
                target.MassDensity = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MassDensity)(Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity0(tmp1)));
            }
            global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties tmp2 = from.Advanced;
            if ((tmp2 != null)) {
                target.Advanced = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeAdvancedProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties0(tmp2)));
            }
            global::Microsoft.Robotics.PhysicalModel.Pose tmp3 = from.LocalPose;
            target.LocalPose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp3)));
            target.TextureFileName = from.TextureFileName;
            global::Microsoft.Robotics.PhysicalModel.Vector4 tmp4 = from.DiffuseColor;
            target.DiffuseColor = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4)(Microsoft_Robotics_PhysicalModel_Proxy_Vector4_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector40(tmp4)));
            target.EnableContactNotifications = from.EnableContactNotifications;
            global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter tmp5 = from.ContactFilter;
            if ((tmp5 != null)) {
                target.ContactFilter = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.ContactNotificationFilter)(Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_ShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeProperties(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.ShapeProperties target = new global::Microsoft.Robotics.Simulation.Physics.ShapeProperties();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeProperties from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeProperties)(transformFrom));
            target.Name = from.Name;
            target.ShapeId = ((global::Microsoft.Robotics.Simulation.Physics.Shapes)(((int)(from.ShapeId))));
            target.Dimensions = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.Dimensions)));
            target.Radius = from.Radius;
            if ((from.Material != null)) {
                target.Material = ((global::Microsoft.Robotics.Simulation.Physics.MaterialProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties(from.Material)));
            }
            else {
                target.Material = null;
            }
            if ((from.MassDensity != null)) {
                target.MassDensity = ((global::Microsoft.Robotics.Simulation.Physics.MassDensity)(Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity(from.MassDensity)));
            }
            else {
                target.MassDensity = null;
            }
            if ((from.Advanced != null)) {
                target.Advanced = ((global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties(from.Advanced)));
            }
            else {
                target.Advanced = null;
            }
            target.LocalPose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.LocalPose)));
            target.TextureFileName = from.TextureFileName;
            target.DiffuseColor = ((global::Microsoft.Robotics.PhysicalModel.Vector4)(Microsoft_Robotics_PhysicalModel_Proxy_Vector4_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector4(from.DiffuseColor)));
            target.EnableContactNotifications = from.EnableContactNotifications;
            if ((from.ContactFilter != null)) {
                target.ContactFilter = ((global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter)(Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter(from.ContactFilter)));
            }
            else {
                target.ContactFilter = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_ShapeProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeProperties0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeProperties target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeProperties();
            global::Microsoft.Robotics.Simulation.Physics.ShapeProperties from = ((global::Microsoft.Robotics.Simulation.Physics.ShapeProperties)(transformFrom));
            target.Name = from.Name;
            target.ShapeId = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.Shapes)(((int)(from.ShapeId))));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.Dimensions;
            target.Dimensions = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            target.Radius = from.Radius;
            global::Microsoft.Robotics.Simulation.Physics.MaterialProperties tmp0 = from.Material;
            if ((tmp0 != null)) {
                target.Material = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties0(tmp0)));
            }
            global::Microsoft.Robotics.Simulation.Physics.MassDensity tmp1 = from.MassDensity;
            if ((tmp1 != null)) {
                target.MassDensity = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MassDensity)(Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity0(tmp1)));
            }
            global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties tmp2 = from.Advanced;
            if ((tmp2 != null)) {
                target.Advanced = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeAdvancedProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties0(tmp2)));
            }
            global::Microsoft.Robotics.PhysicalModel.Pose tmp3 = from.LocalPose;
            target.LocalPose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp3)));
            target.TextureFileName = from.TextureFileName;
            global::Microsoft.Robotics.PhysicalModel.Vector4 tmp4 = from.DiffuseColor;
            target.DiffuseColor = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4)(Microsoft_Robotics_PhysicalModel_Proxy_Vector4_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector40(tmp4)));
            target.EnableContactNotifications = from.EnableContactNotifications;
            global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter tmp5 = from.ContactFilter;
            if ((tmp5 != null)) {
                target.ContactFilter = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.ContactNotificationFilter)(Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Vector3 target = new global::Microsoft.Robotics.PhysicalModel.Vector3();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3();
            global::Microsoft.Robotics.PhysicalModel.Vector3 from = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.MaterialProperties target = new global::Microsoft.Robotics.Simulation.Physics.MaterialProperties();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialProperties from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialProperties)(transformFrom));
            target.Name = from.Name;
            target.Restitution = from.Restitution;
            target.DynamicFriction = from.DynamicFriction;
            target.StaticFriction = from.StaticFriction;
            target.MaterialIndex = from.MaterialIndex;
            if ((from.Advanced != null)) {
                target.Advanced = ((global::Microsoft.Robotics.Simulation.Physics.MaterialAdvancedProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties(from.Advanced)));
            }
            else {
                target.Advanced = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialProperties0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialProperties target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialProperties();
            global::Microsoft.Robotics.Simulation.Physics.MaterialProperties from = ((global::Microsoft.Robotics.Simulation.Physics.MaterialProperties)(transformFrom));
            target.Name = from.Name;
            target.Restitution = from.Restitution;
            target.DynamicFriction = from.DynamicFriction;
            target.StaticFriction = from.StaticFriction;
            target.MaterialIndex = from.MaterialIndex;
            global::Microsoft.Robotics.Simulation.Physics.MaterialAdvancedProperties tmp = from.Advanced;
            if ((tmp != null)) {
                target.Advanced = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialAdvancedProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties0(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.MaterialAdvancedProperties target = new global::Microsoft.Robotics.Simulation.Physics.MaterialAdvancedProperties();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialAdvancedProperties from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialAdvancedProperties)(transformFrom));
            target.AnisotropicStaticFriction = from.AnisotropicStaticFriction;
            target.AnisotropicDynamicFriction = from.AnisotropicDynamicFriction;
            target.AnisotropyDirection = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.AnisotropyDirection)));
            if ((from.Spring != null)) {
                target.Spring = ((global::Microsoft.Robotics.PhysicalModel.SpringProperties)(Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties(from.Spring)));
            }
            else {
                target.Spring = null;
            }
            target.RestitutionCombineMode = ((global::Microsoft.Robotics.Simulation.Physics.CoefficientsCombineMode)(((int)(from.RestitutionCombineMode))));
            target.FrictionCombineMode = ((global::Microsoft.Robotics.Simulation.Physics.CoefficientsCombineMode)(((int)(from.FrictionCombineMode))));
            if ((from.Optical != null)) {
                int count = from.Optical.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties tmp0 = default(global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties);
                    if ((from.Optical[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties(from.Optical[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.Optical = tmp;
            }
            else {
                target.Optical = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialAdvancedProperties0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialAdvancedProperties target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialAdvancedProperties();
            global::Microsoft.Robotics.Simulation.Physics.MaterialAdvancedProperties from = ((global::Microsoft.Robotics.Simulation.Physics.MaterialAdvancedProperties)(transformFrom));
            target.AnisotropicStaticFriction = from.AnisotropicStaticFriction;
            target.AnisotropicDynamicFriction = from.AnisotropicDynamicFriction;
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.AnisotropyDirection;
            target.AnisotropyDirection = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            global::Microsoft.Robotics.PhysicalModel.SpringProperties tmp0 = from.Spring;
            if ((tmp0 != null)) {
                target.Spring = ((global::Microsoft.Robotics.PhysicalModel.Proxy.SpringProperties)(Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties0(tmp0)));
            }
            target.RestitutionCombineMode = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.CoefficientsCombineMode)(((int)(from.RestitutionCombineMode))));
            target.FrictionCombineMode = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.CoefficientsCombineMode)(((int)(from.FrictionCombineMode))));
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties> tmp1 = from.Optical;
            if ((tmp1 != null)) {
                int count = tmp1.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties> tmp2 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties tmp3 = default(global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties);
                    global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties tmp4 = tmp1[index];
                    if ((tmp4 != null)) {
                        tmp3 = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties)(Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties0(tmp4)));
                    }
                    tmp2.Add(tmp3);
                }
                target.Optical = tmp2;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.SpringProperties target = new global::Microsoft.Robotics.PhysicalModel.SpringProperties();
            global::Microsoft.Robotics.PhysicalModel.Proxy.SpringProperties from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.SpringProperties)(transformFrom));
            target.SpringCoefficient = from.SpringCoefficient;
            target.DamperCoefficient = from.DamperCoefficient;
            target.EquilibriumPosition = from.EquilibriumPosition;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.SpringProperties target = new global::Microsoft.Robotics.PhysicalModel.Proxy.SpringProperties();
            global::Microsoft.Robotics.PhysicalModel.SpringProperties from = ((global::Microsoft.Robotics.PhysicalModel.SpringProperties)(transformFrom));
            target.SpringCoefficient = from.SpringCoefficient;
            target.DamperCoefficient = from.DamperCoefficient;
            target.EquilibriumPosition = from.EquilibriumPosition;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties target = new global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties)(transformFrom));
            target.WaveLength = from.WaveLength;
            target.DiffuseReflectance = from.DiffuseReflectance;
            target.SpecularReflectance = from.SpecularReflectance;
            target.Transmittance = from.Transmittance;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MaterialOpticalProperties0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.MaterialOpticalProperties();
            global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties from = ((global::Microsoft.Robotics.Simulation.Physics.MaterialOpticalProperties)(transformFrom));
            target.WaveLength = from.WaveLength;
            target.DiffuseReflectance = from.DiffuseReflectance;
            target.SpecularReflectance = from.SpecularReflectance;
            target.Transmittance = from.Transmittance;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.MassDensity target = new global::Microsoft.Robotics.Simulation.Physics.MassDensity();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.MassDensity from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MassDensity)(transformFrom));
            target.Mass = from.Mass;
            target.InertiaTensor = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.InertiaTensor)));
            target.CenterOfMass = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.CenterOfMass)));
            target.Density = from.Density;
            target.LinearDamping = from.LinearDamping;
            target.AngularDamping = from.AngularDamping;
            target.MassLocalPose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.MassLocalPose)));
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.MassDensity target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.MassDensity();
            global::Microsoft.Robotics.Simulation.Physics.MassDensity from = ((global::Microsoft.Robotics.Simulation.Physics.MassDensity)(transformFrom));
            target.Mass = from.Mass;
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.InertiaTensor;
            target.InertiaTensor = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            global::Microsoft.Robotics.PhysicalModel.Pose tmp0 = from.CenterOfMass;
            target.CenterOfMass = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp0)));
            target.Density = from.Density;
            target.LinearDamping = from.LinearDamping;
            target.AngularDamping = from.AngularDamping;
            global::Microsoft.Robotics.PhysicalModel.Pose tmp1 = from.MassLocalPose;
            target.MassLocalPose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp1)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Pose target = new global::Microsoft.Robotics.PhysicalModel.Pose();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Pose from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(transformFrom));
            target.Position = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.Position)));
            target.Orientation = ((global::Microsoft.Robotics.PhysicalModel.Quaternion)(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion(from.Orientation)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Pose target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Pose();
            global::Microsoft.Robotics.PhysicalModel.Pose from = ((global::Microsoft.Robotics.PhysicalModel.Pose)(transformFrom));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.Position;
            target.Position = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            global::Microsoft.Robotics.PhysicalModel.Quaternion tmp0 = from.Orientation;
            target.Orientation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion)(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0(tmp0)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Quaternion target = new global::Microsoft.Robotics.PhysicalModel.Quaternion();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.W = from.W;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion();
            global::Microsoft.Robotics.PhysicalModel.Quaternion from = ((global::Microsoft.Robotics.PhysicalModel.Quaternion)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.W = from.W;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties target = new global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeAdvancedProperties from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeAdvancedProperties)(transformFrom));
            target.MassSpaceIntertiaTensor = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MassSpaceIntertiaTensor)));
            target.LinearDamping = from.LinearDamping;
            target.AngularDamping = from.AngularDamping;
            target.PhysicsCalculationPasses = from.PhysicsCalculationPasses;
            target.IsTrigger = from.IsTrigger;
            target.SkinWidth = from.SkinWidth;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ShapeAdvancedProperties0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeAdvancedProperties target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.ShapeAdvancedProperties();
            global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties from = ((global::Microsoft.Robotics.Simulation.Physics.ShapeAdvancedProperties)(transformFrom));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.MassSpaceIntertiaTensor;
            target.MassSpaceIntertiaTensor = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            target.LinearDamping = from.LinearDamping;
            target.AngularDamping = from.AngularDamping;
            target.PhysicsCalculationPasses = from.PhysicsCalculationPasses;
            target.IsTrigger = from.IsTrigger;
            target.SkinWidth = from.SkinWidth;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector4_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector4(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Vector4 target = new global::Microsoft.Robotics.PhysicalModel.Vector4();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4 from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.W = from.W;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector4_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector40(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4 target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Vector4();
            global::Microsoft.Robotics.PhysicalModel.Vector4 from = ((global::Microsoft.Robotics.PhysicalModel.Vector4)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.W = from.W;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter target = new global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter();
            global::Microsoft.Robotics.Simulation.Physics.Proxy.ContactNotificationFilter from = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.ContactNotificationFilter)(transformFrom));
            target.Stages = ((global::Microsoft.Robotics.Simulation.Physics.ContactNotificationStage)(((int)(from.Stages))));
            target.NormalForceThreshold = from.NormalForceThreshold;
            target.FrictionForceThreshold = from.FrictionForceThreshold;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter_TO_Microsoft_Robotics_Simulation_Physics_Proxy_ContactNotificationFilter0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Physics.Proxy.ContactNotificationFilter target = new global::Microsoft.Robotics.Simulation.Physics.Proxy.ContactNotificationFilter();
            global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter from = ((global::Microsoft.Robotics.Simulation.Physics.ContactNotificationFilter)(transformFrom));
            target.Stages = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.ContactNotificationStage)(((int)(from.Stages))));
            target.NormalForceThreshold = from.NormalForceThreshold;
            target.FrictionForceThreshold = from.FrictionForceThreshold;
            return target;
        }
        
        private static global::Microsoft.Robotics.Simulation.Physics.Proxy.Shape _cachedInstance2 = new global::Microsoft.Robotics.Simulation.Physics.Proxy.Shape();
        
        private static global::Microsoft.Robotics.Simulation.Physics.Shape _cachedInstance1 = new global::Microsoft.Robotics.Simulation.Physics.Shape();
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_Shape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_Shape(object transformFrom) {
            return _cachedInstance1;
        }
        
        public static object Microsoft_Robotics_Simulation_Physics_Proxy_Shape_TO_Microsoft_Robotics_Simulation_Physics_Proxy_Shape0(object transformFrom) {
            return _cachedInstance2;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_VisualEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_VisualEntity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.VisualEntity target = new global::Microsoft.Robotics.Simulation.Engine.VisualEntity();
            global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity from = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity)(transformFrom));
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_VisualEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_VisualEntity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity target = new global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity();
            global::Microsoft.Robotics.Simulation.Engine.VisualEntity from = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity)(transformFrom));
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Joint target = new global::Microsoft.Robotics.PhysicalModel.Joint();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Joint from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(transformFrom));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.PhysicalModel.JointProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProperties(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Joint target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Joint();
            global::Microsoft.Robotics.PhysicalModel.Joint from = ((global::Microsoft.Robotics.PhysicalModel.Joint)(transformFrom));
            global::Microsoft.Robotics.PhysicalModel.JointProperties tmp = from.State;
            if ((tmp != null)) {
                target.State = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProperties0(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProperties(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.JointProperties target = new global::Microsoft.Robotics.PhysicalModel.JointProperties();
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointProperties from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointProperties)(transformFrom));
            target.Name = from.Name;
            if ((from.Connectors != null)) {
                int count = from.Connectors.Length;
                global::Microsoft.Robotics.PhysicalModel.EntityJointConnector[] tmp = new global::Microsoft.Robotics.PhysicalModel.EntityJointConnector[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.PhysicalModel.EntityJointConnector tmp0 = default(global::Microsoft.Robotics.PhysicalModel.EntityJointConnector);
                    if ((from.Connectors[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.PhysicalModel.EntityJointConnector)(Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector_TO_Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector(from.Connectors[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp[index] = tmp0;
                }
                target.Connectors = tmp;
            }
            else {
                target.Connectors = null;
            }
            target.MaximumForce = from.MaximumForce;
            target.MaximumTorque = from.MaximumTorque;
            target.EnableCollisions = from.EnableCollisions;
            if ((from.Projection != null)) {
                target.Projection = ((global::Microsoft.Robotics.PhysicalModel.JointProjectionProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties(from.Projection)));
            }
            else {
                target.Projection = null;
            }
            if ((from.Linear != null)) {
                target.Linear = ((global::Microsoft.Robotics.PhysicalModel.JointLinearProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties(from.Linear)));
            }
            else {
                target.Linear = null;
            }
            if ((from.Angular != null)) {
                target.Angular = ((global::Microsoft.Robotics.PhysicalModel.JointAngularProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties(from.Angular)));
            }
            else {
                target.Angular = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProperties0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointProperties target = new global::Microsoft.Robotics.PhysicalModel.Proxy.JointProperties();
            global::Microsoft.Robotics.PhysicalModel.JointProperties from = ((global::Microsoft.Robotics.PhysicalModel.JointProperties)(transformFrom));
            target.Name = from.Name;
            Microsoft.Robotics.PhysicalModel.EntityJointConnector[] tmp = from.Connectors;
            if ((tmp != null)) {
                int count = tmp.Length;
                global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector[] tmp0 = new global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector[count];
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector tmp1 = default(global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector);
                    global::Microsoft.Robotics.PhysicalModel.EntityJointConnector tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector)(Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector_TO_Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector0(tmp2)));
                    }
                    tmp0[index] = tmp1;
                }
                target.Connectors = tmp0;
            }
            target.MaximumForce = from.MaximumForce;
            target.MaximumTorque = from.MaximumTorque;
            target.EnableCollisions = from.EnableCollisions;
            global::Microsoft.Robotics.PhysicalModel.JointProjectionProperties tmp3 = from.Projection;
            if ((tmp3 != null)) {
                target.Projection = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointProjectionProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties0(tmp3)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointLinearProperties tmp4 = from.Linear;
            if ((tmp4 != null)) {
                target.Linear = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointLinearProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties0(tmp4)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointAngularProperties tmp5 = from.Angular;
            if ((tmp5 != null)) {
                target.Angular = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointAngularProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector_TO_Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.EntityJointConnector target = new global::Microsoft.Robotics.PhysicalModel.EntityJointConnector();
            global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector)(transformFrom));
            target.EntityName = from.EntityName;
            target.JointNormal = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.JointNormal)));
            target.JointAxis = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.JointAxis)));
            target.JointConnectPoint = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.JointConnectPoint)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector_TO_Microsoft_Robotics_PhysicalModel_Proxy_EntityJointConnector0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector target = new global::Microsoft.Robotics.PhysicalModel.Proxy.EntityJointConnector();
            global::Microsoft.Robotics.PhysicalModel.EntityJointConnector from = ((global::Microsoft.Robotics.PhysicalModel.EntityJointConnector)(transformFrom));
            target.EntityName = from.EntityName;
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.JointNormal;
            target.JointNormal = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp0 = from.JointAxis;
            target.JointAxis = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp0)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp1 = from.JointConnectPoint;
            target.JointConnectPoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp1)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.JointProjectionProperties target = new global::Microsoft.Robotics.PhysicalModel.JointProjectionProperties();
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointProjectionProperties from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointProjectionProperties)(transformFrom));
            target.ProjectionMode = ((global::Microsoft.Robotics.PhysicalModel.JointProjectionMode)(((int)(from.ProjectionMode))));
            target.ProjectionDistanceThreshold = from.ProjectionDistanceThreshold;
            target.ProjectionAngleThreshold = from.ProjectionAngleThreshold;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointProjectionProperties0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointProjectionProperties target = new global::Microsoft.Robotics.PhysicalModel.Proxy.JointProjectionProperties();
            global::Microsoft.Robotics.PhysicalModel.JointProjectionProperties from = ((global::Microsoft.Robotics.PhysicalModel.JointProjectionProperties)(transformFrom));
            target.ProjectionMode = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointProjectionMode)(((int)(from.ProjectionMode))));
            target.ProjectionDistanceThreshold = from.ProjectionDistanceThreshold;
            target.ProjectionAngleThreshold = from.ProjectionAngleThreshold;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.JointLinearProperties target = new global::Microsoft.Robotics.PhysicalModel.JointLinearProperties();
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointLinearProperties from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointLinearProperties)(transformFrom));
            target.XMotionMode = ((global::Microsoft.Robotics.PhysicalModel.JointDOFMode)(((int)(from.XMotionMode))));
            target.YMotionMode = ((global::Microsoft.Robotics.PhysicalModel.JointDOFMode)(((int)(from.YMotionMode))));
            target.ZMotionMode = ((global::Microsoft.Robotics.PhysicalModel.JointDOFMode)(((int)(from.ZMotionMode))));
            if ((from.XDrive != null)) {
                target.XDrive = ((global::Microsoft.Robotics.PhysicalModel.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties(from.XDrive)));
            }
            else {
                target.XDrive = null;
            }
            if ((from.YDrive != null)) {
                target.YDrive = ((global::Microsoft.Robotics.PhysicalModel.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties(from.YDrive)));
            }
            else {
                target.YDrive = null;
            }
            if ((from.ZDrive != null)) {
                target.ZDrive = ((global::Microsoft.Robotics.PhysicalModel.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties(from.ZDrive)));
            }
            else {
                target.ZDrive = null;
            }
            if ((from.MotionLimit != null)) {
                target.MotionLimit = ((global::Microsoft.Robotics.PhysicalModel.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties(from.MotionLimit)));
            }
            else {
                target.MotionLimit = null;
            }
            target.DriveTargetPosition = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.DriveTargetPosition)));
            target.DriveTargetVelocity = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.DriveTargetVelocity)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLinearProperties0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointLinearProperties target = new global::Microsoft.Robotics.PhysicalModel.Proxy.JointLinearProperties();
            global::Microsoft.Robotics.PhysicalModel.JointLinearProperties from = ((global::Microsoft.Robotics.PhysicalModel.JointLinearProperties)(transformFrom));
            target.XMotionMode = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDOFMode)(((int)(from.XMotionMode))));
            target.YMotionMode = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDOFMode)(((int)(from.YMotionMode))));
            target.ZMotionMode = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDOFMode)(((int)(from.ZMotionMode))));
            global::Microsoft.Robotics.PhysicalModel.JointDriveProperties tmp = from.XDrive;
            if ((tmp != null)) {
                target.XDrive = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties0(tmp)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointDriveProperties tmp0 = from.YDrive;
            if ((tmp0 != null)) {
                target.YDrive = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties0(tmp0)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointDriveProperties tmp1 = from.ZDrive;
            if ((tmp1 != null)) {
                target.ZDrive = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties0(tmp1)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointLimitProperties tmp2 = from.MotionLimit;
            if ((tmp2 != null)) {
                target.MotionLimit = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties0(tmp2)));
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.DriveTargetPosition;
            target.DriveTargetPosition = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.DriveTargetVelocity;
            target.DriveTargetVelocity = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.JointDriveProperties target = new global::Microsoft.Robotics.PhysicalModel.JointDriveProperties();
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties)(transformFrom));
            target.Mode = ((global::Microsoft.Robotics.PhysicalModel.JointDriveMode)(((int)(from.Mode))));
            if ((from.Spring != null)) {
                target.Spring = ((global::Microsoft.Robotics.PhysicalModel.SpringProperties)(Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties(from.Spring)));
            }
            else {
                target.Spring = null;
            }
            target.ForceLimit = from.ForceLimit;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties target = new global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties();
            global::Microsoft.Robotics.PhysicalModel.JointDriveProperties from = ((global::Microsoft.Robotics.PhysicalModel.JointDriveProperties)(transformFrom));
            target.Mode = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveMode)(((int)(from.Mode))));
            global::Microsoft.Robotics.PhysicalModel.SpringProperties tmp = from.Spring;
            if ((tmp != null)) {
                target.Spring = ((global::Microsoft.Robotics.PhysicalModel.Proxy.SpringProperties)(Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties0(tmp)));
            }
            target.ForceLimit = from.ForceLimit;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.JointLimitProperties target = new global::Microsoft.Robotics.PhysicalModel.JointLimitProperties();
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties)(transformFrom));
            target.LimitThreshold = from.LimitThreshold;
            target.Restitution = from.Restitution;
            if ((from.Spring != null)) {
                target.Spring = ((global::Microsoft.Robotics.PhysicalModel.SpringProperties)(Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties(from.Spring)));
            }
            else {
                target.Spring = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties target = new global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties();
            global::Microsoft.Robotics.PhysicalModel.JointLimitProperties from = ((global::Microsoft.Robotics.PhysicalModel.JointLimitProperties)(transformFrom));
            target.LimitThreshold = from.LimitThreshold;
            target.Restitution = from.Restitution;
            global::Microsoft.Robotics.PhysicalModel.SpringProperties tmp = from.Spring;
            if ((tmp != null)) {
                target.Spring = ((global::Microsoft.Robotics.PhysicalModel.Proxy.SpringProperties)(Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_SpringProperties0(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.JointAngularProperties target = new global::Microsoft.Robotics.PhysicalModel.JointAngularProperties();
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointAngularProperties from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointAngularProperties)(transformFrom));
            target.Swing1Mode = ((global::Microsoft.Robotics.PhysicalModel.JointDOFMode)(((int)(from.Swing1Mode))));
            target.Swing2Mode = ((global::Microsoft.Robotics.PhysicalModel.JointDOFMode)(((int)(from.Swing2Mode))));
            target.TwistMode = ((global::Microsoft.Robotics.PhysicalModel.JointDOFMode)(((int)(from.TwistMode))));
            if ((from.Swing1Limit != null)) {
                target.Swing1Limit = ((global::Microsoft.Robotics.PhysicalModel.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties(from.Swing1Limit)));
            }
            else {
                target.Swing1Limit = null;
            }
            if ((from.Swing2Limit != null)) {
                target.Swing2Limit = ((global::Microsoft.Robotics.PhysicalModel.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties(from.Swing2Limit)));
            }
            else {
                target.Swing2Limit = null;
            }
            if ((from.UpperTwistLimit != null)) {
                target.UpperTwistLimit = ((global::Microsoft.Robotics.PhysicalModel.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties(from.UpperTwistLimit)));
            }
            else {
                target.UpperTwistLimit = null;
            }
            if ((from.LowerTwistLimit != null)) {
                target.LowerTwistLimit = ((global::Microsoft.Robotics.PhysicalModel.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties(from.LowerTwistLimit)));
            }
            else {
                target.LowerTwistLimit = null;
            }
            if ((from.SwingDrive != null)) {
                target.SwingDrive = ((global::Microsoft.Robotics.PhysicalModel.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties(from.SwingDrive)));
            }
            else {
                target.SwingDrive = null;
            }
            if ((from.TwistDrive != null)) {
                target.TwistDrive = ((global::Microsoft.Robotics.PhysicalModel.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties(from.TwistDrive)));
            }
            else {
                target.TwistDrive = null;
            }
            if ((from.SlerpDrive != null)) {
                target.SlerpDrive = ((global::Microsoft.Robotics.PhysicalModel.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties(from.SlerpDrive)));
            }
            else {
                target.SlerpDrive = null;
            }
            target.DriveTargetOrientation = ((global::Microsoft.Robotics.PhysicalModel.Quaternion)(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion(from.DriveTargetOrientation)));
            target.DriveTargetVelocity = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.DriveTargetVelocity)));
            target.GearRatio = from.GearRatio;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointAngularProperties0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.JointAngularProperties target = new global::Microsoft.Robotics.PhysicalModel.Proxy.JointAngularProperties();
            global::Microsoft.Robotics.PhysicalModel.JointAngularProperties from = ((global::Microsoft.Robotics.PhysicalModel.JointAngularProperties)(transformFrom));
            target.Swing1Mode = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDOFMode)(((int)(from.Swing1Mode))));
            target.Swing2Mode = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDOFMode)(((int)(from.Swing2Mode))));
            target.TwistMode = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDOFMode)(((int)(from.TwistMode))));
            global::Microsoft.Robotics.PhysicalModel.JointLimitProperties tmp = from.Swing1Limit;
            if ((tmp != null)) {
                target.Swing1Limit = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties0(tmp)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointLimitProperties tmp0 = from.Swing2Limit;
            if ((tmp0 != null)) {
                target.Swing2Limit = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties0(tmp0)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointLimitProperties tmp1 = from.UpperTwistLimit;
            if ((tmp1 != null)) {
                target.UpperTwistLimit = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties0(tmp1)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointLimitProperties tmp2 = from.LowerTwistLimit;
            if ((tmp2 != null)) {
                target.LowerTwistLimit = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointLimitProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointLimitProperties0(tmp2)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointDriveProperties tmp3 = from.SwingDrive;
            if ((tmp3 != null)) {
                target.SwingDrive = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties0(tmp3)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointDriveProperties tmp4 = from.TwistDrive;
            if ((tmp4 != null)) {
                target.TwistDrive = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties0(tmp4)));
            }
            global::Microsoft.Robotics.PhysicalModel.JointDriveProperties tmp5 = from.SlerpDrive;
            if ((tmp5 != null)) {
                target.SlerpDrive = ((global::Microsoft.Robotics.PhysicalModel.Proxy.JointDriveProperties)(Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties_TO_Microsoft_Robotics_PhysicalModel_Proxy_JointDriveProperties0(tmp5)));
            }
            global::Microsoft.Robotics.PhysicalModel.Quaternion tmp6 = from.DriveTargetOrientation;
            target.DriveTargetOrientation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion)(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0(tmp6)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp7 = from.DriveTargetVelocity;
            target.DriveTargetVelocity = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp7)));
            target.GearRatio = from.GearRatio;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Proxy_Entity_TO_Microsoft_Robotics_Simulation_Proxy_Entity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Entity target = new global::Microsoft.Robotics.Simulation.Entity();
            global::Microsoft.Robotics.Simulation.Proxy.Entity from = ((global::Microsoft.Robotics.Simulation.Proxy.Entity)(transformFrom));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Proxy_Entity_TO_Microsoft_Robotics_Simulation_Proxy_Entity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Proxy.Entity target = new global::Microsoft.Robotics.Simulation.Proxy.Entity();
            global::Microsoft.Robotics.Simulation.Entity from = ((global::Microsoft.Robotics.Simulation.Entity)(transformFrom));
            global::Microsoft.Robotics.Simulation.EntityState tmp = from.State;
            if ((tmp != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(object transformFrom) {
            global::Microsoft.Robotics.Simulation.EntityState target = new global::Microsoft.Robotics.Simulation.EntityState();
            global::Microsoft.Robotics.Simulation.Proxy.EntityState from = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(transformFrom));
            target.Name = from.Name;
            if ((from.Assets != null)) {
                target.Assets = ((global::Microsoft.Robotics.Simulation.RenderingAssets)(Microsoft_Robotics_Simulation_Proxy_RenderingAssets_TO_Microsoft_Robotics_Simulation_Proxy_RenderingAssets(from.Assets)));
            }
            else {
                target.Assets = null;
            }
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.Pose)));
            target.Velocity = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.Velocity)));
            target.AngularVelocity = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.AngularVelocity)));
            if ((from.MassDensity != null)) {
                target.MassDensity = ((global::Microsoft.Robotics.Simulation.Physics.MassDensity)(Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity(from.MassDensity)));
            }
            else {
                target.MassDensity = null;
            }
            target.Flags = ((global::Microsoft.Robotics.Simulation.Physics.EntitySimulationModifiers)(((int)(from.Flags))));
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Proxy.EntityState target = new global::Microsoft.Robotics.Simulation.Proxy.EntityState();
            global::Microsoft.Robotics.Simulation.EntityState from = ((global::Microsoft.Robotics.Simulation.EntityState)(transformFrom));
            target.Name = from.Name;
            global::Microsoft.Robotics.Simulation.RenderingAssets tmp = from.Assets;
            if ((tmp != null)) {
                target.Assets = ((global::Microsoft.Robotics.Simulation.Proxy.RenderingAssets)(Microsoft_Robotics_Simulation_Proxy_RenderingAssets_TO_Microsoft_Robotics_Simulation_Proxy_RenderingAssets0(tmp)));
            }
            global::Microsoft.Robotics.PhysicalModel.Pose tmp0 = from.Pose;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp0)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp1 = from.Velocity;
            target.Velocity = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp1)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.AngularVelocity;
            target.AngularVelocity = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.Simulation.Physics.MassDensity tmp3 = from.MassDensity;
            if ((tmp3 != null)) {
                target.MassDensity = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.MassDensity)(Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity_TO_Microsoft_Robotics_Simulation_Physics_Proxy_MassDensity0(tmp3)));
            }
            target.Flags = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.EntitySimulationModifiers)(((int)(from.Flags))));
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Proxy_RenderingAssets_TO_Microsoft_Robotics_Simulation_Proxy_RenderingAssets(object transformFrom) {
            global::Microsoft.Robotics.Simulation.RenderingAssets target = new global::Microsoft.Robotics.Simulation.RenderingAssets();
            global::Microsoft.Robotics.Simulation.Proxy.RenderingAssets from = ((global::Microsoft.Robotics.Simulation.Proxy.RenderingAssets)(transformFrom));
            target.Mesh = from.Mesh;
            target.DefaultTexture = from.DefaultTexture;
            target.Effect = from.Effect;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Proxy_RenderingAssets_TO_Microsoft_Robotics_Simulation_Proxy_RenderingAssets0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Proxy.RenderingAssets target = new global::Microsoft.Robotics.Simulation.Proxy.RenderingAssets();
            global::Microsoft.Robotics.Simulation.RenderingAssets from = ((global::Microsoft.Robotics.Simulation.RenderingAssets)(transformFrom));
            target.Mesh = from.Mesh;
            target.DefaultTexture = from.DefaultTexture;
            target.Effect = from.Effect;
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_SonarEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_SonarEntity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.SonarEntity target = new global::Microsoft.Robotics.Simulation.Engine.SonarEntity();
            global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity from = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_SonarEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_SonarEntity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity target = new global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity();
            global::Microsoft.Robotics.Simulation.Engine.SonarEntity from = ((global::Microsoft.Robotics.Simulation.Engine.SonarEntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_DepthCamBasedRaycastSensorEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_DepthCamBasedRaycastSensorEntity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity target = new global::Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity();
            global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCamBasedRaycastSensorEntity from = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCamBasedRaycastSensorEntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_DepthCamBasedRaycastSensorEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_DepthCamBasedRaycastSensorEntity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCamBasedRaycastSensorEntity target = new global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCamBasedRaycastSensorEntity();
            global::Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity from = ((global::Microsoft.Robotics.Simulation.Engine.DepthCamBasedRaycastSensorEntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_DepthCameraEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_DepthCameraEntity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.DepthCameraEntity target = new global::Microsoft.Robotics.Simulation.Engine.DepthCameraEntity();
            global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCameraEntity from = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCameraEntity)(transformFrom));
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_DepthCameraEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_DepthCameraEntity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCameraEntity target = new global::Microsoft.Robotics.Simulation.Engine.Proxy.DepthCameraEntity();
            global::Microsoft.Robotics.Simulation.Engine.DepthCameraEntity from = ((global::Microsoft.Robotics.Simulation.Engine.DepthCameraEntity)(transformFrom));
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_CameraEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_CameraEntity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.CameraEntity target = new global::Microsoft.Robotics.Simulation.Engine.CameraEntity();
            global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity from = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity)(transformFrom));
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_CameraEntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_CameraEntity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity target = new global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity();
            global::Microsoft.Robotics.Simulation.Engine.CameraEntity from = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity)(transformFrom));
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_IREntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_IREntity(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.IREntity target = new global::Microsoft.Robotics.Simulation.Engine.IREntity();
            global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity from = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            if ((from.ParentJoint != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint(from.ParentJoint)));
            }
            else {
                target.ParentJoint = null;
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            if ((from.EmbeddedResourceAssemblies != null)) {
                int count = from.EmbeddedResourceAssemblies.Count;
                global::System.Collections.Generic.List<string> tmp = new global::System.Collections.Generic.List<string>(count);
                tmp.AddRange(from.EmbeddedResourceAssemblies);
                target.EmbeddedResourceAssemblies = tmp;
            }
            else {
                target.EmbeddedResourceAssemblies = null;
            }
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshScale)));
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshRotation)));
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.MeshTranslation)));
            if ((from.State != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState(from.State)));
            }
            else {
                target.State = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Simulation_Engine_Proxy_IREntity_TO_Microsoft_Robotics_Simulation_Engine_Proxy_IREntity0(object transformFrom) {
            global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity target = new global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity();
            global::Microsoft.Robotics.Simulation.Engine.IREntity from = ((global::Microsoft.Robotics.Simulation.Engine.IREntity)(transformFrom));
            target.MaximumRange = from.MaximumRange;
            target.MinimumRange = from.MinimumRange;
            target.ShaderFile = from.ShaderFile;
            target.IsRealTimeCamera = from.IsRealTimeCamera;
            target.UpdateInterval = from.UpdateInterval;
            target.ShadowDisplay = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.ShadowDisplayMode)(((int)(from.ShadowDisplay))));
            target.CameraModel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity.CameraModelType)(((int)(from.CameraModel))));
            target.Near = from.Near;
            target.Far = from.Far;
            target.ViewSizeX = from.ViewSizeX;
            target.ViewSizeY = from.ViewSizeY;
            target.ViewAngle = from.ViewAngle;
            target.IsPhysicsVisible = from.IsPhysicsVisible;
            target.LookAt = from.LookAt;
            target.Location = from.Location;
            target.Flags = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntityProperties)(((int)(from.Flags))));
            target.ChildCount = from.ChildCount;
            global::Microsoft.Robotics.PhysicalModel.Joint tmp = from.ParentJoint;
            if ((tmp != null)) {
                target.ParentJoint = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Joint)(Microsoft_Robotics_PhysicalModel_Proxy_Joint_TO_Microsoft_Robotics_PhysicalModel_Proxy_Joint0(tmp)));
            }
            target.ReferenceFrame = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity.ReferenceFrames)(((int)(from.ReferenceFrame))));
            target.ServiceContract = from.ServiceContract;
            global::System.Collections.Generic.List<string> tmp0 = from.EmbeddedResourceAssemblies;
            if ((tmp0 != null)) {
                int count = tmp0.Count;
                global::System.Collections.Generic.List<string> tmp1 = new global::System.Collections.Generic.List<string>(count);
                tmp1.AddRange(tmp0);
                target.EmbeddedResourceAssemblies = tmp1;
            }
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp2 = from.MeshScale;
            target.MeshScale = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp2)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp3 = from.MeshRotation;
            target.MeshRotation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp3)));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp4 = from.MeshTranslation;
            target.MeshTranslation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp4)));
            global::Microsoft.Robotics.Simulation.EntityState tmp5 = from.State;
            if ((tmp5 != null)) {
                target.State = ((global::Microsoft.Robotics.Simulation.Proxy.EntityState)(Microsoft_Robotics_Simulation_Proxy_EntityState_TO_Microsoft_Robotics_Simulation_Proxy_EntityState0(tmp5)));
            }
            return target;
        }
    }
}
