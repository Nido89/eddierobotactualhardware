//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.SimpleSimulatedRobot.Y2009.M03, Version=0.0.0.0, Culture=neutral, PublicKeyT" +
    "oken=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Robotics.SimpleSimulatedRobot.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html", ElementName="SimpleSimulatedRobotState")]
    public class SimpleSimulatedRobotState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SimpleSimulatedRobotState() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SimpleSimulatedRobotState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotState typedTarget = ((global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotState)(target));
        }
        
        /// <summary>
        ///Clones SimpleSimulatedRobotState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotState target0 = new global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SimpleSimulatedRobotState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes SimpleSimulatedRobotState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SimpleSimulatedRobotState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html", ElementName="MotorBase")]
    public class MotorBase : global::Microsoft.Robotics.Simulation.Engine.Proxy.DifferentialDriveEntity, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MotorBase() {
        }
        
        /// <summary>
        ///Copies the data member values of the current MotorBase to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Robotics.SimpleSimulatedRobot.Proxy.MotorBase typedTarget = ((global::Robotics.SimpleSimulatedRobot.Proxy.MotorBase)(target));
        }
        
        /// <summary>
        ///Clones MotorBase
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Robotics.SimpleSimulatedRobot.Proxy.MotorBase target0 = new global::Robotics.SimpleSimulatedRobot.Proxy.MotorBase();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MotorBase to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes MotorBase
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MotorBase</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html", ElementName="MotorBaseWithDrive")]
    public class MotorBaseWithDrive : global::Robotics.SimpleSimulatedRobot.Proxy.MotorBase, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MotorBaseWithDrive() {
        }
        
        /// <summary>
        ///Copies the data member values of the current MotorBaseWithDrive to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Robotics.SimpleSimulatedRobot.Proxy.MotorBaseWithDrive typedTarget = ((global::Robotics.SimpleSimulatedRobot.Proxy.MotorBaseWithDrive)(target));
        }
        
        /// <summary>
        ///Clones MotorBaseWithDrive
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Robotics.SimpleSimulatedRobot.Proxy.MotorBaseWithDrive target0 = new global::Robotics.SimpleSimulatedRobot.Proxy.MotorBaseWithDrive();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MotorBaseWithDrive to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes MotorBaseWithDrive
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MotorBaseWithDrive</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html", ElementName="SimulatedWebcamEntity")]
    public class SimulatedWebcamEntity : global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SimulatedWebcamEntity() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SimulatedWebcamEntity to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Robotics.SimpleSimulatedRobot.Proxy.SimulatedWebcamEntity typedTarget = ((global::Robotics.SimpleSimulatedRobot.Proxy.SimulatedWebcamEntity)(target));
        }
        
        /// <summary>
        ///Clones SimulatedWebcamEntity
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Robotics.SimpleSimulatedRobot.Proxy.SimulatedWebcamEntity target0 = new global::Robotics.SimpleSimulatedRobot.Proxy.SimulatedWebcamEntity();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SimulatedWebcamEntity to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes SimulatedWebcamEntity
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SimulatedWebcamEntity</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SimpleSimulatedRobotOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Robotics.SimpleSimulatedRobot.Proxy.Get, global:: Robotics.SimpleSimulatedRobot.Proxy.Subscribe> {
        
        public SimpleSimulatedRobotOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Robotics.SimpleSimulatedRobot.Proxy.Get operation = new global::Robotics.SimpleSimulatedRobot.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Robotics.SimpleSimulatedRobot.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Robotics.SimpleSimulatedRobot.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Robotics.SimpleSimulatedRobot.Proxy.Get operation = new global::Robotics.SimpleSimulatedRobot.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Robotics.SimpleSimulatedRobot.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Robotics.SimpleSimulatedRobot.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Robotics.SimpleSimulatedRobot.Proxy.Subscribe operation = new global::Robotics.SimpleSimulatedRobot.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.SimpleSimulatedRobot.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Robotics.SimpleSimulatedRobot.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Robotics.SimpleSimulatedRobot.Proxy.Subscribe operation = new global::Robotics.SimpleSimulatedRobot.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Robotics.SimpleSimulatedRobot.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Robotics.SimpleSimulatedRobot.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("SimpleSimulatedRobot demonstrates how to create a custom entity that allows for e" +
        "asily adding various sensors")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Simple Simulated Robot")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SimpleSimulatedRobotOperations = new global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SimpleSimulatedRobotOperations, "http://schemas.microsoft.com/2009/03/simplesimulatedrobot.user.html", "SimpleSimulatedRobotOperations", ""));
        }
        
        public global::Robotics.SimpleSimulatedRobot.Proxy.SimpleSimulatedRobotOperations SimpleSimulatedRobotOperations;
    }
}
