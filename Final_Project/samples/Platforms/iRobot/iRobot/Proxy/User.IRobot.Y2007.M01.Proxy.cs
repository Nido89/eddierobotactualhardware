//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.IRobot.Y2007.M01, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f9074033" +
    "fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.IRobot.Lite.Proxy {
    
    
    /// <summary>
    ///            IRobot Perf Statistics
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html", ElementName="iRobotPerf")]
    [global::System.ComponentModel.DescriptionAttribute("IRobot Perf Statistics")]
    public class iRobotPerf : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public iRobotPerf() {
        }
        
        private int _PollingCount;
        
        /// <summary>
        ///            The number of times we have polled for data on the serial port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the number of times the serial port has been polled for data.")]
        public int PollingCount {
            get {
                return this._PollingCount;
            }
            set {
                this._PollingCount = value;
            }
        }
        
        private int _DataWaitingCount;
        
        /// <summary>
        ///            The number of times we have found data waiting on the serial port
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the number of times data was found on the port.")]
        public int DataWaitingCount {
            get {
                return this._DataWaitingCount;
            }
            set {
                this._DataWaitingCount = value;
            }
        }
        
        private double _PollsPerRequest;
        
        /// <summary>
        ///            PollingCount / DataWaitingCount
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the number of polls per request.\n(PollingCount / DataWatingCount)")]
        public double PollsPerRequest {
            get {
                return this._PollsPerRequest;
            }
            set {
                this._PollsPerRequest = value;
            }
        }
        
        private double _MinResponseTimeMs;
        
        /// <summary>
        ///            The min response time for a request sent to the iRobot
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the minimum response time for a request sent to the robot (ms).")]
        public double MinResponseTimeMs {
            get {
                return this._MinResponseTimeMs;
            }
            set {
                this._MinResponseTimeMs = value;
            }
        }
        
        private double _MaxResponseTimeMs;
        
        /// <summary>
        ///            The max response time for a request sent to the iRobot
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the maximum response time for a request sent to the robot (ms).")]
        public double MaxResponseTimeMs {
            get {
                return this._MaxResponseTimeMs;
            }
            set {
                this._MaxResponseTimeMs = value;
            }
        }
        
        private double _TotalResponseTimeMs;
        
        /// <summary>
        ///            The total time spent waiting for a response
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the total response time waiting for a request sent to the robot (ms).")]
        public double TotalResponseTimeMs {
            get {
                return this._TotalResponseTimeMs;
            }
            set {
                this._TotalResponseTimeMs = value;
            }
        }
        
        private double _TotalResponses;
        
        /// <summary>
        ///            The total number of Responses received
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the total number of responses received from the robot.")]
        public double TotalResponses {
            get {
                return this._TotalResponses;
            }
            set {
                this._TotalResponses = value;
            }
        }
        
        private double _AverageResponseMs;
        
        /// <summary>
        ///            TotalResponseTimeMs / TotalResponses
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the average response time  for a request sent to the robot (ms).")]
        public double AverageResponseMs {
            get {
                return this._AverageResponseMs;
            }
            set {
                this._AverageResponseMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current iRobotPerf to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf)(target));
            typedTarget._PollingCount = this._PollingCount;
            typedTarget._DataWaitingCount = this._DataWaitingCount;
            typedTarget._PollsPerRequest = this._PollsPerRequest;
            typedTarget._MinResponseTimeMs = this._MinResponseTimeMs;
            typedTarget._MaxResponseTimeMs = this._MaxResponseTimeMs;
            typedTarget._TotalResponseTimeMs = this._TotalResponseTimeMs;
            typedTarget._TotalResponses = this._TotalResponses;
            typedTarget._AverageResponseMs = this._AverageResponseMs;
        }
        
        /// <summary>
        ///Clones iRobotPerf
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf target0 = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current iRobotPerf to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._PollingCount);
            writer.Write(this._DataWaitingCount);
            writer.Write(this._PollsPerRequest);
            writer.Write(this._MinResponseTimeMs);
            writer.Write(this._MaxResponseTimeMs);
            writer.Write(this._TotalResponseTimeMs);
            writer.Write(this._TotalResponses);
            writer.Write(this._AverageResponseMs);
        }
        
        /// <summary>
        ///Deserializes iRobotPerf
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized iRobotPerf</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._PollingCount = reader.ReadInt32();
            this._DataWaitingCount = reader.ReadInt32();
            this._PollsPerRequest = reader.ReadDouble();
            this._MinResponseTimeMs = reader.ReadDouble();
            this._MaxResponseTimeMs = reader.ReadDouble();
            this._TotalResponseTimeMs = reader.ReadDouble();
            this._TotalResponses = reader.ReadDouble();
            this._AverageResponseMs = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Private State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html", ElementName="PrivateState")]
    [global::System.ComponentModel.DescriptionAttribute("Private State")]
    public class PrivateState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PrivateState() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf _iRobotPerf;
        
        /// <summary>
        ///            iRobot Peformance Statistics
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("iRobot Peformance Statistics")]
        public global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf iRobotPerf {
            get {
                return this._iRobotPerf;
            }
            set {
                this._iRobotPerf = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PrivateState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState)(target));
            if ((this._iRobotPerf != null)) {
                global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf tmp = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf();
                ((Microsoft.Dss.Core.IDssSerializable)(this._iRobotPerf)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._iRobotPerf = tmp;
            }
        }
        
        /// <summary>
        ///Clones PrivateState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState target0 = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PrivateState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._iRobotPerf == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._iRobotPerf)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes PrivateState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PrivateState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._iRobotPerf = ((global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Query Performance Data
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) QueryPerformanceData")]
    [global::System.ComponentModel.DescriptionAttribute("Provides performance information associated with communication between the servic" +
        "e and the robot.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class QueryPerf : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf, global:: W3C.Soap.Fault>> {
        
        public QueryPerf() {
        }
        
        public QueryPerf(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf body) : 
                base(body) {
        }
        
        public QueryPerf(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            IRobotLite Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("IRobotLite Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class IRobotLiteOperations : global::Microsoft.Ccr.Core.PortSet {
        
        public IRobotLiteOperations() : 
                base(typeof(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup), typeof(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop), typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get), typeof(global::Microsoft.Dss.Core.DsspHttp.HttpGet), typeof(global::Microsoft.Dss.Core.DsspHttp.HttpPost), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe), typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure), typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect), typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode), typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds), typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong), typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors), typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive), typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect), typeof(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry), typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications)) {
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup>)portSet[typeof(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)];
		}
        
        public virtual void Post(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop>)portSet[typeof(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)];
		}
        
        public virtual void Post(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.Core.DsspHttp.HttpGet>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.Core.DsspHttp.HttpGet>)portSet[typeof(global::Microsoft.Dss.Core.DsspHttp.HttpGet)];
		}
        
        public virtual void Post(global::Microsoft.Dss.Core.DsspHttp.HttpGet item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.Core.DsspHttp.HttpPost>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.Core.DsspHttp.HttpPost>)portSet[typeof(global::Microsoft.Dss.Core.DsspHttp.HttpPost)];
		}
        
        public virtual void Post(global::Microsoft.Dss.Core.DsspHttp.HttpPost item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Configure() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Configure(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Configure(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Configure(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Connect() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Connect(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Connect(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Connect(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode roombaMode, bool maintainMode) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode(roombaMode, maintainMode);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode roombaMode, bool maintainMode, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode(roombaMode, maintainMode);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits leds, int powerColor, int powerIntensity) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds(leds, powerColor, powerIntensity);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits leds, int powerColor, int powerIntensity, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds(leds, powerColor, powerIntensity);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaPlaySong(int songNumber) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong(songNumber);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaPlaySong(int songNumber, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong(songNumber);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.GetSensorsResponse RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket createSensorPacket) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors(createSensorPacket);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket createSensorPacket, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors(createSensorPacket);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.GetSensorsResponse RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaDrive(int velocity, int radius) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive(velocity, radius);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaDrive(int velocity, int radius, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive(velocity, radius);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateDriveDirect(int rightVelocity, int leftVelocity) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect(rightVelocity, leftVelocity);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDriveDirect(int rightVelocity, int leftVelocity, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect(rightVelocity, leftVelocity);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf, global:: W3C.Soap.Fault> QueryPerf() {
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf body = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf();
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf operation = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryPerf(out global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf operation) {
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf body = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf();
            operation = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf, global:: W3C.Soap.Fault> QueryPerf(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf();
            }
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf operation = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryPerf(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf body, out global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.QueryPerf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateAll() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateAll(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateAll(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateAll(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateBumpsCliffsAndWalls() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateBumpsCliffsAndWalls(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateBumpsCliffsAndWalls(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateBumpsCliffsAndWalls(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdatePose() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePose(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdatePose(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePose(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdatePower() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePower(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdatePower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateMode() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateMode(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateCliffDetail() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateCliffDetail(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateCliffDetail(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateCliffDetail(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateTelemetry() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateTelemetry(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateTelemetry(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateTelemetry(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications>(IRobotLiteOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateNotifications() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateNotifications(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateNotifications(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateNotifications(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            iRobot Create Lite
    ///            Service Implementation for lightweight processors
    ///            </summary>
    /// <remarks>The iRobot Lite service calls to the serial port and may block a thread
    ///            The ActivationSettings attribute with Sharing == false makes the runtime
    ///            dedicate a dispatcher thread pool just for this service.</remarks>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to an iRobot Create service which contains a subset of commands.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) iRobot� Create Lite")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.IRobotLiteOperations = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.IRobotLiteOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.IRobotLiteOperations, "http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html", "IRobotLiteOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.IRobotLiteOperations IRobotLiteOperations;
    }
}
namespace Microsoft.Robotics.Services.IRobot.DssStream.Proxy {
    
    
    /// <summary>
    ///            iRobotstream Service
    ///            </summary>
    /// <remarks>The iRobot stream service calls to the serial port and may block a thread
    ///            The ActivationSettings attribute with Sharing == false makes the runtime
    ///            dedicate a dispatcher thread pool just for this service.</remarks>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides stream communications support for the \'iRobot� Create / Roomba\' service." +
        "")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) iRobot� Stream Communications")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/12/irobot/stream.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/12/irobot/stream.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/12/irobot/stream.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.StreamOperations = new global::Microsoft.Robotics.Services.DssStream.Proxy.StreamOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.StreamOperations, "http://schemas.microsoft.com/robotics/2006/12/irobot/stream.user.html", "StreamOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.DssStream.Proxy.StreamOperations StreamOperations;
    }
}
namespace Microsoft.Robotics.Services.IRobot.Create.Proxy {
    
    
    /// <summary>
    ///            Create CliffDetail Results
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="ReturnCliffDetail")]
    [global::System.ComponentModel.DescriptionAttribute("Create CliffDetail Results")]
    public class ReturnCliffDetail : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnCliffDetail() {
        }
        
        private int _WallSignal;
        
        /// <summary>
        ///            Wall Signal
        ///            <remarks>0-4095</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the wall sensor.")]
        public int WallSignal {
            get {
                return this._WallSignal;
            }
            set {
                this._WallSignal = value;
            }
        }
        
        private int _CliffLeftSignal;
        
        /// <summary>
        ///            Cliff Left Signal
        ///            <remarks>0-4095</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the left side cliff sensor.")]
        public int CliffLeftSignal {
            get {
                return this._CliffLeftSignal;
            }
            set {
                this._CliffLeftSignal = value;
            }
        }
        
        private int _CliffFrontLeftSignal;
        
        /// <summary>
        ///            Cliff Front Left Signal
        ///            <remarks>0-4095</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the left front cliff sensor.")]
        public int CliffFrontLeftSignal {
            get {
                return this._CliffFrontLeftSignal;
            }
            set {
                this._CliffFrontLeftSignal = value;
            }
        }
        
        private int _CliffFrontRightSignal;
        
        /// <summary>
        ///            Cliff Front Right Signal
        ///            <remarks>0-4095</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the right front cliff sensor.")]
        public int CliffFrontRightSignal {
            get {
                return this._CliffFrontRightSignal;
            }
            set {
                this._CliffFrontRightSignal = value;
            }
        }
        
        private int _CliffRightSignal;
        
        /// <summary>
        ///            Cliff Right Signal
        ///            <remarks>0-4095</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the right side cliff sensor.")]
        public int CliffRightSignal {
            get {
                return this._CliffRightSignal;
            }
            set {
                this._CliffRightSignal = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CargoBayDigitalInputs _UserDigitalInputs;
        
        /// <summary>
        ///            User Digital Inputs
        ///            <remarks>0-31</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the digital inputs on the Create\'s Cargo Bay connector.")]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CargoBayDigitalInputs UserDigitalInputs {
            get {
                return this._UserDigitalInputs;
            }
            set {
                this._UserDigitalInputs = value;
            }
        }
        
        private int _UserAnalogInput;
        
        /// <summary>
        ///            User Analog Input
        ///            <remarks>0-1023</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the analog inputs on the Create\'s Cargo Bay connector.")]
        public int UserAnalogInput {
            get {
                return this._UserAnalogInput;
            }
            set {
                this._UserAnalogInput = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ChargingSourcesAvailable _ChargingSourcesAvailable;
        
        /// <summary>
        ///            Charging Sources Available
        ///            <remarks>Valid Bits: 0-3</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the charging sources available.")]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ChargingSourcesAvailable ChargingSourcesAvailable {
            get {
                return this._ChargingSourcesAvailable;
            }
            set {
                this._ChargingSourcesAvailable = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnCliffDetail to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail)(target));
            typedTarget._WallSignal = this._WallSignal;
            typedTarget._CliffLeftSignal = this._CliffLeftSignal;
            typedTarget._CliffFrontLeftSignal = this._CliffFrontLeftSignal;
            typedTarget._CliffFrontRightSignal = this._CliffFrontRightSignal;
            typedTarget._CliffRightSignal = this._CliffRightSignal;
            typedTarget._UserDigitalInputs = this._UserDigitalInputs;
            typedTarget._UserAnalogInput = this._UserAnalogInput;
            typedTarget._ChargingSourcesAvailable = this._ChargingSourcesAvailable;
        }
        
        /// <summary>
        ///Clones ReturnCliffDetail
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnCliffDetail to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._WallSignal);
            writer.Write(this._CliffLeftSignal);
            writer.Write(this._CliffFrontLeftSignal);
            writer.Write(this._CliffFrontRightSignal);
            writer.Write(this._CliffRightSignal);
            writer.Write(((int)(this._UserDigitalInputs)));
            writer.Write(this._UserAnalogInput);
            writer.Write(((int)(this._ChargingSourcesAvailable)));
        }
        
        /// <summary>
        ///Deserializes ReturnCliffDetail
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnCliffDetail</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._WallSignal = reader.ReadInt32();
            this._CliffLeftSignal = reader.ReadInt32();
            this._CliffFrontLeftSignal = reader.ReadInt32();
            this._CliffFrontRightSignal = reader.ReadInt32();
            this._CliffRightSignal = reader.ReadInt32();
            this._UserDigitalInputs = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CargoBayDigitalInputs)(reader.ReadInt32()));
            this._UserAnalogInput = reader.ReadInt32();
            this._ChargingSourcesAvailable = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ChargingSourcesAvailable)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Create Telemetry Results
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="ReturnTelemetry")]
    [global::System.ComponentModel.DescriptionAttribute("Create Telemetry Results")]
    public class ReturnTelemetry : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnTelemetry() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _OIMode;
        
        /// <summary>
        ///            Open Interface Mode.
        ///            A code indicating the current state of iRobot Create.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the current Open Interface mode.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode OIMode {
            get {
                return this._OIMode;
            }
            set {
                this._OIMode = value;
            }
        }
        
        private int _SongNumber;
        
        /// <summary>
        ///            Song Number
        ///            </summary>
        /// <remarks>Range 1-16</remarks>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the number for a pre-defined song.\n(1 - 16).")]
        public int SongNumber {
            get {
                return this._SongNumber;
            }
            set {
                this._SongNumber = value;
            }
        }
        
        private bool _SongPlaying;
        
        /// <summary>
        ///            Song Playing
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies if the song is currently playing.")]
        public bool SongPlaying {
            get {
                return this._SongPlaying;
            }
            set {
                this._SongPlaying = value;
            }
        }
        
        private int _NumberOfStreamPackets;
        
        /// <summary>
        ///            Number of Stream Packets
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the number of stream packets.")]
        public int NumberOfStreamPackets {
            get {
                return this._NumberOfStreamPackets;
            }
            set {
                this._NumberOfStreamPackets = value;
            }
        }
        
        private int _RequestedVelocity;
        
        /// <summary>
        ///            The velocity most recently requested with a Drive command.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the most recently requested Drive velocity.")]
        public int RequestedVelocity {
            get {
                return this._RequestedVelocity;
            }
            set {
                this._RequestedVelocity = value;
            }
        }
        
        private int _RequestedRadius;
        
        /// <summary>
        ///            The radius most recently requested with a Drive command.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the most recently requested Drive radius.")]
        public int RequestedRadius {
            get {
                return this._RequestedRadius;
            }
            set {
                this._RequestedRadius = value;
            }
        }
        
        private int _RequestedRightVelocity;
        
        /// <summary>
        ///            The right wheel velocity most recently requested with a Drive Direct command.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the most recently requested Drive Direct right wheel velocity.")]
        public int RequestedRightVelocity {
            get {
                return this._RequestedRightVelocity;
            }
            set {
                this._RequestedRightVelocity = value;
            }
        }
        
        private int _RequestedLeftVelocity;
        
        /// <summary>
        ///            The left wheel velocity most recently requested with a Drive Direct command.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the most recently requested Drive Direct left wheel velocity.")]
        public int RequestedLeftVelocity {
            get {
                return this._RequestedLeftVelocity;
            }
            set {
                this._RequestedLeftVelocity = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnTelemetry to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry)(target));
            typedTarget._OIMode = this._OIMode;
            typedTarget._SongNumber = this._SongNumber;
            typedTarget._SongPlaying = this._SongPlaying;
            typedTarget._NumberOfStreamPackets = this._NumberOfStreamPackets;
            typedTarget._RequestedVelocity = this._RequestedVelocity;
            typedTarget._RequestedRadius = this._RequestedRadius;
            typedTarget._RequestedRightVelocity = this._RequestedRightVelocity;
            typedTarget._RequestedLeftVelocity = this._RequestedLeftVelocity;
        }
        
        /// <summary>
        ///Clones ReturnTelemetry
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnTelemetry to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._OIMode)));
            writer.Write(this._SongNumber);
            writer.Write(this._SongPlaying);
            writer.Write(this._NumberOfStreamPackets);
            writer.Write(this._RequestedVelocity);
            writer.Write(this._RequestedRadius);
            writer.Write(this._RequestedRightVelocity);
            writer.Write(this._RequestedLeftVelocity);
        }
        
        /// <summary>
        ///Deserializes ReturnTelemetry
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnTelemetry</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._OIMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            this._SongNumber = reader.ReadInt32();
            this._SongPlaying = reader.ReadBoolean();
            this._NumberOfStreamPackets = reader.ReadInt32();
            this._RequestedVelocity = reader.ReadInt32();
            this._RequestedRadius = reader.ReadInt32();
            this._RequestedRightVelocity = reader.ReadInt32();
            this._RequestedLeftVelocity = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Create Stream Results
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="ReturnStream")]
    [global::System.ComponentModel.DescriptionAttribute("Create Stream Results")]
    public class ReturnStream : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnStream() {
        }
        
        private byte[] _StreamPacket;
        
        /// <summary>
        ///            The stream packet data
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the stream packet data.")]
        public byte[] StreamPacket {
            get {
                return this._StreamPacket;
            }
            set {
                this._StreamPacket = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue> _NamedValues;
        
        /// <summary>
        ///            The Named Values which have changed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the named values that have changed.")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue> NamedValues {
            get {
                return this._NamedValues;
            }
            set {
                this._NamedValues = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnStream to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream)(target));
            if ((this._StreamPacket != null)) {
                int count = this._StreamPacket.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._StreamPacket, 0, tmp, 0, global::System.Buffer.ByteLength(this._StreamPacket));
                typedTarget._StreamPacket = tmp;
            }
            if ((this._NamedValues != null)) {
                int count0 = this._NamedValues.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue tmp1 = default(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue);
                    if ((this._NamedValues[index] != null)) {
                        global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue tmp2 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._NamedValues[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                        tmp1 = tmp2;
                    }
                    tmp0.Add(tmp1);
                }
                typedTarget._NamedValues = tmp0;
            }
        }
        
        /// <summary>
        ///Clones ReturnStream
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnStream to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._StreamPacket == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._StreamPacket.Length);
                writer.Write(this._StreamPacket);
            }
            if ((this._NamedValues == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._NamedValues.Count);
                for (int indexNamedValues = 0; (indexNamedValues < this._NamedValues.Count); indexNamedValues = (indexNamedValues + 1)) {
                    if ((this._NamedValues[indexNamedValues] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._NamedValues[indexNamedValues])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes ReturnStream
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnStream</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                int count1 = reader.ReadInt32();
                this._StreamPacket = reader.ReadBytes(count1);
            }
            if ((reader.ReadByte() != 0)) {
                int count2 = reader.ReadInt32();
                this._NamedValues = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue>(count2);
                for (int index0 = 0; (index0 < count2); index0 = (index0 + 1)) {
                    this._NamedValues.Add(default(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue));
                    if ((reader.ReadByte() != 0)) {
                        this._NamedValues[index0] = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            An individual Sensor Value
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="SensorValue")]
    [global::System.ComponentModel.DescriptionAttribute("An individual Sensor Value")]
    public class SensorValue : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SensorValue() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket _Sensor;
        
        /// <summary>
        ///            The type of Sensor
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies a sensor.")]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket Sensor {
            get {
                return this._Sensor;
            }
            set {
                this._Sensor = value;
            }
        }
        
        private int _Value;
        
        /// <summary>
        ///            The Sensor Value
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the sensor\'s value.")]
        public int Value {
            get {
                return this._Value;
            }
            set {
                this._Value = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SensorValue to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue)(target));
            typedTarget._Sensor = this._Sensor;
            typedTarget._Value = this._Value;
        }
        
        /// <summary>
        ///Clones SensorValue
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SensorValue to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Sensor)));
            writer.Write(this._Value);
        }
        
        /// <summary>
        ///Deserializes SensorValue
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SensorValue</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Sensor = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket)(reader.ReadInt32()));
            this._Value = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Create QueryList Results
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="ReturnQueryList")]
    [global::System.ComponentModel.DescriptionAttribute("Create QueryList Results")]
    public class ReturnQueryList : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnQueryList() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnQueryList to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList)(target));
        }
        
        /// <summary>
        ///Clones ReturnQueryList
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnQueryList to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes ReturnQueryList
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnQueryList</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            This command lets you control the forward and backward motion of Create's drive
    ///            wheels independently.  A positive velocity makes that wheel drive forward,
    ///            while a negative velocity makes it drive backward.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdDriveDirect")]
    [global::System.ComponentModel.DescriptionAttribute("This command lets you control the forward and backward motion of Create\'s drive w" +
        "heels independently.  A positive velocity makes that wheel drive forward, while " +
        "a negative velocity makes it drive backward.")]
    public class CmdDriveDirect : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdDriveDirect() {
        }
        
        public CmdDriveDirect(int rightVelocity, int leftVelocity) {
            this._RightVelocity = rightVelocity;
            this._LeftVelocity = leftVelocity;
        }
        
        private int _RightVelocity;
        
        /// <summary>
        ///            Right Velocity (-500 to +500 mm/s)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the right wheel velocity.\n(-500 to +500 mm/s)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int RightVelocity {
            get {
                return this._RightVelocity;
            }
            set {
                this._RightVelocity = value;
            }
        }
        
        private int _LeftVelocity;
        
        /// <summary>
        ///            Left Velocity (-500 to +500 mm/s)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the left wheel velocity.\n(-500 to +500 mm/s)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int LeftVelocity {
            get {
                return this._LeftVelocity;
            }
            set {
                this._LeftVelocity = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdDriveDirect to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect)(target));
            typedTarget._RightVelocity = this._RightVelocity;
            typedTarget._LeftVelocity = this._LeftVelocity;
        }
        
        /// <summary>
        ///Clones CmdDriveDirect
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdDriveDirect to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._RightVelocity);
            writer.Write(this._LeftVelocity);
        }
        
        /// <summary>
        ///Deserializes CmdDriveDirect
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdDriveDirect</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._RightVelocity = reader.ReadInt32();
            this._LeftVelocity = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Starts a Demo.
    ///            <remarks>Works only with the iRobot Create.</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdDemo")]
    [global::System.ComponentModel.DescriptionAttribute("Starts a Demo. Works only with the iRobot Create.")]
    public class CmdDemo : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdDemo() {
        }
        
        public CmdDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode demoMode) {
            this._DemoMode = demoMode;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode _DemoMode;
        
        /// <summary>
        ///            The iRobot Create Demo Mode.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Create demo mode.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode DemoMode {
            get {
                return this._DemoMode;
            }
            set {
                this._DemoMode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdDemo to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo)(target));
            typedTarget._DemoMode = this._DemoMode;
        }
        
        /// <summary>
        ///Clones CmdDemo
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdDemo to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._DemoMode)));
        }
        
        /// <summary>
        ///Deserializes CmdDemo
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdDemo</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._DemoMode = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            This command lets you control the three low side drivers
    ///            with variable power. With each data byte, you specify the
    ///            PWM duty cycle for the low side driver (max 128). For
    ///            example, if you want to control a driver with 25% of battery
    ///            voltage, choose a duty cycle of 128 * 25% = 32.
    ///            <remarks>Available in Safe or Full mode</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdPWMLowSideDrivers")]
    [global::System.ComponentModel.DescriptionAttribute(@"This command lets you control the three low side drivers with variable power. With each data byte, you specify the PWM duty cycle for the low side driver (max 128). For example, if you want to control a driver with 25% of battery voltage, choose a duty cycle of 128 * 25% = 32. Available in Safe or Full mode")]
    public class CmdPWMLowSideDrivers : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdPWMLowSideDrivers() {
        }
        
        public CmdPWMLowSideDrivers(int digitalOut0, int digitalOut1, int digitalOut2) {
            this._DigitalOut0 = digitalOut0;
            this._DigitalOut1 = digitalOut1;
            this._DigitalOut2 = digitalOut2;
        }
        
        private int _DigitalOut0;
        
        /// <summary>
        ///            Digital Out 0 (Pin 19)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the digital output port 0 (Pin 19).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int DigitalOut0 {
            get {
                return this._DigitalOut0;
            }
            set {
                this._DigitalOut0 = value;
            }
        }
        
        private int _DigitalOut1;
        
        /// <summary>
        ///            Digital Out 1 (Pin 7)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the digital output port 1 (Pin 7).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int DigitalOut1 {
            get {
                return this._DigitalOut1;
            }
            set {
                this._DigitalOut1 = value;
            }
        }
        
        private int _DigitalOut2;
        
        /// <summary>
        ///            Digital Out 2 (Pin 20)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the digital output port 2 (Pin 20).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public int DigitalOut2 {
            get {
                return this._DigitalOut2;
            }
            set {
                this._DigitalOut2 = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdPWMLowSideDrivers to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers)(target));
            typedTarget._DigitalOut0 = this._DigitalOut0;
            typedTarget._DigitalOut1 = this._DigitalOut1;
            typedTarget._DigitalOut2 = this._DigitalOut2;
        }
        
        /// <summary>
        ///Clones CmdPWMLowSideDrivers
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdPWMLowSideDrivers to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._DigitalOut0);
            writer.Write(this._DigitalOut1);
            writer.Write(this._DigitalOut2);
        }
        
        /// <summary>
        ///Deserializes CmdPWMLowSideDrivers
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdPWMLowSideDrivers</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._DigitalOut0 = reader.ReadInt32();
            this._DigitalOut1 = reader.ReadInt32();
            this._DigitalOut2 = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            This command controls the state of the 3 digital output
    ///            pins on the 25 pin Cargo Bay Connector. The digital outputs
    ///            can provide up to 20 mA of current.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdDigitalOutputs")]
    [global::System.ComponentModel.DescriptionAttribute("This command controls the state of the 3 digital output pins on the 25 pin Cargo " +
        "Bay Connector. The digital outputs can provide up to 20 mA of current.")]
    public class CmdDigitalOutputs : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdDigitalOutputs() {
        }
        
        public CmdDigitalOutputs(bool digitalOut0, bool digitalOut2, bool digitalOut1) {
            this._DigitalOut0 = digitalOut0;
            this._DigitalOut1 = digitalOut1;
            this._DigitalOut2 = digitalOut2;
        }
        
        private bool _DigitalOut0;
        
        /// <summary>
        ///            Digital Output 0 (pin 19)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies digital output 0 (pin 19).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public bool DigitalOut0 {
            get {
                return this._DigitalOut0;
            }
            set {
                this._DigitalOut0 = value;
            }
        }
        
        private bool _DigitalOut1;
        
        /// <summary>
        ///            Digital Output 1 (pin 7)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies digital output 1 (pin 7).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public bool DigitalOut1 {
            get {
                return this._DigitalOut1;
            }
            set {
                this._DigitalOut1 = value;
            }
        }
        
        private bool _DigitalOut2;
        
        /// <summary>
        ///            Digital Output 2 (pin 20)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies digital output 2 (pin 20).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public bool DigitalOut2 {
            get {
                return this._DigitalOut2;
            }
            set {
                this._DigitalOut2 = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdDigitalOutputs to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs)(target));
            typedTarget._DigitalOut0 = this._DigitalOut0;
            typedTarget._DigitalOut1 = this._DigitalOut1;
            typedTarget._DigitalOut2 = this._DigitalOut2;
        }
        
        /// <summary>
        ///Clones CmdDigitalOutputs
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdDigitalOutputs to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._DigitalOut0);
            writer.Write(this._DigitalOut1);
            writer.Write(this._DigitalOut2);
        }
        
        /// <summary>
        ///Deserializes CmdDigitalOutputs
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdDigitalOutputs</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._DigitalOut0 = reader.ReadBoolean();
            this._DigitalOut1 = reader.ReadBoolean();
            this._DigitalOut2 = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Request a stream of sensor data.
    ///            Works only with the iRobot Create.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdStream")]
    [global::System.ComponentModel.DescriptionAttribute("Request a stream of sensor data. Works only with the iRobot Create.")]
    public class CmdStream : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdStream() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdStream to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream)(target));
        }
        
        /// <summary>
        ///Clones CmdStream
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdStream to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes CmdStream
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdStream</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Query for a list of sensors.
    ///            Works only with the iRobot Create.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdQueryList")]
    [global::System.ComponentModel.DescriptionAttribute("Query for a list of sensors. Works only with the iRobot Create.")]
    public class CmdQueryList : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdQueryList() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdQueryList to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList)(target));
        }
        
        /// <summary>
        ///Clones CmdQueryList
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdQueryList to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes CmdQueryList
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdQueryList</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Pause/Resume a stream of sensor data.
    ///            Works only with the iRobot Create.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdStreamPauseResume")]
    [global::System.ComponentModel.DescriptionAttribute("Pause/Resume a stream of sensor data. Works only with the iRobot Create.")]
    public class CmdStreamPauseResume : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdStreamPauseResume() {
        }
        
        public CmdStreamPauseResume(bool streamActive) {
            this._StreamActive = streamActive;
        }
        
        private bool _StreamActive;
        
        /// <summary>
        ///            The requested stream state
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies if data streaming is active.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public bool StreamActive {
            get {
                return this._StreamActive;
            }
            set {
                this._StreamActive = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdStreamPauseResume to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume)(target));
            typedTarget._StreamActive = this._StreamActive;
        }
        
        /// <summary>
        ///Clones CmdStreamPauseResume
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdStreamPauseResume to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._StreamActive);
        }
        
        /// <summary>
        ///Deserializes CmdStreamPauseResume
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdStreamPauseResume</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._StreamActive = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///             This command sends the requested byte out of low side
    ///             driver 1 (pin 23 on the Cargo Bay Connector), using the
    ///             format expected by iRobot Create�s IR receiver. You must
    ///             use a preload resistor (suggested value: 100 ohms) in
    ///             parallel with the IR LED and its resistor in order turn it on.
    ///            
    ///             Works only with the iRobot Create.
    ///             <remarks>Valid Range: 0 - 255</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdSendIR")]
    [global::System.ComponentModel.DescriptionAttribute(@"This command sends the requested byte out of low side driver 1 (pin 23 on the Cargo Bay Connector), using the format expected by iRobot Create�s IR receiver. You must use a preload resistor (suggested value: 100 ohms) in parallel with the IR LED and its resistor in order turn it on. 

 Works only with the iRobot Create. Valid Range: 0 - 255")]
    public class CmdSendIR : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdSendIR() {
        }
        
        public CmdSendIR(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR iRCode) {
            this._IRCode = iRCode;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR _IRCode;
        
        /// <summary>
        ///            The requested IR Code
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies an IR code.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR IRCode {
            get {
                return this._IRCode;
            }
            set {
                this._IRCode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdSendIR to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR)(target));
            typedTarget._IRCode = this._IRCode;
        }
        
        /// <summary>
        ///Clones CmdSendIR
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdSendIR to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._IRCode)));
        }
        
        /// <summary>
        ///Deserializes CmdSendIR
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdSendIR</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._IRCode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Define an iRobot Create Script.
    ///            This command defines a script to be played later. A script
    ///            consists of OI commands and can be up to 100 bytes long.
    ///            There is no flow control, but �wait� commands (see below)
    ///            cause Create to hold its current state until the specified
    ///            event is detected.
    ///            Works only with the iRobot Create.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdDefineScript")]
    [global::System.ComponentModel.DescriptionAttribute("Defines an iRobot Create Script.\nUse the iRobot Create Scripting Engine.")]
    public class CmdDefineScript : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdDefineScript() {
        }
        
        public CmdDefineScript(byte[] packetData) {
            this._PacketData = packetData;
        }
        
        private byte[] _PacketData;
        
        /// <summary>
        ///            The script payload.  Use the iRobot Create Scripting Engine.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the script payload.\nUse the iRobot Create Scripting Engine.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public byte[] PacketData {
            get {
                return this._PacketData;
            }
            set {
                this._PacketData = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdDefineScript to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript)(target));
            if ((this._PacketData != null)) {
                int count = this._PacketData.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._PacketData, 0, tmp, 0, global::System.Buffer.ByteLength(this._PacketData));
                typedTarget._PacketData = tmp;
            }
        }
        
        /// <summary>
        ///Clones CmdDefineScript
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdDefineScript to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._PacketData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._PacketData.Length);
                writer.Write(this._PacketData);
            }
        }
        
        /// <summary>
        ///Deserializes CmdDefineScript
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdDefineScript</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._PacketData = reader.ReadBytes(count0);
            }
            return this;
        }
    }
    
    /// <summary>
    ///            The Define Script response
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="ReturnDefineScript")]
    [global::System.ComponentModel.DescriptionAttribute("The Define Script response")]
    public class ReturnDefineScript : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnDefineScript() {
        }
        
        private int _ScriptResponseBytes;
        
        /// <summary>
        ///            The expected number of response bytes returned when the script is played.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The expected number of response bytes returned when the script is played.")]
        public int ScriptResponseBytes {
            get {
                return this._ScriptResponseBytes;
            }
            set {
                this._ScriptResponseBytes = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnDefineScript to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript)(target));
            typedTarget._ScriptResponseBytes = this._ScriptResponseBytes;
        }
        
        /// <summary>
        ///Clones ReturnDefineScript
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnDefineScript to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._ScriptResponseBytes);
        }
        
        /// <summary>
        ///Deserializes ReturnDefineScript
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnDefineScript</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._ScriptResponseBytes = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Play the previously defined iRobot Create script.
    ///            This command loads a previously defined OI script into the
    ///            serial input queue for playback.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdPlayScript")]
    [global::System.ComponentModel.DescriptionAttribute("Play the previously defined iRobot Create script. This command loads a previously" +
        " defined OI script into the serial input queue for playback.")]
    public class CmdPlayScript : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdPlayScript() {
        }
        
        public CmdPlayScript(int scriptResponseBytes, int timeoutMs) {
            this._ScriptResponseBytes = scriptResponseBytes;
            this._TimeoutMs = timeoutMs;
        }
        
        private int _ScriptResponseBytes;
        
        /// <summary>
        ///            The expected number of response bytes returned when the script is played.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the expected number of response bytes returned when a script is played." +
            "")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int ScriptResponseBytes {
            get {
                return this._ScriptResponseBytes;
            }
            set {
                this._ScriptResponseBytes = value;
            }
        }
        
        private int _TimeoutMs;
        
        /// <summary>
        ///            The number of ms to wait before cancelling the script.
        ///            <remarks>0 - Do not cancel</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the number of milliseconds to wait before cancelling the script.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int TimeoutMs {
            get {
                return this._TimeoutMs;
            }
            set {
                this._TimeoutMs = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdPlayScript to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript)(target));
            typedTarget._ScriptResponseBytes = this._ScriptResponseBytes;
            typedTarget._TimeoutMs = this._TimeoutMs;
        }
        
        /// <summary>
        ///Clones CmdPlayScript
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdPlayScript to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._ScriptResponseBytes);
            writer.Write(this._TimeoutMs);
        }
        
        /// <summary>
        ///Deserializes CmdPlayScript
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdPlayScript</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._ScriptResponseBytes = reader.ReadInt32();
            this._TimeoutMs = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Show the previously defined iRobot Create Script.
    ///            This command returns the values of a previously stored
    ///            script, starting with the number of bytes in the script and
    ///            followed by the script�s commands and data bytes. It first
    ///            halts the sensor stream, if one has been started with a
    ///            Stream or Pause/Resume Stream command. To restart the
    ///            stream, send Pause/Resume Stream (opcode 150).
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdShowScript")]
    [global::System.ComponentModel.DescriptionAttribute(@"Show the previously defined iRobot Create Script. This command returns the values of a previously stored script, starting with the number of bytes in the script and followed by the script�s commands and data bytes. It first halts the sensor stream, if one has been started with a Stream or Pause/Resume Stream command. To restart the stream, send Pause/Resume Stream (opcode 150).")]
    public class CmdShowScript : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdShowScript() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdShowScript to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript)(target));
        }
        
        /// <summary>
        ///Clones CmdShowScript
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdShowScript to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes CmdShowScript
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdShowScript</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Create Script Results
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="ReturnScript")]
    [global::System.ComponentModel.DescriptionAttribute("Create Script Results")]
    public class ReturnScript : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnScript() {
        }
        
        private byte[] _ScriptPacket;
        
        /// <summary>
        ///            The stream packet data
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the stream packet data.")]
        public byte[] ScriptPacket {
            get {
                return this._ScriptPacket;
            }
            set {
                this._ScriptPacket = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnScript to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript)(target));
            if ((this._ScriptPacket != null)) {
                int count = this._ScriptPacket.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._ScriptPacket, 0, tmp, 0, global::System.Buffer.ByteLength(this._ScriptPacket));
                typedTarget._ScriptPacket = tmp;
            }
        }
        
        /// <summary>
        ///Clones ReturnScript
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnScript to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._ScriptPacket == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ScriptPacket.Length);
                writer.Write(this._ScriptPacket);
            }
        }
        
        /// <summary>
        ///Deserializes ReturnScript
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnScript</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._ScriptPacket = reader.ReadBytes(count0);
            }
            return this;
        }
    }
    
    /// <summary>
    ///             This command causes Create to wait for the specified time.
    ///             During this time, Create�s state does not change, nor does
    ///             it react to any inputs, serial or otherwise.
    ///            
    ///             Works only with the iRobot Create.
    ///             <remarks>The SCI may be in any mode to accept this
    ///             command. This command does not change the mode.</remarks><remarks>Valid Range: 0.0 - 25.5</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdWaitTime")]
    [global::System.ComponentModel.DescriptionAttribute(@"This command causes Create to wait for the specified time. During this time, Create�s state does not change, nor does it react to any inputs, serial or otherwise. 

 Works only with the iRobot Create. The SCI may be in any mode to accept this command. This command does not change the mode.Valid Range: 0.0 - 25.5")]
    public class CmdWaitTime : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdWaitTime() {
        }
        
        public CmdWaitTime(double seconds) {
            this._Seconds = seconds;
        }
        
        private double _Seconds;
        
        /// <summary>
        ///            The number of seconds to wait.
        ///            <remarks>0 - 25.5 seconds in 1/10 second increments with a 15ms resolution</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the number of seconds to wait.\n(0 - 25.5 seconds in 1/10 second increme" +
            "nts.)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public double Seconds {
            get {
                return this._Seconds;
            }
            set {
                this._Seconds = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdWaitTime to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime)(target));
            typedTarget._Seconds = this._Seconds;
        }
        
        /// <summary>
        ///Clones CmdWaitTime
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdWaitTime to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._Seconds);
        }
        
        /// <summary>
        ///Deserializes CmdWaitTime
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdWaitTime</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Seconds = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///             This command causes iRobot Create to wait until it has
    ///             traveled the specified distance in mm. When Create travels
    ///             forward, the distance is incremented. When Create travels
    ///             backward, the distance is decremented. If the wheels
    ///             are passively rotated in either direction, the distance is
    ///             incremented. Until Create travels the specified distance,
    ///             its state does not change, nor does it react to any inputs,
    ///             serial or otherwise.
    ///            
    ///             Works only with the iRobot Create.
    ///             <remarks>The SCI may be in any mode to accept this
    ///             command. This command does not change the mode.</remarks><remarks>Valid Range: -32767 - 32768</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdWaitDistance")]
    [global::System.ComponentModel.DescriptionAttribute(@"This command causes iRobot Create to wait until it has traveled the specified distance in mm. When Create travels forward, the distance is incremented. When Create travels backward, the distance is decremented. If the wheels are passively rotated in either direction, the distance is incremented. Until Create travels the specified distance, its state does not change, nor does it react to any inputs, serial or otherwise. 

 Works only with the iRobot Create. The SCI may be in any mode to accept this command. This command does not change the mode.Valid Range: -32767 - 32768")]
    public class CmdWaitDistance : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdWaitDistance() {
        }
        
        public CmdWaitDistance(int distance) {
            this._Distance = distance;
        }
        
        private int _Distance;
        
        /// <summary>
        ///            The distance to wait (mm).
        ///            <remarks>-32767 - 32768</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the distance to wait (mm).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int Distance {
            get {
                return this._Distance;
            }
            set {
                this._Distance = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdWaitDistance to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance)(target));
            typedTarget._Distance = this._Distance;
        }
        
        /// <summary>
        ///Clones CmdWaitDistance
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdWaitDistance to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._Distance);
        }
        
        /// <summary>
        ///Deserializes CmdWaitDistance
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdWaitDistance</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Distance = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///             This command causes Create to wait until it has rotated
    ///             through specified angle in degrees. When Create turns
    ///             counterclockwise, the angle is incremented. When Create
    ///             turns clockwise, the angle is decremented. Until Create
    ///             turns through the specified angle, its state does not change,
    ///             nor does it react to any inputs, serial or otherwise.
    ///            
    ///             Works only with the iRobot Create.
    ///             <remarks>The SCI may be in any mode to accept this
    ///             command. This command does not change the mode.</remarks><remarks>This command resets the angle variable that is
    ///             returned in Sensors</remarks><remarks>Valid Range: -32767 - 32768</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdWaitAngle")]
    [global::System.ComponentModel.DescriptionAttribute(@"This command causes Create to wait until it has rotated through specified angle in degrees. When Create turns counterclockwise, the angle is incremented. When Create turns clockwise, the angle is decremented. Until Create turns through the specified angle, its state does not change, nor does it react to any inputs, serial or otherwise. 

 Works only with the iRobot Create. The SCI may be in any mode to accept this command. This command does not change the mode.This command resets the angle variable that is returned in SensorsValid Range: -32767 - 32768")]
    public class CmdWaitAngle : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdWaitAngle() {
        }
        
        public CmdWaitAngle(int angle) {
            this._Angle = angle;
        }
        
        private int _Angle;
        
        /// <summary>
        ///            The angle to wait (degrees).
        ///            <remarks>-32767 - 32768</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the angle to wait (degrees).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int Angle {
            get {
                return this._Angle;
            }
            set {
                this._Angle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdWaitAngle to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle)(target));
            typedTarget._Angle = this._Angle;
        }
        
        /// <summary>
        ///Clones CmdWaitAngle
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdWaitAngle to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._Angle);
        }
        
        /// <summary>
        ///Deserializes CmdWaitAngle
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdWaitAngle</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Angle = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///             This command causes Create to wait until it detects the
    ///             specified event. Until the specified event is detected,
    ///             Create�s state does not change, nor does it react to any
    ///             inputs, serial or otherwise.
    ///            
    ///             Works only with the iRobot Create.
    ///             <remarks>The SCI may be in any mode to accept this
    ///             command. This command does not change the mode.</remarks><remarks>Valid Range: 0.0 - 25.5</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CmdWaitEvent")]
    [global::System.ComponentModel.DescriptionAttribute(@"This command causes Create to wait until it detects the specified event. Until the specified event is detected, Create�s state does not change, nor does it react to any inputs, serial or otherwise. 

 Works only with the iRobot Create. The SCI may be in any mode to accept this command. This command does not change the mode.Valid Range: 0.0 - 25.5")]
    public class CmdWaitEvent : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdWaitEvent() {
        }
        
        public CmdWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent waitEvent) {
            this._WaitEvent = waitEvent;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent _WaitEvent;
        
        /// <summary>
        ///            The Event to wait for.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the Create event to wait for.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent WaitEvent {
            get {
                return this._WaitEvent;
            }
            set {
                this._WaitEvent = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdWaitEvent to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent)(target));
            typedTarget._WaitEvent = this._WaitEvent;
        }
        
        /// <summary>
        ///Clones CmdWaitEvent
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent target0 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdWaitEvent to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._WaitEvent)));
        }
        
        /// <summary>
        ///Deserializes CmdWaitEvent
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdWaitEvent</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._WaitEvent = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Controls Create's drive wheels.
    ///            <remarks>This command lets you control the forward and backward
    ///            motion of Create�s drive wheels independently. It takes
    ///            four data bytes, which are interpreted as two 16-bit signed
    ///            values using two�s complement. The first two bytes specify
    ///            the velocity of the right wheel in millimeters per second
    ///            (mm/s), with the high byte sent first. The next two bytes
    ///            specify the velocity of the left wheel, in the same format.
    ///            A positive velocity makes that wheel drive forward, while a
    ///            negative velocity makes it drive backward.</remarks></summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateDriveDirect")]
    [global::System.ComponentModel.DescriptionAttribute("Controls the forward and backward motion of Create\'s wheels.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateDriveDirect : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateDriveDirect() {
        }
        
        public CreateDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body) : 
                base(body) {
        }
        
        public CreateDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Starts a Demo on the iRobot Create.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateDemo")]
    [global::System.ComponentModel.DescriptionAttribute("Starts a demo script on the iRobot Create.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateDemo : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateDemo() {
        }
        
        public CreateDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body) : 
                base(body) {
        }
        
        public CreateDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            This command lets you control the three low side drivers
    ///            with variable power. With each data byte, you specify the
    ///            PWM duty cycle for the low side driver (max 128). For
    ///            example, if you want to control a driver with 25% of battery
    ///            voltage, choose a duty cycle of 128 * 25% = 32.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreatePWMLowSideDrivers")]
    [global::System.ComponentModel.DescriptionAttribute("Controls the three low side drivers with variable power.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreatePWMLowSideDrivers : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreatePWMLowSideDrivers() {
        }
        
        public CreatePWMLowSideDrivers(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body) : 
                base(body) {
        }
        
        public CreatePWMLowSideDrivers(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            This command controls the state of the 3 digital output
    ///            pins on the 25 pin Cargo Bay Connector. The digital outputs
    ///            can provide up to 20 mA of current.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateDigitalOutputs")]
    [global::System.ComponentModel.DescriptionAttribute("Controls the state of the 3 digital output pins.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateDigitalOutputs : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateDigitalOutputs() {
        }
        
        public CreateDigitalOutputs(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body) : 
                base(body) {
        }
        
        public CreateDigitalOutputs(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Request a stream of data.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateStream")]
    [global::System.ComponentModel.DescriptionAttribute("Requests a stream of data.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateStream : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateStream() {
        }
        
        public CreateStream(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body) : 
                base(body) {
        }
        
        public CreateStream(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Query for a list of sensors.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateQueryList")]
    [global::System.ComponentModel.DescriptionAttribute("Queries for a list of sensors.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateQueryList : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList, global:: W3C.Soap.Fault>> {
        
        public CreateQueryList() {
        }
        
        public CreateQueryList(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body) : 
                base(body) {
        }
        
        public CreateQueryList(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Pause or Resume Stream Data.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateStreamPauseResume")]
    [global::System.ComponentModel.DescriptionAttribute("Pauses or resumes data streaming.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateStreamPauseResume : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateStreamPauseResume() {
        }
        
        public CreateStreamPauseResume(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body) : 
                base(body) {
        }
        
        public CreateStreamPauseResume(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Sends an IR Command out pin 23 on the Cargo Bay Connector.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateSendIR")]
    [global::System.ComponentModel.DescriptionAttribute("Sends an IR command.\n(Uses Cargo Bay Connector pin 23.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateSendIR : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateSendIR() {
        }
        
        public CreateSendIR(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body) : 
                base(body) {
        }
        
        public CreateSendIR(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Define an iRobot Create Script.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateDefineScript")]
    [global::System.ComponentModel.DescriptionAttribute("Defines an iRobot Create Script.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateDefineScript : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript, global:: W3C.Soap.Fault>> {
        
        public CreateDefineScript() {
        }
        
        public CreateDefineScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript body) : 
                base(body) {
        }
        
        public CreateDefineScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Play the previously defined iRobot Create script.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreatePlayScript")]
    [global::System.ComponentModel.DescriptionAttribute("Plays the previously defined iRobot Create script.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreatePlayScript : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreatePlayScript() {
        }
        
        public CreatePlayScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body) : 
                base(body) {
        }
        
        public CreatePlayScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Show the previously defined iRobot Create Script.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateShowScript")]
    [global::System.ComponentModel.DescriptionAttribute("Shows the previously defined iRobot Create Script.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateShowScript : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript, global:: W3C.Soap.Fault>> {
        
        public CreateShowScript() {
        }
        
        public CreateShowScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body) : 
                base(body) {
        }
        
        public CreateShowScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Causes Create to wait for the specified time.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateWaitTime")]
    [global::System.ComponentModel.DescriptionAttribute("Causes the Create to wait for the specified time.\n(0.0 - 25.5 seconds)")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateWaitTime : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateWaitTime() {
        }
        
        public CreateWaitTime(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body) : 
                base(body) {
        }
        
        public CreateWaitTime(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Causes Create to wait for the specified distance.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateWaitDistance")]
    [global::System.ComponentModel.DescriptionAttribute("Causes the Create to wait until the wheels travel the specified distance in mm.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateWaitDistance : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateWaitDistance() {
        }
        
        public CreateWaitDistance(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body) : 
                base(body) {
        }
        
        public CreateWaitDistance(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Causes Create to wait until the wheels rotate through the specified angle in degrees.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateWaitAngle")]
    [global::System.ComponentModel.DescriptionAttribute("Causes the Create to wait until the wheels rotate through the specified angle in " +
        "degrees.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateWaitAngle : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateWaitAngle() {
        }
        
        public CreateWaitAngle(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body) : 
                base(body) {
        }
        
        public CreateWaitAngle(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Causes Create to wait until the specified event occurs.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateWaitEvent")]
    [global::System.ComponentModel.DescriptionAttribute("Causes the Create to wait until the specified event occurs.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateWaitEvent : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public CreateWaitEvent() {
        }
        
        public CreateWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body) : 
                base(body) {
        }
        
        public CreateWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            iRobot Create Commands
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("iRobot Create Commands")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent> {
        
        public CreateOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode demoMode) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo(demoMode);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode demoMode, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo(demoMode);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDemo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreatePWMLowSideDrivers(int digitalOut0, int digitalOut1, int digitalOut2) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers(digitalOut0, digitalOut1, digitalOut2);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreatePWMLowSideDrivers(int digitalOut0, int digitalOut1, int digitalOut2, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers(digitalOut0, digitalOut1, digitalOut2);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreatePWMLowSideDrivers(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreatePWMLowSideDrivers(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePWMLowSideDrivers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateDriveDirect(int rightVelocity, int leftVelocity) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect(rightVelocity, leftVelocity);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDriveDirect(int rightVelocity, int leftVelocity, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect(rightVelocity, leftVelocity);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateDigitalOutputs(bool digitalOut0, bool digitalOut2, bool digitalOut1) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs(digitalOut0, digitalOut2, digitalOut1);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDigitalOutputs(bool digitalOut0, bool digitalOut2, bool digitalOut1, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs(digitalOut0, digitalOut2, digitalOut1);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateDigitalOutputs(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDigitalOutputs(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDigitalOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateStream() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateStream(out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateStream(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateStream(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStream(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList, global:: W3C.Soap.Fault> CreateQueryList() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateQueryList(out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList, global:: W3C.Soap.Fault> CreateQueryList(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateQueryList(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateQueryList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateStreamPauseResume(bool streamActive) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume(streamActive);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateStreamPauseResume(bool streamActive, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume(streamActive);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateStreamPauseResume(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateStreamPauseResume(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateStreamPauseResume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateSendIR(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR iRCode) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR(iRCode);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateSendIR(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR iRCode, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR(iRCode);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateSendIR(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateSendIR(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSendIR(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript, global:: W3C.Soap.Fault> CreateDefineScript(byte[] packetData) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript(packetData);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDefineScript(byte[] packetData, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript(packetData);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript, global:: W3C.Soap.Fault> CreateDefineScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDefineScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateDefineScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreatePlayScript(int scriptResponseBytes, int timeoutMs) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript(scriptResponseBytes, timeoutMs);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreatePlayScript(int scriptResponseBytes, int timeoutMs, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript(scriptResponseBytes, timeoutMs);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreatePlayScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreatePlayScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreatePlayScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript, global:: W3C.Soap.Fault> CreateShowScript() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateShowScript(out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript, global:: W3C.Soap.Fault> CreateShowScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateShowScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateShowScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateWaitTime(double seconds) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime(seconds);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateWaitTime(double seconds, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime(seconds);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateWaitTime(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateWaitTime(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateWaitDistance(int distance) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance(distance);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateWaitDistance(int distance, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance(distance);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateWaitDistance(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateWaitDistance(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateWaitAngle(int angle) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle(angle);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateWaitAngle(int angle, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle(angle);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateWaitAngle(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateWaitAngle(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitAngle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent waitEvent) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent(waitEvent);
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent waitEvent, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent(waitEvent);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse CreateWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body, out global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateWaitEvent(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Create Physical Buttons
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="ButtonsCreate")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the Create physical buttons.")]
    [global::System.FlagsAttribute()]
    public enum ButtonsCreate : int {
        
        /// <summary>
        ///            No Buttons Pressed
        ///            </summary>
        Off = 0,
        
        /// <summary>
        ///            Create Play Button
        ///            </summary>
        Play = 1,
        
        /// <summary>
        ///            Not Defined Flag 0x02
        ///            </summary>
        Bit2 = 2,
        
        /// <summary>
        ///            Create Advance Button
        ///            </summary>
        Advance = 4,
        
        /// <summary>
        ///            Not Defined Flag 0x08
        ///            </summary>
        Bit4 = 8,
        
        /// <summary>
        ///            Not Defined Flag 0x10
        ///            </summary>
        Bit5 = 16,
        
        /// <summary>
        ///            Not Defined Flag 0x20
        ///            </summary>
        Bit6 = 32,
        
        /// <summary>
        ///            Not Defined Flag 0x40
        ///            </summary>
        Bit7 = 64,
        
        /// <summary>
        ///            Not Defined Flag 0x80
        ///            </summary>
        Bit8 = 128,
    }
    
    /// <summary>
    ///            Cargo Bay Digital Inputs
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CargoBayDigitalInputs")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the Create digital inputs.")]
    [global::System.FlagsAttribute()]
    public enum CargoBayDigitalInputs : int {
        
        /// <summary>
        ///            Digital Input 0
        ///            </summary>
        Pin17 = 1,
        
        /// <summary>
        ///            Digital Input 1
        ///            </summary>
        Pin5 = 2,
        
        /// <summary>
        ///            Digital Input 2
        ///            </summary>
        Pin18 = 4,
        
        /// <summary>
        ///            Digital Input 3
        ///            </summary>
        Pin6 = 8,
        
        /// <summary>
        ///            Baud Rate Change
        ///            </summary>
        Pin15 = 16,
        
        /// <summary>
        ///            Not Applicable
        ///            </summary>
        NA6 = 32,
        
        /// <summary>
        ///            Not Applicable
        ///            </summary>
        NA7 = 64,
        
        /// <summary>
        ///            Not Applicable
        ///            </summary>
        NA8 = 128,
    }
    
    /// <summary>
    ///            Charging Sources Available
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="ChargingSourcesAvailable")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the robot\'s charging source.")]
    [global::System.FlagsAttribute()]
    public enum ChargingSourcesAvailable : int {
        
        /// <summary>
        ///            Internal Charger
        ///            </summary>
        InternalCharger = 1,
        
        /// <summary>
        ///            Home Base
        ///            </summary>
        HomeBase = 2,
        
        /// <summary>
        ///            Unsupported Charging Source
        ///            </summary>
        UnsupportedBit3 = 4,
        
        /// <summary>
        ///            Unsupported Charging Source
        ///            </summary>
        UnsupportedBit4 = 8,
        
        /// <summary>
        ///            Not Applicable
        ///            </summary>
        NA5 = 16,
        
        /// <summary>
        ///            Not Applicable
        ///            </summary>
        NA6 = 32,
        
        /// <summary>
        ///            Not Applicable
        ///            </summary>
        NA7 = 64,
        
        /// <summary>
        ///            Not Applicable
        ///            </summary>
        NA8 = 128,
    }
    
    /// <summary>
    ///            Create Sensor Packets
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="CreateSensorPacket")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies a Sensor Packet (notification) to be returned.\n(Supported only for Cre" +
        "ate.)")]
    public enum CreateSensorPacket : int {
        
        /// <summary>
        ///            All Roomba Sensors, Pose and Power Packets
        ///            <remarks>26 bytes</remarks></summary>
        AllRoomba = 0,
        
        /// <summary>
        ///            Roomba Bumps, Cliffs, and Walls Return Packet
        ///            <remarks>10 bytes</remarks></summary>
        AllBumpsCliffsAndWalls = 1,
        
        /// <summary>
        ///            Pose Return Packet
        ///            <remarks>6 bytes</remarks></summary>
        AllPose = 2,
        
        /// <summary>
        ///            Power Return Packet
        ///            <remarks>10 bytes</remarks></summary>
        AllPower = 3,
        
        /// <summary>
        ///            Cliff Return Packet
        ///            <remarks>14 bytes</remarks></summary>
        AllCliffDetail = 4,
        
        /// <summary>
        ///            Telemetry Return Packet
        ///            <remarks>12 bytes</remarks></summary>
        AllTelemetry = 5,
        
        /// <summary>
        ///            All Create Sensor data
        ///            <remarks>52 bytes</remarks></summary>
        AllCreate = 6,
        
        /// <summary>
        ///            Bumps And Wheel Drops
        ///            </summary>
        BumpsWheelDrops = 7,
        
        /// <summary>
        ///            Wall
        ///            </summary>
        Wall = 8,
        
        /// <summary>
        ///            Cliff Left
        ///            </summary>
        CliffLeft = 9,
        
        /// <summary>
        ///            Cliff Front Left
        ///            </summary>
        CliffFrontLeft = 10,
        
        /// <summary>
        ///            Cliff Front Right
        ///            </summary>
        CliffFrontRight = 11,
        
        /// <summary>
        ///            Cliff Right
        ///            </summary>
        CliffRight = 12,
        
        /// <summary>
        ///            Virtual Wall
        ///            </summary>
        VirtualWall = 13,
        
        /// <summary>
        ///            Low Side Driver And Wheel Overcurrents
        ///            </summary>
        MotorOvercurrents = 14,
        
        /// <summary>
        ///            Unused15
        ///            </summary>
        Unused15 = 15,
        
        /// <summary>
        ///            Unused16
        ///            </summary>
        Unused16 = 16,
        
        /// <summary>
        ///            Infrared
        ///            </summary>
        Infrared = 17,
        
        /// <summary>
        ///            Buttons
        ///            </summary>
        Buttons = 18,
        
        /// <summary>
        ///            Distance
        ///            </summary>
        Distance = 19,
        
        /// <summary>
        ///            Angle
        ///            </summary>
        Angle = 20,
        
        /// <summary>
        ///            Charging State
        ///            </summary>
        ChargingState = 21,
        
        /// <summary>
        ///            Voltage
        ///            </summary>
        Voltage = 22,
        
        /// <summary>
        ///            Current
        ///            </summary>
        Current = 23,
        
        /// <summary>
        ///            Battery Temperature
        ///            </summary>
        BatteryTemperature = 24,
        
        /// <summary>
        ///            Battery Charge
        ///            </summary>
        BatteryCharge = 25,
        
        /// <summary>
        ///            Battery Capacity
        ///            </summary>
        BatteryCapacity = 26,
        
        /// <summary>
        ///            Wall Signal
        ///            </summary>
        WallSignal = 27,
        
        /// <summary>
        ///            Cliff Left Signal
        ///            </summary>
        CliffLeftSignal = 28,
        
        /// <summary>
        ///            Cliff Front Left Signal
        ///            </summary>
        CliffFrontLeftSignal = 29,
        
        /// <summary>
        ///            Cliff Front Right Signal
        ///            </summary>
        CliffFrontRightSignal = 30,
        
        /// <summary>
        ///            Cliff Right Signal
        ///            </summary>
        CliffRightSignal = 31,
        
        /// <summary>
        ///            Cargo Bay Digital Inputs
        ///            </summary>
        CargoBayDigitalInputs = 32,
        
        /// <summary>
        ///            Cargo Bay Analog Signal
        ///            </summary>
        CargoBayAnalogSignal = 33,
        
        /// <summary>
        ///            Charging Sources Available
        ///            </summary>
        ChargingSourcesAvailable = 34,
        
        /// <summary>
        ///            OI Mode
        ///            </summary>
        OIMode = 35,
        
        /// <summary>
        ///            Song Number
        ///            </summary>
        SongNumber = 36,
        
        /// <summary>
        ///            Song Playing
        ///            </summary>
        SongPlaying = 37,
        
        /// <summary>
        ///            Number Of Stream Packets
        ///            </summary>
        NumberOfStreamPackets = 38,
        
        /// <summary>
        ///            Requested Velocity
        ///            </summary>
        RequestedVelocity = 39,
        
        /// <summary>
        ///            Requested Radius
        ///            </summary>
        RequestedRadius = 40,
        
        /// <summary>
        ///            Requested Right Velocity
        ///            </summary>
        RequestedRightVelocity = 41,
        
        /// <summary>
        ///            Requested Left Velocity
        ///            </summary>
        RequestedLeftVelocity = 42,
    }
    
    /// <summary>
    ///            Starts a Built-in demo on the iRobot Create.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="DemoMode")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a Create built-in demo script.")]
    public enum DemoMode : int {
        
        /// <summary>
        ///            Stops the current demo
        ///            </summary>
        AbortCurrentDemo = -1,
        
        /// <summary>
        ///            Attempt to cover the entire room
        ///            </summary>
        Cover = 0,
        
        /// <summary>
        ///            Cover the entire room, seeking the dock
        ///            </summary>
        CoverAndSeekDock = 1,
        
        /// <summary>
        ///            Cover an area around the starting position by
        ///            spiraling outward, then inward.
        ///            </summary>
        SpotCover = 2,
        
        /// <summary>
        ///            Search for a wall and then travel
        ///            around the circumference of the room.
        ///            </summary>
        Mouse = 3,
        
        /// <summary>
        ///            Drive continuously in a figure 8 pattern.
        ///            </summary>
        DriveFigureEight = 4,
        
        /// <summary>
        ///            Drive forward when pushed from behind.  If Create
        ///            hits an obstacle, it drives away from the obstacle.
        ///            </summary>
        Wimp = 5,
        
        /// <summary>
        ///             Create drives toward an iRobot Virtual Wall as long
        ///             as the back and sides of the virtual wall receiver
        ///             are blinded by black electrical tape.
        ///            
        ///             A Virtual Wall emits infrared signals that Create
        ///             sees with its Omnidirectional Infrared Receiver,
        ///             located on top of the bumper.
        ///            
        ///             If you want Create to home in on a Virtual Wall,
        ///             cover all but a small opening in the front of the
        ///             infrared receiver with black electrical tape.
        ///            
        ///             Create spins to locate a virtual wall, then drives
        ///             toward it.  Once Create hits the wall or another
        ///             obstacle, it stops.
        ///             </summary>
        Home = 6,
        
        /// <summary>
        ///            Idential to the Home demo, except Create drives
        ///            into multiple virtual walls by bumping into one,
        ///            turning around, driving to the next virtual wall,
        ///            bumping into it and turning around to bump into
        ///            the next virtual wall.
        ///            </summary>
        Tag = 7,
        
        /// <summary>
        ///            Create plays the notes of Pachelbel's Canon in
        ///            sequence when cliff sensors are activated.
        ///            </summary>
        Pachelbel = 8,
        
        /// <summary>
        ///            Create plays a note of a chord for each of its four cliff sensors.  Select the chord using the bumper, as follows:
        ///            No bumper: G major
        ///            Right or left bumper: D major 7
        ///            both bumpers (center): C major
        ///            </summary>
        Banjo = 9,
    }
    
    /// <summary>
    ///            Create Scripting Wait Event
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", ElementName="WaitEvent")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the value for a Create Scripting Wait event.")]
    public enum WaitEvent : int {
        
        /// <summary>
        ///            No Event
        ///            </summary>
        None = 0,
        
        /// <summary>
        ///            Wheel Drop
        ///            </summary>
        WheelDrop = 1,
        
        /// <summary>
        ///            No Wheel Drop
        ///            </summary>
        NoWheelDrop = 255,
        
        /// <summary>
        ///            Front Wheel Drop
        ///            </summary>
        FrontWheelDrop = 2,
        
        /// <summary>
        ///            No Front Wheel Drop
        ///            </summary>
        NoFrontWheelDrop = 254,
        
        /// <summary>
        ///            Left Wheel Drop
        ///            </summary>
        LeftWheelDrop = 3,
        
        /// <summary>
        ///            No Left Wheel Drop
        ///            </summary>
        NoLeftWheelDrop = 253,
        
        /// <summary>
        ///            Right Wheel Drop
        ///            </summary>
        RightWheelDrop = 4,
        
        /// <summary>
        ///            No Right Wheel Drop
        ///            </summary>
        NoRightWheelDrop = 252,
        
        /// <summary>
        ///            Bump
        ///            </summary>
        Bump = 5,
        
        /// <summary>
        ///            No Bump
        ///            </summary>
        NoBump = 251,
        
        /// <summary>
        ///            Left Bump
        ///            </summary>
        LeftBump = 6,
        
        /// <summary>
        ///            No Left Bump
        ///            </summary>
        NoLeftBump = 250,
        
        /// <summary>
        ///            Right Bump
        ///            </summary>
        RightBump = 7,
        
        /// <summary>
        ///            No Right Bump
        ///            </summary>
        NoRightBump = 249,
        
        /// <summary>
        ///            Virtual Wall
        ///            </summary>
        VirtualWall = 8,
        
        /// <summary>
        ///            No Virtual Wall
        ///            </summary>
        NoVirtualWall = 248,
        
        /// <summary>
        ///            Wall
        ///            </summary>
        Wall = 9,
        
        /// <summary>
        ///            No Wall
        ///            </summary>
        NoWall = 247,
        
        /// <summary>
        ///            Cliff
        ///            </summary>
        Cliff = 10,
        
        /// <summary>
        ///            No Cliff
        ///            </summary>
        NoCliff = 246,
        
        /// <summary>
        ///            Left Cliff
        ///            </summary>
        LeftCliff = 11,
        
        /// <summary>
        ///            No Left Cliff
        ///            </summary>
        NoLeftCliff = 245,
        
        /// <summary>
        ///            Front Left Cliff
        ///            </summary>
        FrontLeftCliff = 12,
        
        /// <summary>
        ///            No Front Left Cliff
        ///            </summary>
        NoFrontLeftCliff = 244,
        
        /// <summary>
        ///            Front Right Cliff
        ///            </summary>
        FrontRightCliff = 13,
        
        /// <summary>
        ///            No Front Right Cliff
        ///            </summary>
        NoFrontRightCliff = 243,
        
        /// <summary>
        ///            Right Cliff
        ///            </summary>
        RightCliff = 14,
        
        /// <summary>
        ///            No Right Cliff
        ///            </summary>
        NoRightCliff = 242,
        
        /// <summary>
        ///            Home Base
        ///            </summary>
        HomeBase = 15,
        
        /// <summary>
        ///            No Home Base
        ///            </summary>
        NoHomeBase = 241,
        
        /// <summary>
        ///            Advance Button
        ///            </summary>
        AdvanceButton = 16,
        
        /// <summary>
        ///            No Advance Button
        ///            </summary>
        NoAdvanceButton = 240,
        
        /// <summary>
        ///            Play Button
        ///            </summary>
        PlayButton = 17,
        
        /// <summary>
        ///            No Play Button
        ///            </summary>
        NoPlayButton = 239,
        
        /// <summary>
        ///            Digital Input 0
        ///            </summary>
        DigitalInput0 = 18,
        
        /// <summary>
        ///            No Digital Input 0
        ///            </summary>
        NoDigitalInput0 = 238,
        
        /// <summary>
        ///            Digital Input 1
        ///            </summary>
        DigitalInput1 = 19,
        
        /// <summary>
        ///            No Digital Input 1
        ///            </summary>
        NoDigitalInput1 = 237,
        
        /// <summary>
        ///            Digital Input 2
        ///            </summary>
        DigitalInput2 = 20,
        
        /// <summary>
        ///            No Digital Input 2
        ///            </summary>
        NoDigitalInput2 = 236,
        
        /// <summary>
        ///            Digital Input 3
        ///            </summary>
        DigitalInput3 = 21,
        
        /// <summary>
        ///            No Digital Input 3
        ///            </summary>
        NoDigitalInput3 = 235,
        
        /// <summary>
        ///            Mode is Passive
        ///            </summary>
        ModePassive = 22,
        
        /// <summary>
        ///            Mode is not Passive
        ///            </summary>
        NoModePassive = 234,
    }
    
    /// <summary>
    ///            Create Service Contract
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to additional operations for the iRobot Create.\n(Partner with the" +
        " \'iRobot� Create / Roomba\' service.)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) iRobot� Create Supplemental")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.CreateOperations = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.CreateOperations, "http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", "CreateOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateOperations CreateOperations;
    }
}
namespace Microsoft.Robotics.Services.IRobot.Roomba.Proxy {
    
    
    /// <summary>
    ///            Current state of the Roomba
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the state of the iRobot service.")]
    public class RoombaState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RoombaState() {
        }
        
        private string _Name;
        
        /// <summary>
        ///            The robot Name
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a user friendly name for this robot.")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::System.DateTime _FirmwareDate;
        
        /// <summary>
        ///            The Firmware Date
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the date of the robot\'s firmware.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime FirmwareDate {
            get {
                return this._FirmwareDate;
            }
            set {
                this._FirmwareDate = value;
            }
        }
        
        private int _SerialPort;
        
        /// <summary>
        ///            Serial Port connection
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the serial port used for the connection to the robot.")]
        public int SerialPort {
            get {
                return this._SerialPort;
            }
            set {
                this._SerialPort = value;
            }
        }
        
        private int _BaudRate;
        
        /// <summary>
        ///            Connection Baud Rate
        ///            <remarks>0 uses the default Baud rate</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the baud rate for connection.\n (0 - default)")]
        public int BaudRate {
            get {
                return this._BaudRate;
            }
            set {
                this._BaudRate = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotModel _IRobotModel;
        
        /// <summary>
        ///            The type of iRobot Create or Roomba
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The type of robot model.\n(Create or Roomba)")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotModel IRobotModel {
            get {
                return this._IRobotModel;
            }
            set {
                this._IRobotModel = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.iRobotConnectionType _ConnectionType;
        
        /// <summary>
        ///            The connection type
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies how the robot is connected with the service host.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.iRobotConnectionType ConnectionType {
            get {
                return this._ConnectionType;
            }
            set {
                this._ConnectionType = value;
            }
        }
        
        private bool _StopOnResync;
        
        /// <summary>
        ///            Stop Motors when sensor data is garbled
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies to stop when sensor data is scrambled and attempt to resync communicati" +
            "ons.")]
        public bool StopOnResync {
            get {
                return this._StopOnResync;
            }
            set {
                this._StopOnResync = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _Mode;
        
        /// <summary>
        ///            SCI Mode
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the robot\'s current operational mode.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode Mode {
            get {
                return this._Mode;
            }
            set {
                this._Mode = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _MaintainMode;
        
        /// <summary>
        ///            The SCI Mode to be maintained
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies whether to maintain the operational mode.\n(Passive, Safe, or Full; NotS" +
            "pecified turns it off.)")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode MaintainMode {
            get {
                return this._MaintainMode;
            }
            set {
                this._MaintainMode = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors _Sensors;
        
        /// <summary>
        ///             Sensors
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the robot\'s set of sensors.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors Sensors {
            get {
                return this._Sensors;
            }
            set {
                this._Sensors = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose _Pose;
        
        /// <summary>
        ///            Pose
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the position and orientation of the robot.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose Pose {
            get {
                return this._Pose;
            }
            set {
                this._Pose = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower _Power;
        
        /// <summary>
        ///            Power
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the robot\'s current power reading.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower Power {
            get {
                return this._Power;
            }
            set {
                this._Power = value;
            }
        }
        
        private global::System.DateTime _LastUpdated;
        
        /// <summary>
        ///            Date last updated
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the most current state update.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime LastUpdated {
            get {
                return this._LastUpdated;
            }
            set {
                this._LastUpdated = value;
            }
        }
        
        private int _PollingInterval;
        
        /// <summary>
        ///            Polling interval in ms
        ///            <remarks>
        ///               -1 = no polling (less than zero)
        ///            0-199 = default for Create/Roomba
        ///            200-N = ms between polling
        ///            </remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the polling interval (in ms).\n(0 = default, -1 = Off, > 0 = ms)")]
        public int PollingInterval {
            get {
                return this._PollingInterval;
            }
            set {
                this._PollingInterval = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong> _SongDefinitions;
        
        /// <summary>
        ///            Song Definitions
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a set of song definitions.")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong> SongDefinitions {
            get {
                return this._SongDefinitions;
            }
            set {
                this._SongDefinitions = value;
            }
        }
        
        private bool _WaitForConnect;
        
        /// <summary>
        ///            Wait for Connect before establishing a connection with the iRobot.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies to pause briefly when establishing a connection with the robot.")]
        public bool WaitForConnect {
            get {
                return this._WaitForConnect;
            }
            set {
                this._WaitForConnect = value;
            }
        }
        
        private byte[] _RobotImage;
        
        /// <summary>
        ///            An Image which represents this iRobot.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies an image that represents the robot.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public byte[] RobotImage {
            get {
                return this._RobotImage;
            }
            set {
                this._RobotImage = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail _CliffDetail;
        
        /// <summary>
        ///            iRobot Create Cliff Detail
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies Create cliff sensor data.\n(Supported only for Create.)")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail CliffDetail {
            get {
                return this._CliffDetail;
            }
            set {
                this._CliffDetail = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry _Telemetry;
        
        /// <summary>
        ///            iRobot Create Telemetry
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies Create telemetry.\n(Supported only for Create.)")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry Telemetry {
            get {
                return this._Telemetry;
            }
            set {
                this._Telemetry = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket> _CreateNotifications;
        
        /// <summary>
        ///            Notifications which will be requested
        ///            when connecting to an iRobot Create
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the set of notifications to be returned.\n(Supported only for Create.)")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket> CreateNotifications {
            get {
                return this._CreateNotifications;
            }
            set {
                this._CreateNotifications = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RoombaState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState)(target));
            typedTarget._Name = this._Name;
            typedTarget._FirmwareDate = this._FirmwareDate;
            typedTarget._SerialPort = this._SerialPort;
            typedTarget._BaudRate = this._BaudRate;
            typedTarget._IRobotModel = this._IRobotModel;
            typedTarget._ConnectionType = this._ConnectionType;
            typedTarget._StopOnResync = this._StopOnResync;
            typedTarget._Mode = this._Mode;
            typedTarget._MaintainMode = this._MaintainMode;
            if ((this._Sensors != null)) {
                global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors tmp = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Sensors)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Sensors = tmp;
            }
            if ((this._Pose != null)) {
                global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose tmp0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Pose)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._Pose = tmp0;
            }
            if ((this._Power != null)) {
                global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower tmp1 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Power)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._Power = tmp1;
            }
            typedTarget._LastUpdated = this._LastUpdated;
            typedTarget._PollingInterval = this._PollingInterval;
            if ((this._SongDefinitions != null)) {
                int count = this._SongDefinitions.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong> tmp2 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong tmp3 = default(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong);
                    if ((this._SongDefinitions[index] != null)) {
                        global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong tmp4 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SongDefinitions[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                        tmp3 = tmp4;
                    }
                    tmp2.Add(tmp3);
                }
                typedTarget._SongDefinitions = tmp2;
            }
            typedTarget._WaitForConnect = this._WaitForConnect;
            if ((this._RobotImage != null)) {
                int count0 = this._RobotImage.Length;
                byte[] tmp5 = new byte[count0];
                global::System.Buffer.BlockCopy(this._RobotImage, 0, tmp5, 0, global::System.Buffer.ByteLength(this._RobotImage));
                typedTarget._RobotImage = tmp5;
            }
            if ((this._CliffDetail != null)) {
                global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail tmp6 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
                ((Microsoft.Dss.Core.IDssSerializable)(this._CliffDetail)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp6)));
                typedTarget._CliffDetail = tmp6;
            }
            if ((this._Telemetry != null)) {
                global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry tmp7 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Telemetry)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp7)));
                typedTarget._Telemetry = tmp7;
            }
            if ((this._CreateNotifications != null)) {
                int count1 = this._CreateNotifications.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket> tmp8 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket>(count1);
                tmp8.AddRange(this._CreateNotifications);
                typedTarget._CreateNotifications = tmp8;
            }
        }
        
        /// <summary>
        ///Clones RoombaState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RoombaState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._FirmwareDate, writer);
            writer.Write(this._SerialPort);
            writer.Write(this._BaudRate);
            writer.Write(((int)(this._IRobotModel)));
            writer.Write(((int)(this._ConnectionType)));
            writer.Write(this._StopOnResync);
            writer.Write(((int)(this._Mode)));
            writer.Write(((int)(this._MaintainMode)));
            if ((this._Sensors == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Sensors)).Serialize(writer);
            }
            if ((this._Pose == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Pose)).Serialize(writer);
            }
            if ((this._Power == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Power)).Serialize(writer);
            }
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._LastUpdated, writer);
            writer.Write(this._PollingInterval);
            if ((this._SongDefinitions == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SongDefinitions.Count);
                for (int indexSongDefinitions = 0; (indexSongDefinitions < this._SongDefinitions.Count); indexSongDefinitions = (indexSongDefinitions + 1)) {
                    if ((this._SongDefinitions[indexSongDefinitions] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SongDefinitions[indexSongDefinitions])).Serialize(writer);
                    }
                }
            }
            writer.Write(this._WaitForConnect);
            if ((this._RobotImage == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._RobotImage.Length);
                writer.Write(this._RobotImage);
            }
            if ((this._CliffDetail == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._CliffDetail)).Serialize(writer);
            }
            if ((this._Telemetry == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Telemetry)).Serialize(writer);
            }
            if ((this._CreateNotifications == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._CreateNotifications.Count);
                for (int indexCreateNotifications = 0; (indexCreateNotifications < this._CreateNotifications.Count); indexCreateNotifications = (indexCreateNotifications + 1)) {
                    writer.Write(((int)(this._CreateNotifications[indexCreateNotifications])));
                }
            }
        }
        
        /// <summary>
        ///Deserializes RoombaState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RoombaState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._FirmwareDate = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._SerialPort = reader.ReadInt32();
            this._BaudRate = reader.ReadInt32();
            this._IRobotModel = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotModel)(reader.ReadInt32()));
            this._ConnectionType = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.iRobotConnectionType)(reader.ReadInt32()));
            this._StopOnResync = reader.ReadBoolean();
            this._Mode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            this._MaintainMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            if ((reader.ReadByte() != 0)) {
                this._Sensors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Pose = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Power = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower())).Deserialize(reader)));
            }
            this._LastUpdated = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._PollingInterval = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                int count2 = reader.ReadInt32();
                this._SongDefinitions = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong>(count2);
                for (int index0 = 0; (index0 < count2); index0 = (index0 + 1)) {
                    this._SongDefinitions.Add(default(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong));
                    if ((reader.ReadByte() != 0)) {
                        this._SongDefinitions[index0] = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong())).Deserialize(reader)));
                    }
                }
            }
            this._WaitForConnect = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                int count3 = reader.ReadInt32();
                this._RobotImage = reader.ReadBytes(count3);
            }
            if ((reader.ReadByte() != 0)) {
                this._CliffDetail = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Telemetry = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int count4 = reader.ReadInt32();
                this._CreateNotifications = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket>(count4);
                for (int index1 = 0; (index1 < count4); index1 = (index1 + 1)) {
                    this._CreateNotifications.Add(default(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket));
                    this._CreateNotifications[index1] = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket)(reader.ReadInt32()));
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Roomba Sensor Notifications
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="ReturnSensors")]
    [global::System.ComponentModel.DescriptionAttribute("Roomba Sensor Notifications")]
    public class ReturnSensors : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnSensors() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.BumpsWheeldrops _BumpsWheeldrops;
        
        /// <summary>
        ///            The state of the bump (0 = no bump, 1 = bump) and wheeldrop
        ///            sensors (0 = wheel up, 1 = wheel dropped) are sent as individual
        ///            bits.
        ///            <remarks>Some robots do not report the three wheel drops separately. Instead,
        ///            if any of the three wheels drops, all three wheel-drop bits will be set. You
        ///            can tell which kind of robot you have by examining the serial number
        ///            inside the battery compartment. Wheel drops are separate only if there is
        ///            an �E� in the serial number.</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the bump and wheel drop sensors.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.BumpsWheeldrops BumpsWheeldrops {
            get {
                return this._BumpsWheeldrops;
            }
            set {
                this._BumpsWheeldrops = value;
            }
        }
        
        private bool _Wall;
        
        /// <summary>
        ///            The state of the wall sensor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the wall sensor.")]
        public bool Wall {
            get {
                return this._Wall;
            }
            set {
                this._Wall = value;
            }
        }
        
        private bool _CliffLeft;
        
        /// <summary>
        ///            The state of the cliff sensor on the left side of Roomba.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the left side cliff sensor.")]
        public bool CliffLeft {
            get {
                return this._CliffLeft;
            }
            set {
                this._CliffLeft = value;
            }
        }
        
        private bool _CliffFrontLeft;
        
        /// <summary>
        ///            The state of the cliff sensor on the front left side of Roomba.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the front left cliff sensor.")]
        public bool CliffFrontLeft {
            get {
                return this._CliffFrontLeft;
            }
            set {
                this._CliffFrontLeft = value;
            }
        }
        
        private bool _CliffFrontRight;
        
        /// <summary>
        ///            The state of the cliff sensor on the front right side of Roomba.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the front right cliff sensor.")]
        public bool CliffFrontRight {
            get {
                return this._CliffFrontRight;
            }
            set {
                this._CliffFrontRight = value;
            }
        }
        
        private bool _CliffRight;
        
        /// <summary>
        ///            The state of the cliff sensor on the right side of Roomba.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the right side cliff sensor.")]
        public bool CliffRight {
            get {
                return this._CliffRight;
            }
            set {
                this._CliffRight = value;
            }
        }
        
        private bool _VirtualWall;
        
        /// <summary>
        ///            The state of the virtual wall detector.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the virtual wall detector state.")]
        public bool VirtualWall {
            get {
                return this._VirtualWall;
            }
            set {
                this._VirtualWall = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.MotorOvercurrents _MotorOvercurrents;
        
        /// <summary>
        ///            The state of the five motors� overcurrent sensors.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the five motors\' overcurrent sensors.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.MotorOvercurrents MotorOvercurrents {
            get {
                return this._MotorOvercurrents;
            }
            set {
                this._MotorOvercurrents = value;
            }
        }
        
        private int _DirtDetectorLeft;
        
        /// <summary>
        ///            The current dirt detection level of the left side dirt detector
        ///            is sent as a one byte value. A value of 0 indicates no dirt is
        ///            detected. Higher values indicate higher levels of dirt detected.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the level of the left dirt detection sensor.\n(0 = no dirt detected)")]
        public int DirtDetectorLeft {
            get {
                return this._DirtDetectorLeft;
            }
            set {
                this._DirtDetectorLeft = value;
            }
        }
        
        private int _DirtDetectorRight;
        
        /// <summary>
        ///            The current dirt detection level of the right side dirt detector
        ///            is sent as a one byte value. A value of 0 indicates no dirt is
        ///            detected. Higher values indicate higher levels of dirt detected.
        ///            <remarks>Some robots don�t have a right dirt detector. You can tell by removing
        ///            the brushes. The dirt detectors are metallic disks. For robots with no right
        ///            dirt detector this byte is always 0.</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the level of the right dirt detection sensor.\n(0 = no dirt detected)")]
        public int DirtDetectorRight {
            get {
                return this._DirtDetectorRight;
            }
            set {
                this._DirtDetectorRight = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnSensors to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors)(target));
            typedTarget._BumpsWheeldrops = this._BumpsWheeldrops;
            typedTarget._Wall = this._Wall;
            typedTarget._CliffLeft = this._CliffLeft;
            typedTarget._CliffFrontLeft = this._CliffFrontLeft;
            typedTarget._CliffFrontRight = this._CliffFrontRight;
            typedTarget._CliffRight = this._CliffRight;
            typedTarget._VirtualWall = this._VirtualWall;
            typedTarget._MotorOvercurrents = this._MotorOvercurrents;
            typedTarget._DirtDetectorLeft = this._DirtDetectorLeft;
            typedTarget._DirtDetectorRight = this._DirtDetectorRight;
        }
        
        /// <summary>
        ///Clones ReturnSensors
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnSensors to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._BumpsWheeldrops)));
            writer.Write(this._Wall);
            writer.Write(this._CliffLeft);
            writer.Write(this._CliffFrontLeft);
            writer.Write(this._CliffFrontRight);
            writer.Write(this._CliffRight);
            writer.Write(this._VirtualWall);
            writer.Write(((int)(this._MotorOvercurrents)));
            writer.Write(this._DirtDetectorLeft);
            writer.Write(this._DirtDetectorRight);
        }
        
        /// <summary>
        ///Deserializes ReturnSensors
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnSensors</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._BumpsWheeldrops = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.BumpsWheeldrops)(reader.ReadInt32()));
            this._Wall = reader.ReadBoolean();
            this._CliffLeft = reader.ReadBoolean();
            this._CliffFrontLeft = reader.ReadBoolean();
            this._CliffFrontRight = reader.ReadBoolean();
            this._CliffRight = reader.ReadBoolean();
            this._VirtualWall = reader.ReadBoolean();
            this._MotorOvercurrents = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.MotorOvercurrents)(reader.ReadInt32()));
            this._DirtDetectorLeft = reader.ReadInt32();
            this._DirtDetectorRight = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            The standard return package in which all return messages inherit from
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaReturnPacket")]
    [global::System.ComponentModel.DescriptionAttribute("The standard return package in which all return messages inherit from")]
    public class RoombaReturnPacket : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RoombaReturnPacket() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _RoombaMode;
        
        /// <summary>
        ///            The current mode of the Roomba after the command
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current Roomba mode.")]
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode RoombaMode {
            get {
                return this._RoombaMode;
            }
            set {
                this._RoombaMode = value;
            }
        }
        
        private global::System.DateTime _Timestamp;
        
        /// <summary>
        ///            The timestamp when the data was received.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time the data was received (ms).")]
        public global::System.DateTime Timestamp {
            get {
                return this._Timestamp;
            }
            set {
                this._Timestamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RoombaReturnPacket to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket)(target));
            typedTarget._RoombaMode = this._RoombaMode;
            typedTarget._Timestamp = this._Timestamp;
        }
        
        /// <summary>
        ///Clones RoombaReturnPacket
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RoombaReturnPacket to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._RoombaMode)));
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Timestamp, writer);
        }
        
        /// <summary>
        ///Deserializes RoombaReturnPacket
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RoombaReturnPacket</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            this._Timestamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            The base Roomba command format in which all commands inherit from
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaCommand")]
    [global::System.ComponentModel.DescriptionAttribute("The base Roomba command format in which all commands inherit from")]
    public class RoombaCommand : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RoombaCommand() {
        }
        
        /// <summary>
        ///Copies the data member values of the current RoombaCommand to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand)(target));
        }
        
        /// <summary>
        ///Clones RoombaCommand
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RoombaCommand to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes RoombaCommand
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RoombaCommand</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Roomba Pose Notifications
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="ReturnPose")]
    [global::System.ComponentModel.DescriptionAttribute("Roomba Pose Notifications")]
    public class ReturnPose : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnPose() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR _RemoteControlCommand;
        
        /// <summary>
        ///            The command number of the infrared command currently
        ///            being received by Roomba. A value of 255 indicates that no
        ///            remote control command is being received. See Roomba remote
        ///            control documentation for a description of the command values.
        ///            <remarks>Range: 0 � 255 (with some values unused)</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the command number received from the infrared remote control; range 0 " +
            "- 255.\n  255 = no infrared remote control command received.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR RemoteControlCommand {
            get {
                return this._RemoteControlCommand;
            }
            set {
                this._RemoteControlCommand = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ButtonsRoomba _ButtonsRoomba;
        
        /// <summary>
        ///            The state of the Roomba buttons.
        ///            </summary>
        /// <remarks>Roomba and Create share the same storage for Buttons, but the values are interpreted slightly different.</remarks>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the Roomba command buttons.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ButtonsRoomba ButtonsRoomba {
            get {
                return this._ButtonsRoomba;
            }
            set {
                this._ButtonsRoomba = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ButtonsCreate _ButtonsCreate;
        
        /// <summary>
        ///            The state of the Create buttons.
        ///            </summary>
        /// <remarks>Roomba and Create share the same storage for Buttons, but the values are interpreted slightly different.</remarks>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the Create command buttons.")]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ButtonsCreate ButtonsCreate {
            get {
                return this._ButtonsCreate;
            }
            set {
                this._ButtonsCreate = value;
            }
        }
        
        private int _Distance;
        
        /// <summary>
        ///            The distance that Roomba has traveled in millimeters since the
        ///            distance it was last requested. This is the same as the sum of
        ///            the distance traveled by both wheels divided by two. Positive
        ///            values indicate travel in the forward direction; negative in the
        ///            reverse direction. If the value is not polled frequently enough, it
        ///            will be capped at its minimum or maximum.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the distance traveled (in mm) since last requested.\n(Right wheel dista" +
            "nce + Left wheel distance)/2\nPositive values = forward, negative values = revers" +
            "e")]
        public int Distance {
            get {
                return this._Distance;
            }
            set {
                this._Distance = value;
            }
        }
        
        private int _Angle;
        
        /// <summary>
        ///            The angle that Roomba has turned through since the angle was
        ///            last requested. The angle is expressed as the difference in
        ///            the distance traveled by Roomba�s two wheels in millimeters,
        ///            specifically the right wheel distance minus the left wheel
        ///            distance, divided by two.
        ///            <example>This makes counter-clockwise angles
        ///            positive and clockwise angles negative. This can be used to
        ///            directly calculate the angle that Roomba has turned through
        ///            since the last request. Since the distance between Roomba�s
        ///            wheels is 258mm, the equations for calculating the angles in
        ///            familiar units are:
        ///            Angle in radians = (2 * difference) / 258
        ///            Angle in degrees = (360 * difference) / (258 * Pi).
        ///            </example><remarks>If the value is not polled frequently enough, it will
        ///            be capped at its minimum or maximum. Reported angle and
        ///            distance may not be accurate. Roomba measures these by detecting
        ///            its wheel revolutions. If for example, the wheels slip on the
        ///            floor, the reported angle of distance will be greater than the
        ///            actual angle or distance.</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the most recent angle (in mm) since last requested.\n(Right wheel dista" +
            "nce - Left wheel distance)/2\nPositive values = counter-clockwise, negative value" +
            "s = clockwise")]
        public int Angle {
            get {
                return this._Angle;
            }
            set {
                this._Angle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnPose to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose)(target));
            typedTarget._RemoteControlCommand = this._RemoteControlCommand;
            typedTarget._ButtonsRoomba = this._ButtonsRoomba;
            typedTarget._ButtonsCreate = this._ButtonsCreate;
            typedTarget._Distance = this._Distance;
            typedTarget._Angle = this._Angle;
        }
        
        /// <summary>
        ///Clones ReturnPose
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnPose to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._RemoteControlCommand)));
            writer.Write(((int)(this._ButtonsRoomba)));
            writer.Write(((int)(this._ButtonsCreate)));
            writer.Write(this._Distance);
            writer.Write(this._Angle);
        }
        
        /// <summary>
        ///Deserializes ReturnPose
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnPose</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._RemoteControlCommand = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR)(reader.ReadInt32()));
            this._ButtonsRoomba = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ButtonsRoomba)(reader.ReadInt32()));
            this._ButtonsCreate = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ButtonsCreate)(reader.ReadInt32()));
            this._Distance = reader.ReadInt32();
            this._Angle = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Roomba Power Notifications
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="ReturnPower")]
    [global::System.ComponentModel.DescriptionAttribute("Roomba Power Notifications")]
    public class ReturnPower : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnPower() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ChargingState _ChargingState;
        
        /// <summary>
        ///            A code indicating the current charging state of Roomba.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the battery charging state.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ChargingState ChargingState {
            get {
                return this._ChargingState;
            }
            set {
                this._ChargingState = value;
            }
        }
        
        private int _Voltage;
        
        /// <summary>
        ///            The voltage of Roomba's battery in millivolts (mV)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current voltage of the battery (in mV).")]
        public int Voltage {
            get {
                return this._Voltage;
            }
            set {
                this._Voltage = value;
            }
        }
        
        private int _Current;
        
        /// <summary>
        ///            The current in milliamps (mA) flowing into or out of Roomba�s
        ///            battery. Negative currents indicate current is flowing out of the
        ///            battery, as during normal running. Positive currents indicate
        ///            current is flowing into the battery, as during charging.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current flowing in or out the battery (mV).")]
        public int Current {
            get {
                return this._Current;
            }
            set {
                this._Current = value;
            }
        }
        
        private int _Temperature;
        
        /// <summary>
        ///            The temperature of Roomba�s battery in degrees Celsius.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current temperature of the battery (degrees Celsius).")]
        public int Temperature {
            get {
                return this._Temperature;
            }
            set {
                this._Temperature = value;
            }
        }
        
        private int _Charge;
        
        /// <summary>
        ///            The current charge of Roomba�s battery in milliamp-hours (mAh).
        ///            The charge value decreases as the battery is depleted during
        ///            running and increases when the battery is charged.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current charge of the battery (mAh).")]
        public int Charge {
            get {
                return this._Charge;
            }
            set {
                this._Charge = value;
            }
        }
        
        private int _Capacity;
        
        /// <summary>
        ///            The estimated charge capacity of Roomba�s battery. When the
        ///            Charge value reaches the Capacity value, the battery is fully
        ///            charged.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the estimated charge capacity of the battery.")]
        public int Capacity {
            get {
                return this._Capacity;
            }
            set {
                this._Capacity = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnPower to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower)(target));
            typedTarget._ChargingState = this._ChargingState;
            typedTarget._Voltage = this._Voltage;
            typedTarget._Current = this._Current;
            typedTarget._Temperature = this._Temperature;
            typedTarget._Charge = this._Charge;
            typedTarget._Capacity = this._Capacity;
        }
        
        /// <summary>
        ///Clones ReturnPower
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnPower to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._ChargingState)));
            writer.Write(this._Voltage);
            writer.Write(this._Current);
            writer.Write(this._Temperature);
            writer.Write(this._Charge);
            writer.Write(this._Capacity);
        }
        
        /// <summary>
        ///Deserializes ReturnPower
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnPower</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._ChargingState = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ChargingState)(reader.ReadInt32()));
            this._Voltage = reader.ReadInt32();
            this._Current = reader.ReadInt32();
            this._Temperature = reader.ReadInt32();
            this._Charge = reader.ReadInt32();
            this._Capacity = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Specifies a song to the SCI to be played later.
    ///            <remarks>Each song is
    ///            associated with a song number which the Play command uses
    ///            to select the song to play. Users can specify up to 16 songs
    ///            with up to 16 notes per song. Each note is specified by a note
    ///            number using MIDI note definitions and a duration specified
    ///            in fractions of a second. The number of data bytes varies
    ///            depending on the length of the song specified. A one note song
    ///            is specified by four data bytes. For each additional note, two data
    ///            bytes must be added. </remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdDefineSong")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a song definition.")]
    public class CmdDefineSong : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdDefineSong() {
        }
        
        public CmdDefineSong(int songNumber, global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> notes) {
            this._SongNumber = songNumber;
            this._Notes = notes;
        }
        
        private int _SongNumber;
        
        /// <summary>
        ///            The predefined song number (1-16)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the number for a pre-defined song (1-16).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int SongNumber {
            get {
                return this._SongNumber;
            }
            set {
                this._SongNumber = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> _Notes;
        
        /// <summary>
        ///            A list of notes which compose a short song.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a set of notes for a song.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> Notes {
            get {
                return this._Notes;
            }
            set {
                this._Notes = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdDefineSong to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong)(target));
            typedTarget._SongNumber = this._SongNumber;
            if ((this._Notes != null)) {
                int count = this._Notes.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote tmp0 = default(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote);
                    if ((this._Notes[index] != null)) {
                        global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote tmp1 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Notes[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Notes = tmp;
            }
        }
        
        /// <summary>
        ///Clones CmdDefineSong
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdDefineSong to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._SongNumber);
            if ((this._Notes == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Notes.Count);
                for (int indexNotes = 0; (indexNotes < this._Notes.Count); indexNotes = (indexNotes + 1)) {
                    if ((this._Notes[indexNotes] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Notes[indexNotes])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes CmdDefineSong
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdDefineSong</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._SongNumber = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Notes = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Notes.Add(default(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote));
                    if ((reader.ReadByte() != 0)) {
                        this._Notes[index0] = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Defines a note with a tone and duration.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaNote")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a song note (using tone and duration).")]
    public class RoombaNote : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RoombaNote() {
        }
        
        public RoombaNote(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaFrequency tone, int duration) {
            this._Tone = tone;
            this._Duration = duration;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaFrequency _Tone;
        
        /// <summary>
        ///            The note tone or frequency.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the note\'s tone (frequency).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaFrequency Tone {
            get {
                return this._Tone;
            }
            set {
                this._Tone = value;
            }
        }
        
        private int _Duration;
        
        /// <summary>
        ///            Duration in 1/64 second increments
        ///            <remarks>Range 0 - 255</remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The note\'s duration (in 1/64 second increments).\n(Range = 0 - 255)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int Duration {
            get {
                return this._Duration;
            }
            set {
                this._Duration = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RoombaNote to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote)(target));
            typedTarget._Tone = this._Tone;
            typedTarget._Duration = this._Duration;
        }
        
        /// <summary>
        ///Clones RoombaNote
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RoombaNote to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._Tone)));
            writer.Write(this._Duration);
        }
        
        /// <summary>
        ///Deserializes RoombaNote
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RoombaNote</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Tone = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaFrequency)(reader.ReadInt32()));
            this._Duration = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Notification of All Sensors.
    ///            Roomba: Sensors, Pose, Power
    ///            Create: Sensors, Pose, Power, CliffDetail, and Telemetry
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="ReturnAll")]
    [global::System.ComponentModel.DescriptionAttribute("Notification of All Sensors. Roomba: Sensors, Pose, Power Create: Sensors, Pose, " +
        "Power, CliffDetail, and Telemetry")]
    public class ReturnAll : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnAll() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _RoombaMode;
        
        /// <summary>
        ///            Set the RoombaMode on the ReturnAll packet and all sub-packets.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current Roomba value.")]
        public override global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode RoombaMode {
            get {
                return this._RoombaMode;
            }
            set {
                this._RoombaMode = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors _Sensors;
        
        /// <summary>
        ///            Roomba Sensors
        ///            </summary>
        /// <returns></returns>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the set of sensors.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors Sensors {
            get {
                return this._Sensors;
            }
            set {
                this._Sensors = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose _Pose;
        
        /// <summary>
        ///            Roomba Pose
        ///            </summary>
        /// <returns></returns>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the position and orientation of the robot.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose Pose {
            get {
                return this._Pose;
            }
            set {
                this._Pose = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower _Power;
        
        /// <summary>
        ///            Roomba Power
        ///            </summary>
        /// <returns></returns>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current power setting.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower Power {
            get {
                return this._Power;
            }
            set {
                this._Power = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail _CliffDetail;
        
        /// <summary>
        ///            iRobot Create Cliff Detail
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("iRobot Create Cliff Detail")]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail CliffDetail {
            get {
                return this._CliffDetail;
            }
            set {
                this._CliffDetail = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry _Telemetry;
        
        /// <summary>
        ///            iRobot Create Telemetry
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("iRobot Create Telemetry")]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry Telemetry {
            get {
                return this._Telemetry;
            }
            set {
                this._Telemetry = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnAll to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll)(target));
            typedTarget._RoombaMode = this._RoombaMode;
            if ((this._Sensors != null)) {
                global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors tmp = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Sensors)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Sensors = tmp;
            }
            if ((this._Pose != null)) {
                global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose tmp0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Pose)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._Pose = tmp0;
            }
            if ((this._Power != null)) {
                global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower tmp1 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Power)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._Power = tmp1;
            }
            if ((this._CliffDetail != null)) {
                global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail tmp2 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
                ((Microsoft.Dss.Core.IDssSerializable)(this._CliffDetail)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._CliffDetail = tmp2;
            }
            if ((this._Telemetry != null)) {
                global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry tmp3 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Telemetry)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                typedTarget._Telemetry = tmp3;
            }
        }
        
        /// <summary>
        ///Clones ReturnAll
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnAll to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._RoombaMode)));
            if ((this._Sensors == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Sensors)).Serialize(writer);
            }
            if ((this._Pose == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Pose)).Serialize(writer);
            }
            if ((this._Power == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Power)).Serialize(writer);
            }
            if ((this._CliffDetail == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._CliffDetail)).Serialize(writer);
            }
            if ((this._Telemetry == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Telemetry)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes ReturnAll
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnAll</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            if ((reader.ReadByte() != 0)) {
                this._Sensors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Pose = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Power = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._CliffDetail = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Telemetry = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Notification of Roomba Mode changes
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="ReturnMode")]
    [global::System.ComponentModel.DescriptionAttribute("Notification of Roomba Mode changes")]
    public class ReturnMode : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnMode() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _RoombaMode;
        
        /// <summary>
        ///            The current mode of the Roomba
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the current operating mode.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode RoombaMode {
            get {
                return this._RoombaMode;
            }
            set {
                this._RoombaMode = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotModel _IRobotModel;
        
        /// <summary>
        ///            The iRobot hardware model
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the iRobot robot model.")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotModel IRobotModel {
            get {
                return this._IRobotModel;
            }
            set {
                this._IRobotModel = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _MaintainMode;
        
        /// <summary>
        ///            When set to Passive, Safe, or Full, this mode will be maintained with
        ///            each subsequent command and also involuntary mode changes.
        ///            <remarks>
        ///            Off = Ignore for this command
        ///            NotSpecified = Maintain Mode is Not Specified (disabled)
        ///            </remarks></summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the mode which will be maintained after each command is completed.\n(Of" +
            "f = Ignore,  NotSpecified = Disabled)")]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode MaintainMode {
            get {
                return this._MaintainMode;
            }
            set {
                this._MaintainMode = value;
            }
        }
        
        private global::System.DateTime _FirmwareDate;
        
        /// <summary>
        ///            The Firmware Date
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the robot\'s firmware date.")]
        public global::System.DateTime FirmwareDate {
            get {
                return this._FirmwareDate;
            }
            set {
                this._FirmwareDate = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnMode to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode)(target));
            typedTarget._RoombaMode = this._RoombaMode;
            typedTarget._IRobotModel = this._IRobotModel;
            typedTarget._MaintainMode = this._MaintainMode;
            typedTarget._FirmwareDate = this._FirmwareDate;
        }
        
        /// <summary>
        ///Clones ReturnMode
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnMode to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._RoombaMode)));
            writer.Write(((int)(this._IRobotModel)));
            writer.Write(((int)(this._MaintainMode)));
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._FirmwareDate, writer);
        }
        
        /// <summary>
        ///Deserializes ReturnMode
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnMode</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            this._IRobotModel = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotModel)(reader.ReadInt32()));
            this._MaintainMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            this._FirmwareDate = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            IRobot Connect Message
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="IRobotConnect")]
    [global::System.ComponentModel.DescriptionAttribute("Connect to the robot.")]
    public class IRobotConnect : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public IRobotConnect() {
        }
        
        /// <summary>
        ///Copies the data member values of the current IRobotConnect to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect)(target));
        }
        
        /// <summary>
        ///Clones IRobotConnect
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IRobotConnect to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes IRobotConnect
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IRobotConnect</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Set the iRobot Mode.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdSetMode")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the robot\'s command mode.")]
    public class CmdSetMode : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdSetMode() {
        }
        
        public CmdSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode roombaMode, bool maintainMode) {
            this._RoombaMode = roombaMode;
            this._MaintainMode = maintainMode;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _RoombaMode;
        
        /// <summary>
        ///            The iRobot Mode
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the operational mode.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode RoombaMode {
            get {
                return this._RoombaMode;
            }
            set {
                this._RoombaMode = value;
            }
        }
        
        private bool _MaintainMode;
        
        /// <summary>
        ///            When set to Passive, Safe, or Full, this mode will be maintained,
        ///            even after automatic mode changes and additional commands.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the maintain mode.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public bool MaintainMode {
            get {
                return this._MaintainMode;
            }
            set {
                this._MaintainMode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdSetMode to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode)(target));
            typedTarget._RoombaMode = this._RoombaMode;
            typedTarget._MaintainMode = this._MaintainMode;
        }
        
        /// <summary>
        ///Clones CmdSetMode
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdSetMode to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._RoombaMode)));
            writer.Write(this._MaintainMode);
        }
        
        /// <summary>
        ///Deserializes CmdSetMode
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdSetMode</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            this._MaintainMode = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Acknowledges the receipt of a Roomba command
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaCommandReceived")]
    [global::System.ComponentModel.DescriptionAttribute("Acknowledges the receipt of a Roomba command")]
    public class RoombaCommandReceived : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RoombaCommandReceived() {
        }
        
        public RoombaCommandReceived(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode roombaMode) {
            this._RoombaMode = roombaMode;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode _RoombaMode;
        
        /// <summary>
        ///            The Roomba Mode after the command is completed
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Roomba Mode after the command is completed")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public override global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode RoombaMode {
            get {
                return this._RoombaMode;
            }
            set {
                this._RoombaMode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RoombaCommandReceived to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived)(target));
            typedTarget._RoombaMode = this._RoombaMode;
        }
        
        /// <summary>
        ///Clones RoombaCommandReceived
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RoombaCommandReceived to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._RoombaMode)));
        }
        
        /// <summary>
        ///Deserializes RoombaCommandReceived
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RoombaCommandReceived</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Controls Roomba�s LEDs.
    ///            <remarks>The state of each of the spot, clean,
    ///            max, and dirt detect LEDs is specified by one bit in the first data
    ///            byte. The color of the status LED is specified by two bits in the
    ///            first data byte. The power LED is specified by two data bytes, one
    ///            for the color and one for the intensity. </remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdLeds")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies an LED command.")]
    public class CmdLeds : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdLeds() {
        }
        
        public CmdLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits leds, int powerColor, int powerIntensity) {
            this._Leds = leds;
            this._PowerColor = powerColor;
            this._PowerIntensity = powerIntensity;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits _Leds;
        
        /// <summary>
        ///            iRobot LEDs
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the set of LEDs.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits Leds {
            get {
                return this._Leds;
            }
            set {
                this._Leds = value;
            }
        }
        
        private int _PowerColor;
        
        /// <summary>
        ///            Power Color
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the color for the LED.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int PowerColor {
            get {
                return this._PowerColor;
            }
            set {
                this._PowerColor = value;
            }
        }
        
        private int _PowerIntensity;
        
        /// <summary>
        ///            Power Intensity
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the intensity setting for the LED.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public int PowerIntensity {
            get {
                return this._PowerIntensity;
            }
            set {
                this._PowerIntensity = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdLeds to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds)(target));
            typedTarget._Leds = this._Leds;
            typedTarget._PowerColor = this._PowerColor;
            typedTarget._PowerIntensity = this._PowerIntensity;
        }
        
        /// <summary>
        ///Clones CmdLeds
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdLeds to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._Leds)));
            writer.Write(this._PowerColor);
            writer.Write(this._PowerIntensity);
        }
        
        /// <summary>
        ///Deserializes CmdLeds
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdLeds</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Leds = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits)(reader.ReadInt32()));
            this._PowerColor = reader.ReadInt32();
            this._PowerIntensity = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Plays one of 16 songs, as specified by an earlier Song command.
    ///            <remarks>If the requested song has not been specified yet,
    ///            the Play command does nothing. </remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdPlaySong")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a play song command.")]
    public class CmdPlaySong : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdPlaySong() {
        }
        
        public CmdPlaySong(int songNumber) {
            this._SongNumber = songNumber;
        }
        
        private int _SongNumber;
        
        /// <summary>
        ///            The predefined song number (1-16)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the number for a pre-defined song (1-16).")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int SongNumber {
            get {
                return this._SongNumber;
            }
            set {
                this._SongNumber = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdPlaySong to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong)(target));
            typedTarget._SongNumber = this._SongNumber;
        }
        
        /// <summary>
        ///Clones CmdPlaySong
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdPlaySong to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._SongNumber);
        }
        
        /// <summary>
        ///Deserializes CmdPlaySong
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdPlaySong</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._SongNumber = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Requests the SCI to send a packet of sensor data bytes.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdSensors")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a send sensor data retrieval command.")]
    public class CmdSensors : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdSensors() {
        }
        
        public CmdSensors(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket createSensorPacket) {
            this._CreateSensorPacket = createSensorPacket;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket _CreateSensorPacket;
        
        /// <summary>
        ///            The Create Sensor Packet to retrieve
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Create Sensor Packet to retrieve")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket CreateSensorPacket {
            get {
                return this._CreateSensorPacket;
            }
            set {
                this._CreateSensorPacket = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdSensors to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors)(target));
            typedTarget._CreateSensorPacket = this._CreateSensorPacket;
        }
        
        /// <summary>
        ///Clones CmdSensors
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdSensors to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._CreateSensorPacket)));
        }
        
        /// <summary>
        ///Deserializes CmdSensors
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdSensors</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._CreateSensorPacket = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Returns the Firmware Date.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="ReturnFirmwareDate")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the Firmware Date.")]
    public class ReturnFirmwareDate : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReturnFirmwareDate() {
        }
        
        private global::System.DateTime _FirmwareDate;
        
        /// <summary>
        ///            The firmware Date
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the robot\'s firmware date.")]
        public global::System.DateTime FirmwareDate {
            get {
                return this._FirmwareDate;
            }
            set {
                this._FirmwareDate = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReturnFirmwareDate to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate)(target));
            typedTarget._FirmwareDate = this._FirmwareDate;
        }
        
        /// <summary>
        ///Clones ReturnFirmwareDate
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReturnFirmwareDate to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._FirmwareDate, writer);
        }
        
        /// <summary>
        ///Deserializes ReturnFirmwareDate
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReturnFirmwareDate</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._FirmwareDate = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Controls Roomba's drive wheels.
    ///            <remarks>The command takes four data
    ///            bytes, which are interpreted as two 16 bit signed values using
    ///            twos-complement. The first two bytes specify the average velocity
    ///            of the drive wheels in millimeters per second (mm/s), with the
    ///            high byte sent first. The next two bytes specify the radius, in
    ///            millimeters, at which Roomba should turn. The longer radii make
    ///            Roomba drive straighter; shorter radii make it turn more. A Drive
    ///            command with a positive velocity and a positive radius will make
    ///            Roomba drive forward while turning toward the left. A negative
    ///            radius will make it turn toward the right. Special cases for the
    ///            radius make Roomba turn in place or drive straight, as specified
    ///            below. </remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdDrive")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a drive command.")]
    public class CmdDrive : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdDrive() {
        }
        
        public CmdDrive(int velocity, int radius) {
            this._Velocity = velocity;
            this._Radius = radius;
        }
        
        private int _Velocity;
        
        /// <summary>
        ///            Velocity (-500 to +500 mm/s)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the speed setting (mm/sec).\n(Range = -500 to +500)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public int Velocity {
            get {
                return this._Velocity;
            }
            set {
                this._Velocity = value;
            }
        }
        
        private int _Radius;
        
        /// <summary>
        ///            Radius (-2000 to +2000 mm, 32768 straight)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the radius setting (mm).\n(Range = -2000 to +2000; 32768 drives straight" +
            " ahead)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public int Radius {
            get {
                return this._Radius;
            }
            set {
                this._Radius = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdDrive to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive)(target));
            typedTarget._Velocity = this._Velocity;
            typedTarget._Radius = this._Radius;
        }
        
        /// <summary>
        ///Clones CmdDrive
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdDrive to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._Velocity);
            writer.Write(this._Radius);
        }
        
        /// <summary>
        ///Deserializes CmdDrive
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdDrive</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Velocity = reader.ReadInt32();
            this._Radius = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Controls Roomba�s cleaning motors.
    ///            <remarks>The state of each motor is specified by one bit
    ///            in the data byte. </remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdMotors")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies cleaning motors command.")]
    public class CmdMotors : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdMotors() {
        }
        
        public CmdMotors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMotorBits motors) {
            this._Motors = motors;
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMotorBits _Motors;
        
        /// <summary>
        ///            Motors
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the set of motors.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMotorBits Motors {
            get {
                return this._Motors;
            }
            set {
                this._Motors = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdMotors to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors)(target));
            typedTarget._Motors = this._Motors;
        }
        
        /// <summary>
        ///Clones CmdMotors
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdMotors to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._Motors)));
        }
        
        /// <summary>
        ///Deserializes CmdMotors
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdMotors</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Motors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMotorBits)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Turns on force-seeking-dock mode.
    ///            <remarks>Causes the robot to immediately attempt to dock during
    ///            its cleaning cycle if it encounters the docking beams from the
    ///            Home Base. (Note, however, that if the robot was not active in a
    ///            clean, spot or max cycle it will not attempt to execute the docking.)
    ///            Normally the robot attempts to dock only if the cleaning cycle has
    ///            completed or the battery is nearing depletion. This command can be
    ///            sent anytime, but the mode will be canceled if the robot turns off,
    ///            begins charging, or is commanded into SCI safe or full modes.</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdForceSeekingDock")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies a Force Seeking Dock command.")]
    public class CmdForceSeekingDock : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdForceSeekingDock() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdForceSeekingDock to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock)(target));
        }
        
        /// <summary>
        ///Clones CmdForceSeekingDock
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdForceSeekingDock to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes CmdForceSeekingDock
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdForceSeekingDock</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Starts a normal cleaning cycle, the same as a normal "clean" button press.
    ///            <remarks>This command puts the SCI in passive mode.</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdClean")]
    [global::System.ComponentModel.DescriptionAttribute("Starts a normal cleaning cycle, the same as a normal \"clean\" button press. This c" +
        "ommand puts the SCI in passive mode.")]
    public class CmdClean : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdClean() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdClean to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean)(target));
        }
        
        /// <summary>
        ///Clones CmdClean
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdClean to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes CmdClean
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdClean</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Starts a spot cleaning cycle, the same as a normal "spot" button press.
    ///            <remarks>This command puts the SCI in passive mode.</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdSpot")]
    [global::System.ComponentModel.DescriptionAttribute("Starts a spot cleaning cycle, the same as a normal \"spot\" button press. This comm" +
        "and puts the SCI in passive mode.")]
    public class CmdSpot : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdSpot() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdSpot to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot)(target));
        }
        
        /// <summary>
        ///Clones CmdSpot
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdSpot to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes CmdSpot
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdSpot</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Starts a maximum time cleaning cycle, the same as a normal "max" button press.
    ///            <remarks>This command puts the SCI in passive mode.</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdMax")]
    [global::System.ComponentModel.DescriptionAttribute("Starts a maximum time cleaning cycle, the same as a normal \"max\" button press. Th" +
        "is command puts the SCI in passive mode.")]
    public class CmdMax : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdMax() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdMax to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax)(target));
        }
        
        /// <summary>
        ///Clones CmdMax
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdMax to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes CmdMax
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdMax</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Retrieve the firmware date from a Roomba or Create.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="CmdFirmwareDate")]
    [global::System.ComponentModel.DescriptionAttribute("Retrieve the firmware date from a Roomba or Create.")]
    public class CmdFirmwareDate : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CmdFirmwareDate() {
        }
        
        /// <summary>
        ///Copies the data member values of the current CmdFirmwareDate to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate)(target));
        }
        
        /// <summary>
        ///Clones CmdFirmwareDate
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CmdFirmwareDate to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes CmdFirmwareDate
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CmdFirmwareDate</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Start the Roomba SCI.
    ///            <remarks>Internal: Use CmdSetMode from outside of this service</remarks><remarks>The Start command must be sent before any
    ///            other SCI commands. This command puts the SCI in
    ///            passive mode.</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="InternalCmdStart")]
    [global::System.ComponentModel.DescriptionAttribute("Start the Roomba SCI. Internal: Use CmdSetMode from outside of this serviceThe St" +
        "art command must be sent before any other SCI commands. This command puts the SC" +
        "I in passive mode.")]
    public class InternalCmdStart : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InternalCmdStart() {
        }
        
        /// <summary>
        ///Copies the data member values of the current InternalCmdStart to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart)(target));
        }
        
        /// <summary>
        ///Clones InternalCmdStart
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InternalCmdStart to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes InternalCmdStart
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InternalCmdStart</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Enables user control of the Roomba.
    ///            <remarks>Internal: Use CmdSetMode from outside of this service</remarks><remarks>This command must be sent after the start command and
    ///            before any control commands are sent to the SCI. </remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="InternalCmdControl")]
    [global::System.ComponentModel.DescriptionAttribute("Enables user control of the Roomba. Internal: Use CmdSetMode from outside of this" +
        " serviceThis command must be sent after the start command and before any control" +
        " commands are sent to the SCI.")]
    public class InternalCmdControl : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InternalCmdControl() {
        }
        
        /// <summary>
        ///Copies the data member values of the current InternalCmdControl to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl)(target));
        }
        
        /// <summary>
        ///Clones InternalCmdControl
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InternalCmdControl to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes InternalCmdControl
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InternalCmdControl</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Puts the Roomba in Safe mode.
    ///            <remarks>Internal: Use CmdSetMode from outside of this service</remarks><remarks>Note: In order to go from passive mode to safe mode,
    ///            use the CmdControl command.</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="InternalCmdSafe")]
    [global::System.ComponentModel.DescriptionAttribute("Puts the Roomba in Safe mode. Internal: Use CmdSetMode from outside of this servi" +
        "ceNote: In order to go from passive mode to safe mode, use the CmdControl comman" +
        "d.")]
    public class InternalCmdSafe : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InternalCmdSafe() {
        }
        
        /// <summary>
        ///Copies the data member values of the current InternalCmdSafe to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe)(target));
        }
        
        /// <summary>
        ///Clones InternalCmdSafe
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InternalCmdSafe to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes InternalCmdSafe
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InternalCmdSafe</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Enables unrestricted control of Roomba and turns
    ///            off safety features.
    ///            <remarks>Internal: Use CmdSetMode from outside of this service</remarks><remarks>This command puts the SCI in full mode.</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="InternalCmdFull")]
    [global::System.ComponentModel.DescriptionAttribute("Enables unrestricted control of Roomba and turns off safety features. Internal: U" +
        "se CmdSetMode from outside of this serviceThis command puts the SCI in full mode" +
        ".")]
    public class InternalCmdFull : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InternalCmdFull() {
        }
        
        /// <summary>
        ///Copies the data member values of the current InternalCmdFull to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull)(target));
        }
        
        /// <summary>
        ///Clones InternalCmdFull
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InternalCmdFull to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes InternalCmdFull
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InternalCmdFull</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Puts Roomba to sleep, the same as a normal "power" button press.
    ///            <remarks>Internal: Use CmdSetMode from outside of this service</remarks><remarks>The Device Detect line must be held low for 500 ms to
    ///            wake up Roomba from sleep. This command puts the SCI in
    ///            passive mode.
    ///            </remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="InternalCmdPower")]
    [global::System.ComponentModel.DescriptionAttribute("Puts Roomba to sleep, the same as a normal \"power\" button press. Internal: Use Cm" +
        "dSetMode from outside of this serviceThe Device Detect line must be held low for" +
        " 500 ms to wake up Roomba from sleep. This command puts the SCI in passive mode." +
        "")]
    public class InternalCmdPower : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InternalCmdPower() {
        }
        
        /// <summary>
        ///Copies the data member values of the current InternalCmdPower to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower)(target));
        }
        
        /// <summary>
        ///Clones InternalCmdPower
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InternalCmdPower to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes InternalCmdPower
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InternalCmdPower</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Resets Roomba to sleep mode, the same as a normal "power" button press.
    ///            <remarks>
    ///            In most cases, you can power cycle the Create robot to reset it, 
    ///            either with the power button or by transmitting two low-to-high transitions 
    ///            on the power toggle input line on the Cargo Bay Connector (see the Open 
    ///            Interface manual for details). </remarks><remarks>
    ///            Always wait at least one second between powering the robot off and powering 
    ///            it on again to ensure a complete reset.</remarks><remarks>
    ///            However, if the robot is on the charger but not charging because it is in 
    ///            Safe or Full mode, this doesn�t work. Instead, use this procedure:</remarks><remarks>
    ///            1. Send opcode "7". This is not an official OI opcode, rather it is an 
    ///            opcode used by Osmo (a firmware updating device) to initiate a soft reset 
    ///            of the robot and force it to run its bootloader.</remarks><remarks>
    ///            2. The robot resets. Wait 3 seconds for the bootloader to complete. 
    ///            Do NOT send any opcodes while the bootloader is running.</remarks><remarks>
    ///            3. The robot should start charging. Note that the robot spews some 
    ///            battery-related text if it is charging and not in OI mode. Ignore this text.</remarks><remarks>
    ///            4. Send a Start command to get back into the OI (and stop the spew).</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="InternalCmdReset")]
    [global::System.ComponentModel.DescriptionAttribute(@"Resets Roomba to sleep mode, the same as a normal ""power"" button press. 

 In most cases, you can power cycle the Create robot to reset it, either with the power button or by transmitting two low-to-high transitions on the power toggle input line on the Cargo Bay Connector (see the Open Interface manual for details). Always wait at least one second between powering the robot off and powering it on again to ensure a complete reset. However, if the robot is on the charger but not charging because it is in Safe or Full mode, this doesn�t work. Instead, use this procedure: 1. Send opcode ""7"". This is not an official OI opcode, rather it is an opcode used by Osmo (a firmware updating device) to initiate a soft reset of the robot and force it to run its bootloader. 2. The robot resets. Wait 3 seconds for the bootloader to complete. Do NOT send any opcodes while the bootloader is running. 3. The robot should start charging. Note that the robot spews some battery-related text if it is charging and not in OI mode. Ignore this text. 4. Send a Start command to get back into the OI (and stop the spew).")]
    public class InternalCmdReset : global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InternalCmdReset() {
        }
        
        /// <summary>
        ///Copies the data member values of the current InternalCmdReset to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdReset typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdReset)(target));
        }
        
        /// <summary>
        ///Clones InternalCmdReset
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdReset target0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdReset();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InternalCmdReset to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes InternalCmdReset
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InternalCmdReset</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the complete state of the robot.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Initiates a connection between the service host/PC and the iRobot with full configuration.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Initiates a connection between the service host/PC and the robot and configures i" +
        "t.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Configure : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Configure() {
        }
        
        public Configure(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body) : 
                base(body) {
        }
        
        public Configure(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            iRobot Connect Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Initiates a connection between the service host/PC and the robot.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Connect : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public Connect() {
        }
        
        public Connect(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body) : 
                base(body) {
        }
        
        public Connect(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Place the iRobot in the specified mode.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SetMode")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the robot\'s mode.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaSetMode : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaSetMode() {
        }
        
        public RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body) : 
                base(body) {
        }
        
        public RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Controls Roomba�s LEDs.
    ///            <remarks>Multiple LEDs may be specified at once.
    ///            This command does not change the mode.</remarks></summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SetLEDs")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the robot�s LEDs.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaSetLeds : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaSetLeds() {
        }
        
        public RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body) : 
                base(body) {
        }
        
        public RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Plays one of 16 songs, as specified by an earlier RooombaDefineSong command.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) PlaySong")]
    [global::System.ComponentModel.DescriptionAttribute("Plays a pre-defined song.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaPlaySong : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaPlaySong() {
        }
        
        public RoombaPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body) : 
                base(body) {
        }
        
        public RoombaPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Query for Roomba Pose, Power, and Sensors
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) GetSensors")]
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of robot\'s sensors.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaGetSensors : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.GetSensorsResponse> {
        
        public RoombaGetSensors() {
        }
        
        public RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body) : 
                base(body) {
        }
        
        public RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.GetSensorsResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Controls Roomba's drive wheels.
    ///            <remarks>The Roomba is controlled by providing the average velocity
    ///            of the drive wheels in millimeters per second (mm/s), and the radius, in
    ///            millimeters, at which Roomba should turn. The longer radii make
    ///            Roomba drive straighter; shorter radii make it turn more. A Drive
    ///            command with a positive velocity and a positive radius will make
    ///            Roomba drive forward while turning toward the left. A negative
    ///            radius will make it turn toward the right. Special cases for the
    ///            radius make Roomba turn in place or drive straight, as specified
    ///            below. </remarks></summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) StartDriving")]
    [global::System.ComponentModel.DescriptionAttribute("Starts the robot\'s drive motors.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaDrive : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaDrive() {
        }
        
        public RoombaDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body) : 
                base(body) {
        }
        
        public RoombaDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Controls Roomba�s cleaning motors.
    ///            <remarks>Multiple motors may be specified at once.
    ///            This command does not change the mode.</remarks></summary>
    [global::System.ComponentModel.DescriptionAttribute("Sets Roomba�s cleaning motors.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaSetCleaningMotors : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaSetCleaningMotors() {
        }
        
        public RoombaSetCleaningMotors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors body) : 
                base(body) {
        }
        
        public RoombaSetCleaningMotors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Specifies a song to the SCI to be played later.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) DefineSong")]
    [global::System.ComponentModel.DescriptionAttribute("Defines a song to be played on the robot.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaDefineSong : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaDefineSong() {
        }
        
        public RoombaDefineSong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body) : 
                base(body) {
        }
        
        public RoombaDefineSong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Turns on force-seeking-dock mode.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SeekDock")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the robot\'s Force Seeking Dock behavior.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaSeekDock : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaSeekDock() {
        }
        
        public RoombaSeekDock(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body) : 
                base(body) {
        }
        
        public RoombaSeekDock(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Starts a normal cleaning cycle, the same as a normal "clean" button press.
    ///            <remarks>This command puts the SCI in passive mode.</remarks></summary>
    [global::System.ComponentModel.DescriptionAttribute("Sets normal cleaning behavior.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaStartCleaning : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaStartCleaning() {
        }
        
        public RoombaStartCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body) : 
                base(body) {
        }
        
        public RoombaStartCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Starts a spot cleaning cycle, the same as a normal "spot" button press.
    ///            <remarks>This command puts the SCI in passive mode.</remarks></summary>
    [global::System.ComponentModel.DescriptionAttribute("Sets the spot cleaning behavior.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaStartSpotCleaning : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaStartSpotCleaning() {
        }
        
        public RoombaStartSpotCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body) : 
                base(body) {
        }
        
        public RoombaStartSpotCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Starts a maximum time cleaning cycle, the same as a normal "max" button press.
    ///            <remarks>This command puts the SCI in passive mode.</remarks></summary>
    [global::System.ComponentModel.DescriptionAttribute("Sets maximum time cleaning cycle.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaStartMaxCleaning : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse> {
        
        public RoombaStartMaxCleaning() {
        }
        
        public RoombaStartMaxCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax body) : 
                base(body) {
        }
        
        public RoombaStartMaxCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax body, global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Query for Roomba/Create Firmware Date
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) GetFirmwareDate")]
    [global::System.ComponentModel.DescriptionAttribute("Gets the robot\'s firmware date.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaGetFirmwareDate : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate, global:: W3C.Soap.Fault>> {
        
        public RoombaGetFirmwareDate() {
        }
        
        public RoombaGetFirmwareDate(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate body) : 
                base(body) {
        }
        
        public RoombaGetFirmwareDate(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            The Standard iRobot command response.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("The Standard iRobot command response.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class StandardResponse : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived, global:: W3C.Soap.Fault> {
        
        public StandardResponse() {
        }
    }
    
    /// <summary>
    ///            The response type for RoombaGetSensors
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("The response type for RoombaGetSensors")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GetSensorsResponse : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode, global:: Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList, global:: W3C.Soap.Fault> {
        
        public GetSensorsResponse() {
        }
    }
    
    /// <summary>
    ///            Roomba Operations
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Roomba Operations")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RoombaOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Dss.Core.DsspHttp.HttpPost, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning, global:: Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate> {
        
        public RoombaOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Connect() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Connect(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Connect(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Connect(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Connect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Configure() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Configure(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Configure(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Configure(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Configure(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode roombaMode, bool maintainMode) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode(roombaMode, maintainMode);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode roombaMode, bool maintainMode, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode(roombaMode, maintainMode);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaDrive(int velocity, int radius) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive(velocity, radius);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaDrive(int velocity, int radius, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive(velocity, radius);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetCleaningMotors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMotorBits motors) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors(motors);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetCleaningMotors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMotorBits motors, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors(motors);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetCleaningMotors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetCleaningMotors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetCleaningMotors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits leds, int powerColor, int powerIntensity) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds(leds, powerColor, powerIntensity);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits leds, int powerColor, int powerIntensity, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds(leds, powerColor, powerIntensity);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSetLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSetLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaDefineSong(int songNumber, global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> notes) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong(songNumber, notes);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaDefineSong(int songNumber, global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> notes, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong(songNumber, notes);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaDefineSong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaDefineSong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaDefineSong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaPlaySong(int songNumber) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong(songNumber);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaPlaySong(int songNumber, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong(songNumber);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.GetSensorsResponse RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket createSensorPacket) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors(createSensorPacket);
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket createSensorPacket, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors(createSensorPacket);
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.GetSensorsResponse RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaGetSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSeekDock() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSeekDock(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaSeekDock(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaSeekDock(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaSeekDock(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaStartCleaning() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaStartCleaning(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaStartCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaStartCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaStartSpotCleaning() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaStartSpotCleaning(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaStartSpotCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaStartSpotCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartSpotCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaStartMaxCleaning() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaStartMaxCleaning(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.StandardResponse RoombaStartMaxCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaStartMaxCleaning(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaStartMaxCleaning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate, global:: W3C.Soap.Fault> RoombaGetFirmwareDate() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaGetFirmwareDate(out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate();
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate, global:: W3C.Soap.Fault> RoombaGetFirmwareDate(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate();
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice RoombaGetFirmwareDate(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate body, out global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaGetFirmwareDate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            The model of iRobot Roomba or Create
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="IRobotModel")]
    [global::System.ComponentModel.DescriptionAttribute("The model of iRobot Roomba or Create")]
    public enum IRobotModel : int {
        
        /// <summary>
        ///            The type of iRobot has not been specified.
        ///            </summary>
        NotSpecified = 0,
        
        /// <summary>
        ///            iRobot Roomba
        ///            </summary>
        Roomba = 1,
        
        /// <summary>
        ///            iRobot Create
        ///            </summary>
        Create = 2,
    }
    
    /// <summary>
    ///            Connection Type
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="iRobotConnectionType")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies how the service host/PC is connected to the robot.")]
    public enum iRobotConnectionType : int {
        
        /// <summary>
        ///            Unconfigured Roomba
        ///            </summary>
        NotConfigured = 0,
        
        /// <summary>
        ///            RoombaDevTools Bluetooth connection
        ///            </summary>
        RooTooth = 1,
        
        /// <summary>
        ///            Serial Port connection designed for the iRobot Roomba 7-pin connector
        ///            <remarks>Supports Roomba Wakeup mapping RTS to Roomba Device Detect Pin-5</remarks></summary>
        RoombaSerialPort = 2,
        
        /// <summary>
        ///            Serial Port connection designed for the iRobot Create 7-pin connector
        ///            </summary>
        CreateSerialPort = 3,
        
        /// <summary>
        ///            Element Direct Bluetooth Adapter Module (BAM!)
        ///            </summary>
        BluetoothAdapterModule = 4,
    }
    
    /// <summary>
    ///            Roomba Operation Modes
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaMode")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates the current operating mode.")]
    public enum RoombaMode : int {
        
        /// <summary>
        ///            Roomba is in Sleep Mode
        ///            </summary>
        Off = 0,
        
        /// <summary>
        ///            Roomba is in Passive Mode
        ///            </summary>
        Passive = 1,
        
        /// <summary>
        ///            Roomba is in Safe Mode
        ///            </summary>
        Safe = 2,
        
        /// <summary>
        ///            Roomba is in Full Mode
        ///            </summary>
        Full = 3,
        
        /// <summary>
        ///            The iRobot Create/Roomba has not been initialized.
        ///            This happens when the service is started or the
        ///            serial port is configured.
        ///            </summary>
        Uninitialized = -1,
        
        /// <summary>
        ///            Return Code indicates the mode is not specified
        ///            and should not be updated.
        ///            </summary>
        NotSpecified = -2,
        
        /// <summary>
        ///            The iRobot Create/Roomba service is shutting down.
        ///            </summary>
        Shutdown = -3,
    }
    
    /// <summary>
    ///            Bumps and Wheel Drops
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="BumpsWheeldrops")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the bump and wheel drop sensors" +
        ".")]
    [global::System.FlagsAttribute()]
    public enum BumpsWheeldrops : int {
        
        /// <summary>
        ///            Right Bump
        ///            </summary>
        BumpRight = 1,
        
        /// <summary>
        ///            Left Bump
        ///            </summary>
        BumpLeft = 2,
        
        /// <summary>
        ///            Right Wheel Drop
        ///            </summary>
        WheelDropRight = 4,
        
        /// <summary>
        ///            Left Wheel Drop
        ///            </summary>
        WheelDropLeft = 8,
        
        /// <summary>
        ///            Caster Wheel Drop
        ///            </summary>
        WheelDropCaster = 16,
        
        /// <summary>
        ///            Unused Bit 6
        ///            </summary>
        Bit6 = 32,
        
        /// <summary>
        ///            Unused Bit 7
        ///            </summary>
        Bit7 = 64,
        
        /// <summary>
        ///            Unused Bit 8
        ///            </summary>
        Bit8 = 128,
    }
    
    /// <summary>
    ///            Motor Stalled
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="MotorOvercurrents")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the motor stall state.")]
    [global::System.FlagsAttribute()]
    public enum MotorOvercurrents : int {
        
        /// <summary>
        ///            Side Brush Stalled
        ///            </summary>
        SideBrush = 1,
        
        /// <summary>
        ///            Vacuum Plugged
        ///            </summary>
        Vacuum = 2,
        
        /// <summary>
        ///            Main Brush Stalled
        ///            </summary>
        MainBrush = 4,
        
        /// <summary>
        ///            Right Wheel Blocked
        ///            </summary>
        DriveRight = 8,
        
        /// <summary>
        ///            Left Wheel Blocked
        ///            </summary>
        DriveLeft = 16,
        
        /// <summary>
        ///            Not Defined Flag 0x20
        ///            </summary>
        Bit6 = 32,
        
        /// <summary>
        ///            Not Defined Flag 0x40
        ///            </summary>
        Bit7 = 64,
        
        /// <summary>
        ///            Not Defined Flag 0x80
        ///            </summary>
        Bit8 = 128,
    }
    
    /// <summary>
    ///            Roomba Remote IR Codes
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RemoteIR")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the remote control IR codes.")]
    [global::System.FlagsAttribute()]
    public enum RemoteIR : int {
        
        /// <summary>
        ///            Bit 1 (0x01)
        ///            </summary>
        Code1 = 1,
        
        /// <summary>
        ///            Bit 2 (0x02)
        ///            </summary>
        Code2 = 2,
        
        /// <summary>
        ///            Bit 3 (0x04)
        ///            </summary>
        Code3 = 4,
        
        /// <summary>
        ///            Bit 4 (0x08)
        ///            </summary>
        Code4 = 8,
        
        /// <summary>
        ///            Bit 5 (0x10)
        ///            </summary>
        Code5 = 16,
        
        /// <summary>
        ///            Bit 6 (0x20)
        ///            </summary>
        Code6 = 32,
        
        /// <summary>
        ///            Bit 7 (0x40)
        ///            </summary>
        Code7 = 64,
        
        /// <summary>
        ///            Bit 8 (0x80)
        ///            </summary>
        Code8 = 128,
        
        /// <summary>
        ///            Remote "Left"
        ///            </summary>
        RemoteLeft = 129,
        
        /// <summary>
        ///            Remote "Forward"
        ///            </summary>
        RemoteForward = 130,
        
        /// <summary>
        ///            Remote "Right"
        ///            </summary>
        RemoteRight = 131,
        
        /// <summary>
        ///            Remote "Spot"
        ///            </summary>
        RemoteSpot = 132,
        
        /// <summary>
        ///            Remote "Max"
        ///            </summary>
        RemoteMax = 133,
        
        /// <summary>
        ///            Small?
        ///            </summary>
        RemoteSmall = 134,
        
        /// <summary>
        ///            Medium??
        ///            </summary>
        RemoteMedium = 135,
        
        /// <summary>
        ///            Remote "Clean"
        ///            </summary>
        RemoteClean = 136,
        
        /// <summary>
        ///            Remote Pause
        ///            </summary>
        RemoteStop = 137,
        
        /// <summary>
        ///            Remote "Power"
        ///            </summary>
        RemotePower = 138,
        
        /// <summary>
        ///            Remote "Forward" + "Left"
        ///            </summary>
        RemoteArcForwardLeft = 139,
        
        /// <summary>
        ///            Remote "Forward" + "Right"
        ///            </summary>
        RemoteArcForwardRight = 140,
        
        /// <summary>
        ///            Remote "DriveStop" ???
        ///            </summary>
        RemoteDriveStop = 141,
        
        /// <summary>
        ///            Remote "Download"
        ///            </summary>
        RemoteDownload = 142,
        
        /// <summary>
        ///            Remote "SeekDock"
        ///            </summary>
        RemoteSeekDock = 143,
        
        /// <summary>
        ///            Just out of sight of the Buoys
        ///            </summary>
        DockFuzzy = 240,
        
        /// <summary>
        ///            The Dock is near
        ///            </summary>
        DockNear = 242,
        
        /// <summary>
        ///            The Dock Green Buoy is visible
        ///            <remarks>Left of center</remarks></summary>
        DockGreen = 244,
        
        /// <summary>
        ///            The Dock Red Buoy is visible
        ///            <remarks>Right of center</remarks></summary>
        DockRed = 248,
        
        /// <summary>
        ///            Both Dock Buoy's are visible
        ///            <remarks>At 90 degrees to base</remarks></summary>
        DockGreenRed = 252,
        
        /// <summary>
        ///            The Dock Red Buoy is visible and the Dock is near
        ///            </summary>
        DockRedNear = 250,
        
        /// <summary>
        ///            The Dock Green Buoy is visible and the Dock is near
        ///            </summary>
        DockGreenNear = 246,
        
        /// <summary>
        ///            The Dock Red and Green Buoy's are visible and the Dock is near
        ///            </summary>
        DockRedGreenNear = 254,
        
        /// <summary>
        ///            No IR is being received
        ///            </summary>
        NoIR = 255,
    }
    
    /// <summary>
    ///            Roomba Physical Buttons
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="ButtonsRoomba")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the Roomba\'s buttons.")]
    [global::System.FlagsAttribute()]
    public enum ButtonsRoomba : int {
        
        /// <summary>
        ///            No Roomba Buttons pressed
        ///            </summary>
        Off = 0,
        
        /// <summary>
        ///            Roomba Max Button
        ///            </summary>
        Max = 1,
        
        /// <summary>
        ///            Roomba Clean Button
        ///            </summary>
        Clean = 2,
        
        /// <summary>
        ///            Roomba Spot Button
        ///            </summary>
        Spot = 4,
        
        /// <summary>
        ///            Roomba Power Button
        ///            </summary>
        Power = 8,
        
        /// <summary>
        ///            Not Defined Flag 0x10
        ///            </summary>
        Bit5 = 16,
        
        /// <summary>
        ///            Not Defined Flag 0x20
        ///            </summary>
        Bit6 = 32,
        
        /// <summary>
        ///            Not Defined Flag 0x40
        ///            </summary>
        Bit7 = 64,
        
        /// <summary>
        ///            Not Defined Flag 0x80
        ///            </summary>
        Bit8 = 128,
    }
    
    /// <summary>
    ///            Charging State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="ChargingState")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for acessing the charging state.")]
    public enum ChargingState : int {
        
        /// <summary>
        ///            Not Charging
        ///            </summary>
        NotCharging = 0,
        
        /// <summary>
        ///            Charging Recovery
        ///            </summary>
        ChargingRecovery = 1,
        
        /// <summary>
        ///            Charging
        ///            </summary>
        Charging = 2,
        
        /// <summary>
        ///            Trickle Charging
        ///            </summary>
        TrickleCharging = 3,
        
        /// <summary>
        ///            Waiting
        ///            </summary>
        Waiting = 4,
        
        /// <summary>
        ///            Charging Error
        ///            </summary>
        ChargingError = 5,
        
        /// <summary>
        ///            No response was received from the robot
        ///            </summary>
        NoResponse = 255,
    }
    
    /// <summary>
    ///            The table of note frequencies
    ///            as defined by Roomba
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaFrequency")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies note frequencies supported.")]
    public enum RoombaFrequency : int {
        
        /// <summary>
        ///            Quiet
        ///            </summary>
        Rest = 0,
        
        /// <summary>
        ///            G Hz 49.0
        ///            </summary>
        G_Hz_49p0 = 31,
        
        /// <summary>
        ///            GSharp Hz 51.0
        ///            </summary>
        GSharp_Hz_51p0 = 32,
        
        /// <summary>
        ///            A Hz 55.0
        ///            </summary>
        A_Hz_55p0 = 33,
        
        /// <summary>
        ///            ASharp Hz 58.3
        ///            </summary>
        ASharp_Hz_58p3 = 34,
        
        /// <summary>
        ///            B Hz 61.7
        ///            </summary>
        B_Hz_61p7 = 35,
        
        /// <summary>
        ///            C Hz 65.4
        ///            </summary>
        C_Hz_65p4 = 36,
        
        /// <summary>
        ///            CSharp Hz 69.3
        ///            </summary>
        CSharp_Hz_69p3 = 37,
        
        /// <summary>
        ///            D Hz 73.4
        ///            </summary>
        D_Hz_73p4 = 38,
        
        /// <summary>
        ///            DSharp Hz 77.8
        ///            </summary>
        DSharp_Hz_77p8 = 39,
        
        /// <summary>
        ///            E Hz 82.4
        ///            </summary>
        E_Hz_82p4 = 40,
        
        /// <summary>
        ///            F Hz 87.3
        ///            </summary>
        F_Hz_87p3 = 41,
        
        /// <summary>
        ///            FSharp Hz 92.5
        ///            </summary>
        FSharp_Hz_92p5 = 42,
        
        /// <summary>
        ///            G Hz 98.0
        ///            </summary>
        G_Hz_98p0 = 43,
        
        /// <summary>
        ///            GSharp Hz 103.8
        ///            </summary>
        GSharp_Hz_103p8 = 44,
        
        /// <summary>
        ///            A Hz 110.0
        ///            </summary>
        A_Hz_110p0 = 45,
        
        /// <summary>
        ///            ASharp Hz 116.5
        ///            </summary>
        ASharp_Hz_116p5 = 46,
        
        /// <summary>
        ///            B Hz 123.5
        ///            </summary>
        B_Hz_123p5 = 47,
        
        /// <summary>
        ///            C Hz 130.8
        ///            </summary>
        C_Hz_130p8 = 48,
        
        /// <summary>
        ///            CSharp Hz 138.6
        ///            </summary>
        CSharp_Hz_138p6 = 49,
        
        /// <summary>
        ///            D Hz 146.8
        ///            </summary>
        D_Hz_146p8 = 50,
        
        /// <summary>
        ///            DSharp Hz 155.6
        ///            </summary>
        DSharp_Hz_155p6 = 51,
        
        /// <summary>
        ///            E Hz 164.8
        ///            </summary>
        E_Hz_164p8 = 52,
        
        /// <summary>
        ///            F Hz 174.6
        ///            </summary>
        F_Hz_174p6 = 53,
        
        /// <summary>
        ///            FSharp Hz 185.0
        ///            </summary>
        FSharp_Hz_185p0 = 54,
        
        /// <summary>
        ///            G Hz 196.0
        ///            </summary>
        G_Hz_196p0 = 55,
        
        /// <summary>
        ///            GSharp Hz 207.7
        ///            </summary>
        GSharp_Hz_207p7 = 56,
        
        /// <summary>
        ///            A Hz 220.0
        ///            </summary>
        A_Hz_220p0 = 57,
        
        /// <summary>
        ///            ASharp Hz 233.1
        ///            </summary>
        ASharp_Hz_233p1 = 58,
        
        /// <summary>
        ///            B Hz 246.9
        ///            </summary>
        B_Hz_246p9 = 59,
        
        /// <summary>
        ///            C Hz 261.6
        ///            </summary>
        C_Hz_261p6 = 60,
        
        /// <summary>
        ///            CSharp Hz 277.2
        ///            </summary>
        CSharp_Hz_277p2 = 61,
        
        /// <summary>
        ///            D Hz 293.7
        ///            </summary>
        D_Hz_293p7 = 62,
        
        /// <summary>
        ///            DSharp Hz 311.1
        ///            </summary>
        DSharp_Hz_311p1 = 63,
        
        /// <summary>
        ///            E Hz 329.6
        ///            </summary>
        E_Hz_329p6 = 64,
        
        /// <summary>
        ///            F Hz 349.2
        ///            </summary>
        F_Hz_349p2 = 65,
        
        /// <summary>
        ///            FSharp Hz 370.0
        ///            </summary>
        FSharp_Hz_370p0 = 66,
        
        /// <summary>
        ///            G Hz 392.0
        ///            </summary>
        G_Hz_392p0 = 67,
        
        /// <summary>
        ///            GSharp Hz 415.3
        ///            </summary>
        GSharp_Hz_415p3 = 68,
        
        /// <summary>
        ///            A Hz 440.0
        ///            </summary>
        A_Hz_440p0 = 69,
        
        /// <summary>
        ///            ASharp Hz 466.2
        ///            </summary>
        ASharp_Hz_466p2 = 70,
        
        /// <summary>
        ///            B Hz 493.9
        ///            </summary>
        B_Hz_493p9 = 71,
        
        /// <summary>
        ///            C Hz 523.3
        ///            </summary>
        C_Hz_523p3 = 72,
        
        /// <summary>
        ///            CSharp Hz 554.4
        ///            </summary>
        CSharp_Hz_554p4 = 73,
        
        /// <summary>
        ///            D Hz 587.3
        ///            </summary>
        D_Hz_587p3 = 74,
        
        /// <summary>
        ///            DSharp Hz 622.3
        ///            </summary>
        DSharp_Hz_622p3 = 75,
        
        /// <summary>
        ///            E Hz 659.3
        ///            </summary>
        E_Hz_659p3 = 76,
        
        /// <summary>
        ///            F Hz 698.5
        ///            </summary>
        F_Hz_698p5 = 77,
        
        /// <summary>
        ///            FSharp Hz 740.0
        ///            </summary>
        FSharp_Hz_740p0 = 78,
        
        /// <summary>
        ///            G Hz 784.0
        ///            </summary>
        G_Hz_784p0 = 79,
        
        /// <summary>
        ///            GSharp Hz 830.6
        ///            </summary>
        GSharp_Hz_830p6 = 80,
        
        /// <summary>
        ///            A Hz 880.0
        ///            </summary>
        A_Hz_880p0 = 81,
        
        /// <summary>
        ///            ASharp Hz 932.3
        ///            </summary>
        ASharp_Hz_932p3 = 82,
        
        /// <summary>
        ///            B Hz 987.8
        ///            </summary>
        B_Hz_987p8 = 83,
        
        /// <summary>
        ///            C Hz 1046.5
        ///            </summary>
        C_Hz_1046p5 = 84,
        
        /// <summary>
        ///            CSharp Hz 1108.7
        ///            </summary>
        CSharp_Hz_1108p7 = 85,
        
        /// <summary>
        ///            D Hz 1174.7
        ///            </summary>
        D_Hz_1174p7 = 86,
        
        /// <summary>
        ///            DSharp Hz 1244.5
        ///            </summary>
        DSharp_Hz_1244p5 = 87,
        
        /// <summary>
        ///            E Hz 1318.5
        ///            </summary>
        E_Hz_1318p5 = 88,
        
        /// <summary>
        ///            F Hz 1396.9
        ///            </summary>
        F_Hz_1396p9 = 89,
        
        /// <summary>
        ///            FSharp Hz 1480.0
        ///            </summary>
        FSharp_Hz_1480p0 = 90,
        
        /// <summary>
        ///            G Hz 1568.0
        ///            </summary>
        G_Hz_1568p0 = 91,
        
        /// <summary>
        ///            GSharp Hz 1661.2
        ///            </summary>
        GSharp_Hz_1661p2 = 92,
        
        /// <summary>
        ///            A Hz 1760.0
        ///            </summary>
        A_Hz_1760p0 = 93,
        
        /// <summary>
        ///            ASharp Hz 1864.7
        ///            </summary>
        ASharp_Hz_1864p7 = 94,
        
        /// <summary>
        ///            B Hz 1975.5
        ///            </summary>
        B_Hz_1975p5 = 95,
        
        /// <summary>
        ///            C Hz 2093.0
        ///            </summary>
        C_Hz_2093p0 = 96,
        
        /// <summary>
        ///            CSharp Hz 2217.5
        ///            </summary>
        CSharp_Hz_2217p5 = 97,
        
        /// <summary>
        ///            D Hz 2349.3
        ///            </summary>
        D_Hz_2349p3 = 98,
        
        /// <summary>
        ///            DSharp Hz 2489.0
        ///            </summary>
        DSharp_Hz_2489p0 = 99,
        
        /// <summary>
        ///            E Hz 2637.0
        ///            </summary>
        E_Hz_2637p0 = 100,
        
        /// <summary>
        ///            F Hz 2793.8
        ///            </summary>
        F_Hz_2793p8 = 101,
        
        /// <summary>
        ///            FSharp Hz 2960.0
        ///            </summary>
        FSharp_Hz_2960p0 = 102,
        
        /// <summary>
        ///            G Hz 3136.0
        ///            </summary>
        G_Hz_3136p0 = 103,
        
        /// <summary>
        ///            GSharp Hz 3322.4
        ///            </summary>
        GSharp_Hz_3322p4 = 104,
        
        /// <summary>
        ///            A Hz 3520.0
        ///            </summary>
        A_Hz_3520p0 = 105,
        
        /// <summary>
        ///            ASharp Hz 3729.3
        ///            </summary>
        ASharp_Hz_3729p3 = 106,
        
        /// <summary>
        ///            B Hz 3951.1
        ///            </summary>
        B_Hz_3951p1 = 107,
        
        /// <summary>
        ///            C Hz 4186.0
        ///            </summary>
        C_Hz_4186p0 = 108,
        
        /// <summary>
        ///            CSharp Hz 4434.9
        ///            </summary>
        CSharp_Hz_4434p9 = 109,
        
        /// <summary>
        ///            D Hz 4698.6
        ///            </summary>
        D_Hz_4698p6 = 110,
        
        /// <summary>
        ///            DSharp Hz 4978.0
        ///            </summary>
        DSharp_Hz_4978p0 = 111,
        
        /// <summary>
        ///            E Hz 5274.0
        ///            </summary>
        E_Hz_5274p0 = 112,
        
        /// <summary>
        ///            F Hz 5587.7
        ///            </summary>
        F_Hz_5587p7 = 113,
        
        /// <summary>
        ///            FSharp Hz 5919.9
        ///            </summary>
        FSharp_Hz_5919p9 = 114,
        
        /// <summary>
        ///            G Hz 6271.9
        ///            </summary>
        G_Hz_6271p9 = 115,
        
        /// <summary>
        ///            GSharp Hz 6644.9
        ///            </summary>
        GSharp_Hz_6644p9 = 116,
        
        /// <summary>
        ///            A Hz 7040.0
        ///            </summary>
        A_Hz_7040p0 = 117,
        
        /// <summary>
        ///            ASharp Hz 7458.6
        ///            </summary>
        ASharp_Hz_7458p6 = 118,
        
        /// <summary>
        ///            B Hz 7902.1
        ///            </summary>
        B_Hz_7902p1 = 119,
        
        /// <summary>
        ///            C Hz 8372.0
        ///            </summary>
        C_Hz_8372p0 = 120,
        
        /// <summary>
        ///            CSharp Hz 8869.8
        ///            </summary>
        CSharp_Hz_8869p8 = 121,
        
        /// <summary>
        ///            D Hz 9397.3
        ///            </summary>
        D_Hz_9397p3 = 122,
        
        /// <summary>
        ///            DSharp Hz 9956.1
        ///            </summary>
        DSharp_Hz_9956p1 = 123,
        
        /// <summary>
        ///            E Hz 10548.1
        ///            </summary>
        E_Hz_10548p1 = 124,
        
        /// <summary>
        ///            F Hz 11175.3
        ///            </summary>
        F_Hz_11175p3 = 125,
        
        /// <summary>
        ///            FSharp Hz 11839.8
        ///            </summary>
        FSharp_Hz_11839p8 = 126,
        
        /// <summary>
        ///            G Hz 12543.9
        ///            </summary>
        G_Hz_12543p9 = 127,
    }
    
    /// <summary>
    ///            iRobot Leds
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaLedBits")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the robot\'s LEDs.")]
    [global::System.FlagsAttribute()]
    public enum RoombaLedBits : int {
        
        /// <summary>
        ///            Off
        ///            </summary>
        Off = 0,
        
        /// <summary>
        ///            Dirt Detect
        ///            </summary>
        DirtDetect = 1,
        
        /// <summary>
        ///            Max Led
        ///            </summary>
        Max = 2,
        
        /// <summary>
        ///            Create center "Play" Button
        ///            </summary>
        CreatePlay = 2,
        
        /// <summary>
        ///            Clean Led
        ///            </summary>
        Clean = 4,
        
        /// <summary>
        ///            Spot Led
        ///            </summary>
        Spot = 8,
        
        /// <summary>
        ///            Create right "Advance" button
        ///            </summary>
        CreateAdvance = 8,
        
        /// <summary>
        ///            Status Led - Red
        ///            </summary>
        StatusRed = 16,
        
        /// <summary>
        ///            Status Led - Green
        ///            </summary>
        StatusGreen = 32,
        
        /// <summary>
        ///            Status Led - Amber
        ///            </summary>
        StatusAmber = 48,
        
        /// <summary>
        ///            Unused Bit 7
        ///            </summary>
        Bit7 = 64,
        
        /// <summary>
        ///            Unused Bit 8
        ///            </summary>
        Bit8 = 128,
    }
    
    /// <summary>
    ///            Roomba Cleaning Motors
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaMotorBits")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the flags (bit settings) for accessing the cleaning motors.")]
    [global::System.FlagsAttribute()]
    public enum RoombaMotorBits : int {
        
        /// <summary>
        ///            Side Brush Motor
        ///            </summary>
        SideBrush = 1,
        
        /// <summary>
        ///            Vacuum Motor
        ///            </summary>
        Vacuum = 2,
        
        /// <summary>
        ///            Main Brush Motor
        ///            </summary>
        MainBrush = 4,
        
        /// <summary>
        ///            Not Defined Flag 0x08
        ///            </summary>
        Bit4 = 8,
        
        /// <summary>
        ///            Not Defined Flag 0x10
        ///            </summary>
        Bit5 = 16,
        
        /// <summary>
        ///            Not Defined Flag 0x20
        ///            </summary>
        Bit6 = 32,
        
        /// <summary>
        ///            Not Defined Flag 0x40
        ///            </summary>
        Bit7 = 64,
        
        /// <summary>
        ///            Not Defined Flag 0x80
        ///            </summary>
        Bit8 = 128,
    }
    
    /// <summary>
    ///            Roomba Commands
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaCommandCode")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the set of command codes.")]
    public enum RoombaCommandCode : byte {
        
        /// <summary>
        ///            No Command specified
        ///            </summary>
        None = 255,
        
        /// <summary>
        ///            All Sensor Data Return Packet
        ///            </summary>
        ReturnAllRoomba = 0,
        
        /// <summary>
        ///            Sensors Return Packet
        ///            </summary>
        ReturnBumpsCliffsAndWalls = 1,
        
        /// <summary>
        ///            Pose Return Packet
        ///            </summary>
        ReturnPose = 2,
        
        /// <summary>
        ///            Power Return Packet
        ///            </summary>
        ReturnPower = 3,
        
        /// <summary>
        ///            Power Return Packet
        ///            </summary>
        ReturnCliffDetail = 4,
        
        /// <summary>
        ///            Telemetry Return Packet
        ///            </summary>
        ReturnTelemetry = 5,
        
        /// <summary>
        ///            All Create Sensor data
        ///            </summary>
        ReturnAllCreate = 6,
        
        /// <summary>
        ///            Results of the QueryList
        ///            </summary>
        ReturnQueryList = 7,
        
        /// <summary>
        ///            Soft Reset of the iRobot
        ///            </summary>
        OsmoReset = 7,
        
        /// <summary>
        ///            Request the Firmware Date (Roomba Command Code 0x08)
        ///            </summary>
        FirmwareDate = 8,
        
        /// <summary>
        ///            Results from define script command
        ///            </summary>
        ReturnDefineScript = 9,
        
        /// <summary>
        ///            Results from show script command
        ///            </summary>
        ReturnScript = 10,
        
        /// <summary>
        ///            Return Firmware Date
        ///            </summary>
        ReturnFirmwareDate = 18,
        
        /// <summary>
        ///            Results from stream notifications
        ///            </summary>
        ReturnStream = 19,
        
        /// <summary>
        ///            Place Roomba in Passive Mode
        ///            </summary>
        Start = 128,
        
        /// <summary>
        ///            Set Roomba internal Baud Rate
        ///            </summary>
        Baud = 129,
        
        /// <summary>
        ///            Place Roomba from Passive to Safe Mode
        ///            </summary>
        Control = 130,
        
        /// <summary>
        ///            Place Roomba from Full to Safe Mode
        ///            </summary>
        Safe = 131,
        
        /// <summary>
        ///            Place Roomba from Safe to Full Mode
        ///            </summary>
        Full = 132,
        
        /// <summary>
        ///            Place Roomba in Sleep Mode
        ///            <remarks>from Safe or Full Mode</remarks></summary>
        Power = 133,
        
        /// <summary>
        ///            Start Spot Cleaning
        ///            <remarks>From Safe or Full Mode</remarks></summary>
        Spot = 134,
        
        /// <summary>
        ///            Start Cleaning Cycle
        ///            For Create, seeks to cover the entire room
        ///            <remarks>From Safe or Full Mode</remarks></summary>
        Clean = 135,
        
        /// <summary>
        ///            Start Maximum time Cleaning Cycle
        ///            <remarks>From Safe or Full Mode</remarks></summary>
        Max = 136,
        
        /// <summary>
        ///            Start an iRobot Create Demo
        ///            </summary>
        Demo = 136,
        
        /// <summary>
        ///            Control Roomba's Wheels
        ///            <remarks>From Safe or Full Mode</remarks></summary>
        Drive = 137,
        
        /// <summary>
        ///            Control Roomba's cleaning motors
        ///            <remarks>From Safe or Full Mode</remarks></summary>
        Motors = 138,
        
        /// <summary>
        ///            Set Roomba's display LEDs.
        ///            <remarks>From Safe or Full Mode</remarks></summary>
        Leds = 139,
        
        /// <summary>
        ///            Define a Song to be played later
        ///            <remarks>From Passive, Safe or Full Mode</remarks></summary>
        DefineSong = 140,
        
        /// <summary>
        ///            Play a Song
        ///            <remarks>From Safe or Full Mode</remarks></summary>
        PlaySong = 141,
        
        /// <summary>
        ///            Request Sensor Data
        ///            <remarks>From Passive, Safe or Full Mode</remarks></summary>
        Sensors = 142,
        
        /// <summary>
        ///            Force Seeking Dock
        ///            <remarks>Valid from any mode</remarks></summary>
        ForceSeekingDock = 143,
        
        /// <summary>
        ///            PWM Low Side Drivers
        ///            </summary>
        PWMLowSideDrivers = 144,
        
        DriveDirect = 145,
        
        /// <summary>
        ///            Digital Outputs
        ///            </summary>
        DigitalOutputs = 147,
        
        /// <summary>
        ///            Starts a continuous stream of data packets.
        ///            The list of packets requested is sent every 15 ms,
        ///            which is the rate Create uses to update data.
        ///            </summary>
        Stream = 148,
        
        /// <summary>
        ///            Query for a list of sensor packets.
        ///            The result is returned once.
        ///            </summary>
        QueryList = 149,
        
        /// <summary>
        ///            Pause or Resume notifications without clearing the list of requested packets.
        ///            </summary>
        StreamPauseResume = 150,
        
        /// <summary>
        ///            Send IR
        ///            </summary>
        SendIR = 151,
        
        /// <summary>
        ///            Define a script
        ///            </summary>
        DefineScript = 152,
        
        /// <summary>
        ///            Play a script
        ///            </summary>
        PlayScript = 153,
        
        /// <summary>
        ///            Show a script
        ///            </summary>
        ShowScript = 154,
        
        /// <summary>
        ///            Wait specified time
        ///            </summary>
        WaitTime = 155,
        
        /// <summary>
        ///            Wait until distance is driven
        ///            </summary>
        WaitDistance = 156,
        
        /// <summary>
        ///            Wait until angle is turned
        ///            </summary>
        WaitAngle = 157,
        
        /// <summary>
        ///            Wait for an event to occur
        ///            </summary>
        WaitEvent = 158,
    }
    
    /// <summary>
    ///            Roomba Query Packets
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaQueryType")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the type of sensor data requested.")]
    public enum RoombaQueryType : byte {
        
        /// <summary>
        ///            All Sensor Data Return Packet
        ///            </summary>
        ReturnAll = 0,
        
        /// <summary>
        ///            Sensors Return Packet
        ///            </summary>
        ReturnSensors = 1,
        
        /// <summary>
        ///            Pose Return Packet
        ///            </summary>
        ReturnPose = 2,
        
        /// <summary>
        ///            Power Return Packet
        ///            </summary>
        ReturnPower = 3,
        
        /// <summary>
        ///            Power Return Packet
        ///            </summary>
        ReturnCliffDetail = 4,
        
        /// <summary>
        ///            Telemetry Return Packet
        ///            </summary>
        ReturnTelemetry = 5,
        
        /// <summary>
        ///            All Create Sensor data
        ///            </summary>
        ReturnAllCreate = 6,
    }
    
    /// <summary>
    ///            Type of sensor data requested
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaReturnPacketCode")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the type of sensor data requested.")]
    public enum RoombaReturnPacketCode : int {
        
        /// <summary>
        ///            Retrieve All Data
        ///            </summary>
        All = 0,
        
        /// <summary>
        ///            Retrieve Sensor Packet
        ///            </summary>
        Sensors = 1,
        
        /// <summary>
        ///            Retrieve Pose Packet
        ///            </summary>
        Pose = 2,
        
        /// <summary>
        ///            Retrieve Power Packet
        ///            </summary>
        Power = 3,
    }
    
    /// <summary>
    ///            Internal Roomba Baud Rate
    ///            <remarks>When using Bluetooth connection,
    ///            this setting may not be correct</remarks></summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", ElementName="RoombaBaudCode")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the code to set the baud rate.")]
    public enum RoombaBaudCode : int {
        
        /// <summary>
        ///            300 Baud
        ///            </summary>
        Baud300 = 0,
        
        /// <summary>
        ///            600 Baud
        ///            </summary>
        Baud600 = 1,
        
        /// <summary>
        ///            1200 Baud
        ///            </summary>
        Baud1200 = 2,
        
        /// <summary>
        ///            2400 Baud
        ///            </summary>
        Baud2400 = 3,
        
        /// <summary>
        ///            4800 Baud
        ///            </summary>
        Baud4800 = 4,
        
        /// <summary>
        ///            9600 Baud
        ///            </summary>
        Baud9600 = 5,
        
        /// <summary>
        ///            14400 Baud
        ///            </summary>
        Baud14400 = 6,
        
        /// <summary>
        ///            19200 Baud
        ///            </summary>
        Baud19200 = 7,
        
        /// <summary>
        ///            28800 Baud
        ///            </summary>
        Baud28800 = 8,
        
        /// <summary>
        ///            38400 Baud
        ///            </summary>
        Baud38400 = 9,
        
        /// <summary>
        ///            57600 Baud
        ///            </summary>
        Baud57600 = 10,
        
        /// <summary>
        ///            115200 Baud
        ///            </summary>
        Baud115200 = 11,
    }
    
    /// <summary>
    ///            iRobot Roomba and Create Service Implementation
    ///            </summary>
    /// <remarks>The iRobot Roomba service calls to the serial port and may block a thread
    ///            The ActivationSettings attribute with Sharing == false makes the runtime
    ///            dedicate a dispatcher thread pool just for this service.</remarks>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to an iRobot Create or Roomba.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) iRobot� Create / Roomba")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/01/irobot.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.RoombaOperations = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaOperations();
            this.CreateOperations = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateOperations();
            this.IRobotLiteOperations = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.IRobotLiteOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.RoombaOperations, "http://schemas.microsoft.com/robotics/2007/01/irobot.user.html", "RoombaOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.CreateOperations, "http://schemas.microsoft.com/robotics/2007/01/irobot/create.user.html", "CreateOperations", "/create"), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.IRobotLiteOperations, "http://schemas.microsoft.com/robotics/2007/02/irobotlite.user.html", "IRobotLiteOperations", "/lite"));
        }
        
        public global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaOperations RoombaOperations;
        
        public global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateOperations CreateOperations;
        
        public global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.IRobotLiteOperations IRobotLiteOperations;
    }
}
namespace Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy {
    
    
    /// <summary>
    ///            Subscribe Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Subscribe")]
    [global::System.ComponentModel.DescriptionAttribute("Subscribes to iRobot service notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.IRobotSensorUpdatesPort> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort, global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.IRobotSensorUpdatesPort notificationPort) : 
                base(body, responsePort, notificationPort) {
        }
    }
    
    /// <summary>
    ///            ReturnAll Notification
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) UpdateAll")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to all sensors.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateAll : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateAll() {
        }
        
        public UpdateAll(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body) : 
                base(body) {
        }
        
        public UpdateAll(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ReturnSensors Notification
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) UpdateBumpsCliffsAndWalls")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to bumper, cliff, or wall sensors.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateBumpsCliffsAndWalls : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateBumpsCliffsAndWalls() {
        }
        
        public UpdateBumpsCliffsAndWalls(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body) : 
                base(body) {
        }
        
        public UpdateBumpsCliffsAndWalls(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ReturnPose Notification
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) UpdatePose")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the robot\'s pose.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdatePose : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdatePose() {
        }
        
        public UpdatePose(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body) : 
                base(body) {
        }
        
        public UpdatePose(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ReturnPower Notification
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) UpdatePower")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the power setting.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdatePower : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdatePower() {
        }
        
        public UpdatePower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body) : 
                base(body) {
        }
        
        public UpdatePower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Update the Roomba Mode
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) UpdateMode")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the current operating mode.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateMode : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateMode() {
        }
        
        public UpdateMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body) : 
                base(body) {
        }
        
        public UpdateMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            CliffDetail Results
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) UpdateCliffDetail")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the iRobot Create\'s cliff sensors.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateCliffDetail : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateCliffDetail() {
        }
        
        public UpdateCliffDetail(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body) : 
                base(body) {
        }
        
        public UpdateCliffDetail(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Telemetry Results
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update to the iRobot Create\'s telemetry.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateTelemetry : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateTelemetry() {
        }
        
        public UpdateTelemetry(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body) : 
                base(body) {
        }
        
        public UpdateTelemetry(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            iRobot Create Notification Results
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates an update from iRobot Create stream notifications.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateNotifications : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateNotifications() {
        }
        
        public UpdateNotifications(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body) : 
                base(body) {
        }
        
        public UpdateNotifications(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            iRobot Sensor Updates Response Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("iRobot Sensor Updates Response Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class IRobotSensorUpdatesPort : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry, global:: Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications> {
        
        public IRobotSensorUpdatesPort() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateAll() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateAll(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateAll(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateAll(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateAll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateBumpsCliffsAndWalls() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateBumpsCliffsAndWalls(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateBumpsCliffsAndWalls(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateBumpsCliffsAndWalls(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateBumpsCliffsAndWalls(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdatePose() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePose(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdatePose(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePose(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePose(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdatePower() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePower(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdatePower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdatePower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdatePower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateMode() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateMode(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateMode(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateMode(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateCliffDetail() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateCliffDetail(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateCliffDetail(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateCliffDetail(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateCliffDetail(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateTelemetry() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateTelemetry(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateTelemetry(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateTelemetry(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateTelemetry(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateNotifications() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateNotifications(out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateNotifications(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            }
            global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateNotifications(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream body, out global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.UpdateNotifications(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Roomba Service Contract
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to iRobot Create or Roomba sensor notifications.\n(Partner with th" +
        "e \'iRobot� Create / Roomba\' service.)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) iRobot� Sensors")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/01/irobot/notifications.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/01/irobot/notifications.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/01/irobot/notifications.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.IRobotSensorUpdatesPort = new global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.IRobotSensorUpdatesPort();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.IRobotSensorUpdatesPort, "http://schemas.microsoft.com/robotics/2007/01/irobot/notifications.user.html", "IRobotSensorUpdatesPort", ""));
        }
        
        public global::Microsoft.Robotics.Services.IRobot.SensorUpdates.Proxy.IRobotSensorUpdatesPort IRobotSensorUpdatesPort;
    }
}
