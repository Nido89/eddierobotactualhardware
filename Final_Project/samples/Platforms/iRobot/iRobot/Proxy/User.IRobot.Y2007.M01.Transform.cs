//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.IRobot.Y2007.M01, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f9074033" +
    "fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaState_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_RoombaState_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnSensors));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_ReturnSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnSensors));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaReturnPacket_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaReturnPacket));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaReturnPacket), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_RoombaReturnPacket_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaReturnPacket));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaCommand_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaCommand));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaCommand), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_RoombaCommand_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaCommand));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPose_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnPose));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_ReturnPose_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPose));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnPower));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_ReturnPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPower));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDefineSong_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdDefineSong));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdDefineSong_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDefineSong));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaNote_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaNote));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_RoombaNote_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaNote));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnCliffDetail_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnCliffDetail));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_ReturnCliffDetail_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnCliffDetail));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnTelemetry_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnTelemetry));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_ReturnTelemetry_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnTelemetry));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnAll_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnAll));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnAll), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_ReturnAll_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnAll));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnMode_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnMode));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnMode), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_ReturnMode_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnMode));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnStream_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnStream));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.ReturnStream), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_ReturnStream_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnStream));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_SensorValue_TO_Microsoft_Robotics_Services_IRobot_Create_SensorValue));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.SensorValue), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_SensorValue_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_SensorValue));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_IRobotConnect_TO_Microsoft_Robotics_Services_IRobot_Roomba_IRobotConnect));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.IRobotConnect), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_IRobotConnect_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_IRobotConnect));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSetMode_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdSetMode));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSetMode), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdSetMode_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSetMode));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaCommandReceived_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaCommandReceived));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaCommandReceived), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_RoombaCommandReceived_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaCommandReceived));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdLeds_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdLeds));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdLeds), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdLeds_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdLeds));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdPlaySong_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdPlaySong));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdPlaySong), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdPlaySong_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdPlaySong));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdSensors));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSensors), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSensors));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnFirmwareDate_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnFirmwareDate));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnFirmwareDate), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_ReturnFirmwareDate_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnFirmwareDate));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnQueryList_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnQueryList));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.ReturnQueryList), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_ReturnQueryList_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnQueryList));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDrive_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdDrive));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDrive), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdDrive_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDrive));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDriveDirect_TO_Microsoft_Robotics_Services_IRobot_Create_CmdDriveDirect));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdDriveDirect), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdDriveDirect_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDriveDirect));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Lite_Proxy_iRobotPerf_TO_Microsoft_Robotics_Services_IRobot_Lite_iRobotPerf));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Lite.iRobotPerf), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Lite_iRobotPerf_TO_Microsoft_Robotics_Services_IRobot_Lite_Proxy_iRobotPerf));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Lite_Proxy_PrivateState_TO_Microsoft_Robotics_Services_IRobot_Lite_PrivateState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Lite.PrivateState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Lite_PrivateState_TO_Microsoft_Robotics_Services_IRobot_Lite_Proxy_PrivateState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDemo_TO_Microsoft_Robotics_Services_IRobot_Create_CmdDemo));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdDemo), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdDemo_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDemo));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdPWMLowSideDrivers_TO_Microsoft_Robotics_Services_IRobot_Create_CmdPWMLowSideDrivers));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdPWMLowSideDrivers), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdPWMLowSideDrivers_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdPWMLowSideDrivers));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDigitalOutputs_TO_Microsoft_Robotics_Services_IRobot_Create_CmdDigitalOutputs));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdDigitalOutputs), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdDigitalOutputs_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDigitalOutputs));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdStream_TO_Microsoft_Robotics_Services_IRobot_Create_CmdStream));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdStream), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdStream_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdStream));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdQueryList_TO_Microsoft_Robotics_Services_IRobot_Create_CmdQueryList));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdQueryList), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdQueryList_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdQueryList));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdStreamPauseResume_TO_Microsoft_Robotics_Services_IRobot_Create_CmdStreamPauseResume));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdStreamPauseResume), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdStreamPauseResume_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdStreamPauseResume));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdSendIR_TO_Microsoft_Robotics_Services_IRobot_Create_CmdSendIR));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdSendIR), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdSendIR_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdSendIR));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDefineScript_TO_Microsoft_Robotics_Services_IRobot_Create_CmdDefineScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdDefineScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdDefineScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDefineScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnDefineScript_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnDefineScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.ReturnDefineScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_ReturnDefineScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnDefineScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdPlayScript_TO_Microsoft_Robotics_Services_IRobot_Create_CmdPlayScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdPlayScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdPlayScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdPlayScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdShowScript_TO_Microsoft_Robotics_Services_IRobot_Create_CmdShowScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdShowScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdShowScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdShowScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnScript_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.ReturnScript), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_ReturnScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnScript));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitTime_TO_Microsoft_Robotics_Services_IRobot_Create_CmdWaitTime));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitTime), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdWaitTime_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitTime));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitDistance_TO_Microsoft_Robotics_Services_IRobot_Create_CmdWaitDistance));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitDistance), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdWaitDistance_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitDistance));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitAngle_TO_Microsoft_Robotics_Services_IRobot_Create_CmdWaitAngle));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitAngle), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdWaitAngle_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitAngle));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitEvent_TO_Microsoft_Robotics_Services_IRobot_Create_CmdWaitEvent));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitEvent), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Create_CmdWaitEvent_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitEvent));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdMotors_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdMotors));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdMotors), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdMotors_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdMotors));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdForceSeekingDock_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdForceSeekingDock));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdForceSeekingDock), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdForceSeekingDock_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdForceSeekingDock));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdClean_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdClean));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdClean), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdClean_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdClean));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSpot_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdSpot));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSpot), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdSpot_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSpot));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdMax_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdMax));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdMax), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdMax_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdMax));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdFirmwareDate_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdFirmwareDate));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdFirmwareDate), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_CmdFirmwareDate_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdFirmwareDate));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdStart_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdStart));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdStart), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdStart_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdStart));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdControl_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdControl));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdControl), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdControl_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdControl));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdSafe_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdSafe));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdSafe), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdSafe_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdSafe));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdFull_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdFull));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdFull), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdFull_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdFull));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdPower));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdPower), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdPower));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdReset), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdReset_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdReset));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdReset), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdReset_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdReset));
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaState_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaState(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaState target = new global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaState();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState)(transformFrom));
            target.Name = from.Name;
            target.FirmwareDate = from.FirmwareDate;
            target.SerialPort = from.SerialPort;
            target.BaudRate = from.BaudRate;
            target.IRobotModel = ((global::Microsoft.Robotics.Services.IRobot.Roomba.IRobotModel)(((int)(from.IRobotModel))));
            target.ConnectionType = ((global::Microsoft.Robotics.Services.IRobot.Roomba.iRobotConnectionType)(((int)(from.ConnectionType))));
            target.StopOnResync = from.StopOnResync;
            target.Mode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.Mode))));
            target.MaintainMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.MaintainMode))));
            if ((from.Sensors != null)) {
                target.Sensors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors)(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnSensors(from.Sensors)));
            }
            else {
                target.Sensors = null;
            }
            if ((from.Pose != null)) {
                target.Pose = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose)(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPose_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnPose(from.Pose)));
            }
            else {
                target.Pose = null;
            }
            if ((from.Power != null)) {
                target.Power = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower)(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnPower(from.Power)));
            }
            else {
                target.Power = null;
            }
            target.LastUpdated = from.LastUpdated;
            target.PollingInterval = from.PollingInterval;
            if ((from.SongDefinitions != null)) {
                int count = from.SongDefinitions.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong tmp0 = default(global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong);
                    if ((from.SongDefinitions[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong)(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDefineSong_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdDefineSong(from.SongDefinitions[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.SongDefinitions = tmp;
            }
            else {
                target.SongDefinitions = null;
            }
            target.WaitForConnect = from.WaitForConnect;
            if ((from.RobotImage != null)) {
                int count0 = from.RobotImage.Length;
                byte[] tmp1 = new byte[count0];
                global::System.Buffer.BlockCopy(from.RobotImage, 0, tmp1, 0, global::System.Buffer.ByteLength(from.RobotImage));
                target.RobotImage = tmp1;
            }
            else {
                target.RobotImage = null;
            }
            if ((from.CliffDetail != null)) {
                target.CliffDetail = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail)(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnCliffDetail_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnCliffDetail(from.CliffDetail)));
            }
            else {
                target.CliffDetail = null;
            }
            if ((from.Telemetry != null)) {
                target.Telemetry = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry)(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnTelemetry_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnTelemetry(from.Telemetry)));
            }
            else {
                target.Telemetry = null;
            }
            if ((from.CreateNotifications != null)) {
                int count1 = from.CreateNotifications.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.CreateSensorPacket> tmp2 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.CreateSensorPacket>(count1);
                for (int index0 = 0; (index0 < count1); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Create.CreateSensorPacket tmp3 = default(global::Microsoft.Robotics.Services.IRobot.Create.CreateSensorPacket);
                    tmp3 = ((global::Microsoft.Robotics.Services.IRobot.Create.CreateSensorPacket)(((int)(from.CreateNotifications[index0]))));
                    tmp2.Add(tmp3);
                }
                target.CreateNotifications = tmp2;
            }
            else {
                target.CreateNotifications = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_RoombaState_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaState(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaState();
            global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaState from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaState)(transformFrom));
            target.Name = from.Name;
            target.FirmwareDate = from.FirmwareDate;
            target.SerialPort = from.SerialPort;
            target.BaudRate = from.BaudRate;
            target.IRobotModel = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotModel)(((int)(from.IRobotModel))));
            target.ConnectionType = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.iRobotConnectionType)(((int)(from.ConnectionType))));
            target.StopOnResync = from.StopOnResync;
            target.Mode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.Mode))));
            target.MaintainMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.MaintainMode))));
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors tmp = from.Sensors;
            if ((tmp != null)) {
                target.Sensors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors)(Microsoft_Robotics_Services_IRobot_Roomba_ReturnSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnSensors(tmp)));
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose tmp0 = from.Pose;
            if ((tmp0 != null)) {
                target.Pose = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose)(Microsoft_Robotics_Services_IRobot_Roomba_ReturnPose_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPose(tmp0)));
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower tmp1 = from.Power;
            if ((tmp1 != null)) {
                target.Power = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower)(Microsoft_Robotics_Services_IRobot_Roomba_ReturnPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPower(tmp1)));
            }
            target.LastUpdated = from.LastUpdated;
            target.PollingInterval = from.PollingInterval;
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong> tmp2 = from.SongDefinitions;
            if ((tmp2 != null)) {
                int count = tmp2.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong> tmp3 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong tmp4 = default(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong);
                    global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong tmp5 = tmp2[index];
                    if ((tmp5 != null)) {
                        tmp4 = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong)(Microsoft_Robotics_Services_IRobot_Roomba_CmdDefineSong_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDefineSong(tmp5)));
                    }
                    tmp3.Add(tmp4);
                }
                target.SongDefinitions = tmp3;
            }
            target.WaitForConnect = from.WaitForConnect;
            byte[] tmp6 = from.RobotImage;
            if ((tmp6 != null)) {
                int count0 = tmp6.Length;
                byte[] tmp7 = new byte[count0];
                global::System.Buffer.BlockCopy(tmp6, 0, tmp7, 0, global::System.Buffer.ByteLength(tmp6));
                target.RobotImage = tmp7;
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail tmp8 = from.CliffDetail;
            if ((tmp8 != null)) {
                target.CliffDetail = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail)(Microsoft_Robotics_Services_IRobot_Create_ReturnCliffDetail_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnCliffDetail(tmp8)));
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry tmp9 = from.Telemetry;
            if ((tmp9 != null)) {
                target.Telemetry = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry)(Microsoft_Robotics_Services_IRobot_Create_ReturnTelemetry_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnTelemetry(tmp9)));
            }
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.CreateSensorPacket> tmp10 = from.CreateNotifications;
            if ((tmp10 != null)) {
                int count1 = tmp10.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket> tmp11 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket>(count1);
                for (int index0 = 0; (index0 < count1); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket tmp12 = default(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket);
                    tmp12 = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket)(((int)(tmp10[index0]))));
                    tmp11.Add(tmp12);
                }
                target.CreateNotifications = tmp11;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnSensors(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors target = new global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors)(transformFrom));
            target.BumpsWheeldrops = ((global::Microsoft.Robotics.Services.IRobot.Roomba.BumpsWheeldrops)(((int)(from.BumpsWheeldrops))));
            target.Wall = from.Wall;
            target.CliffLeft = from.CliffLeft;
            target.CliffFrontLeft = from.CliffFrontLeft;
            target.CliffFrontRight = from.CliffFrontRight;
            target.CliffRight = from.CliffRight;
            target.VirtualWall = from.VirtualWall;
            target.MotorOvercurrents = ((global::Microsoft.Robotics.Services.IRobot.Roomba.MotorOvercurrents)(((int)(from.MotorOvercurrents))));
            target.DirtDetectorLeft = from.DirtDetectorLeft;
            target.DirtDetectorRight = from.DirtDetectorRight;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_ReturnSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnSensors(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors();
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors)(transformFrom));
            target.BumpsWheeldrops = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.BumpsWheeldrops)(((int)(from.BumpsWheeldrops))));
            target.Wall = from.Wall;
            target.CliffLeft = from.CliffLeft;
            target.CliffFrontLeft = from.CliffFrontLeft;
            target.CliffFrontRight = from.CliffFrontRight;
            target.CliffRight = from.CliffRight;
            target.VirtualWall = from.VirtualWall;
            target.MotorOvercurrents = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.MotorOvercurrents)(((int)(from.MotorOvercurrents))));
            target.DirtDetectorLeft = from.DirtDetectorLeft;
            target.DirtDetectorRight = from.DirtDetectorRight;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaReturnPacket_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaReturnPacket(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaReturnPacket target = new global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaReturnPacket();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_RoombaReturnPacket_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaReturnPacket(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaReturnPacket();
            global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaReturnPacket from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaReturnPacket)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand _cachedInstance0 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommand();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaCommand _cachedInstance = new global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaCommand();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaCommand_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaCommand(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_RoombaCommand_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaCommand(object transformFrom) {
            return _cachedInstance0;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPose_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnPose(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose target = new global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose)(transformFrom));
            target.RemoteControlCommand = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RemoteIR)(((int)(from.RemoteControlCommand))));
            target.ButtonsRoomba = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ButtonsRoomba)(((int)(from.ButtonsRoomba))));
            target.ButtonsCreate = ((global::Microsoft.Robotics.Services.IRobot.Create.ButtonsCreate)(((int)(from.ButtonsCreate))));
            target.Distance = from.Distance;
            target.Angle = from.Angle;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_ReturnPose_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPose(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose();
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose)(transformFrom));
            target.RemoteControlCommand = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR)(((int)(from.RemoteControlCommand))));
            target.ButtonsRoomba = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ButtonsRoomba)(((int)(from.ButtonsRoomba))));
            target.ButtonsCreate = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ButtonsCreate)(((int)(from.ButtonsCreate))));
            target.Distance = from.Distance;
            target.Angle = from.Angle;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnPower(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower target = new global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower)(transformFrom));
            target.ChargingState = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ChargingState)(((int)(from.ChargingState))));
            target.Voltage = from.Voltage;
            target.Current = from.Current;
            target.Temperature = from.Temperature;
            target.Charge = from.Charge;
            target.Capacity = from.Capacity;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_ReturnPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPower(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower();
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower)(transformFrom));
            target.ChargingState = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ChargingState)(((int)(from.ChargingState))));
            target.Voltage = from.Voltage;
            target.Current = from.Current;
            target.Temperature = from.Temperature;
            target.Charge = from.Charge;
            target.Capacity = from.Capacity;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDefineSong_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdDefineSong(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong target = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong)(transformFrom));
            target.SongNumber = from.SongNumber;
            if ((from.Notes != null)) {
                int count = from.Notes.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote tmp0 = default(global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote);
                    if ((from.Notes[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote)(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaNote_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaNote(from.Notes[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.Notes = tmp;
            }
            else {
                target.Notes = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdDefineSong_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDefineSong(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong();
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDefineSong)(transformFrom));
            target.SongNumber = from.SongNumber;
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote> tmp = from.Notes;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote tmp1 = default(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote);
                    global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote)(Microsoft_Robotics_Services_IRobot_Roomba_RoombaNote_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaNote(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.Notes = tmp0;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaNote_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaNote(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote target = new global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote)(transformFrom));
            target.Tone = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaFrequency)(((int)(from.Tone))));
            target.Duration = from.Duration;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_RoombaNote_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaNote(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote();
            global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaNote)(transformFrom));
            target.Tone = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaFrequency)(((int)(from.Tone))));
            target.Duration = from.Duration;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnCliffDetail_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnCliffDetail(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail target = new global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail)(transformFrom));
            target.WallSignal = from.WallSignal;
            target.CliffLeftSignal = from.CliffLeftSignal;
            target.CliffFrontLeftSignal = from.CliffFrontLeftSignal;
            target.CliffFrontRightSignal = from.CliffFrontRightSignal;
            target.CliffRightSignal = from.CliffRightSignal;
            target.UserDigitalInputs = ((global::Microsoft.Robotics.Services.IRobot.Create.CargoBayDigitalInputs)(((int)(from.UserDigitalInputs))));
            target.UserAnalogInput = from.UserAnalogInput;
            target.ChargingSourcesAvailable = ((global::Microsoft.Robotics.Services.IRobot.Create.ChargingSourcesAvailable)(((int)(from.ChargingSourcesAvailable))));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_ReturnCliffDetail_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnCliffDetail(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail();
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail from = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail)(transformFrom));
            target.WallSignal = from.WallSignal;
            target.CliffLeftSignal = from.CliffLeftSignal;
            target.CliffFrontLeftSignal = from.CliffFrontLeftSignal;
            target.CliffFrontRightSignal = from.CliffFrontRightSignal;
            target.CliffRightSignal = from.CliffRightSignal;
            target.UserDigitalInputs = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CargoBayDigitalInputs)(((int)(from.UserDigitalInputs))));
            target.UserAnalogInput = from.UserAnalogInput;
            target.ChargingSourcesAvailable = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ChargingSourcesAvailable)(((int)(from.ChargingSourcesAvailable))));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnTelemetry_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnTelemetry(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry target = new global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry)(transformFrom));
            target.OIMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.OIMode))));
            target.SongNumber = from.SongNumber;
            target.SongPlaying = from.SongPlaying;
            target.NumberOfStreamPackets = from.NumberOfStreamPackets;
            target.RequestedVelocity = from.RequestedVelocity;
            target.RequestedRadius = from.RequestedRadius;
            target.RequestedRightVelocity = from.RequestedRightVelocity;
            target.RequestedLeftVelocity = from.RequestedLeftVelocity;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_ReturnTelemetry_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnTelemetry(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry();
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry from = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry)(transformFrom));
            target.OIMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.OIMode))));
            target.SongNumber = from.SongNumber;
            target.SongPlaying = from.SongPlaying;
            target.NumberOfStreamPackets = from.NumberOfStreamPackets;
            target.RequestedVelocity = from.RequestedVelocity;
            target.RequestedRadius = from.RequestedRadius;
            target.RequestedRightVelocity = from.RequestedRightVelocity;
            target.RequestedLeftVelocity = from.RequestedLeftVelocity;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnAll_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnAll(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnAll target = new global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnAll();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            if ((from.Sensors != null)) {
                target.Sensors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors)(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnSensors(from.Sensors)));
            }
            else {
                target.Sensors = null;
            }
            if ((from.Pose != null)) {
                target.Pose = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose)(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPose_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnPose(from.Pose)));
            }
            else {
                target.Pose = null;
            }
            if ((from.Power != null)) {
                target.Power = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower)(Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnPower(from.Power)));
            }
            else {
                target.Power = null;
            }
            if ((from.CliffDetail != null)) {
                target.CliffDetail = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail)(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnCliffDetail_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnCliffDetail(from.CliffDetail)));
            }
            else {
                target.CliffDetail = null;
            }
            if ((from.Telemetry != null)) {
                target.Telemetry = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry)(Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnTelemetry_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnTelemetry(from.Telemetry)));
            }
            else {
                target.Telemetry = null;
            }
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_ReturnAll_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnAll(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnAll();
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnAll from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnAll)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnSensors tmp = from.Sensors;
            if ((tmp != null)) {
                target.Sensors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnSensors)(Microsoft_Robotics_Services_IRobot_Roomba_ReturnSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnSensors(tmp)));
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPose tmp0 = from.Pose;
            if ((tmp0 != null)) {
                target.Pose = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPose)(Microsoft_Robotics_Services_IRobot_Roomba_ReturnPose_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPose(tmp0)));
            }
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnPower tmp1 = from.Power;
            if ((tmp1 != null)) {
                target.Power = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnPower)(Microsoft_Robotics_Services_IRobot_Roomba_ReturnPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnPower(tmp1)));
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnCliffDetail tmp2 = from.CliffDetail;
            if ((tmp2 != null)) {
                target.CliffDetail = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnCliffDetail)(Microsoft_Robotics_Services_IRobot_Create_ReturnCliffDetail_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnCliffDetail(tmp2)));
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnTelemetry tmp3 = from.Telemetry;
            if ((tmp3 != null)) {
                target.Telemetry = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnTelemetry)(Microsoft_Robotics_Services_IRobot_Create_ReturnTelemetry_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnTelemetry(tmp3)));
            }
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnMode_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnMode(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnMode target = new global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnMode();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.IRobotModel = ((global::Microsoft.Robotics.Services.IRobot.Roomba.IRobotModel)(((int)(from.IRobotModel))));
            target.MaintainMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.MaintainMode))));
            target.FirmwareDate = from.FirmwareDate;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_ReturnMode_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnMode(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnMode();
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnMode from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnMode)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.IRobotModel = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotModel)(((int)(from.IRobotModel))));
            target.MaintainMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.MaintainMode))));
            target.FirmwareDate = from.FirmwareDate;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnStream_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnStream(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnStream target = new global::Microsoft.Robotics.Services.IRobot.Create.ReturnStream();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream)(transformFrom));
            if ((from.StreamPacket != null)) {
                int count = from.StreamPacket.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(from.StreamPacket, 0, tmp, 0, global::System.Buffer.ByteLength(from.StreamPacket));
                target.StreamPacket = tmp;
            }
            else {
                target.StreamPacket = null;
            }
            if ((from.NamedValues != null)) {
                int count0 = from.NamedValues.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.SensorValue> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.SensorValue>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Create.SensorValue tmp1 = default(global::Microsoft.Robotics.Services.IRobot.Create.SensorValue);
                    if ((from.NamedValues[index] != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.IRobot.Create.SensorValue)(Microsoft_Robotics_Services_IRobot_Create_Proxy_SensorValue_TO_Microsoft_Robotics_Services_IRobot_Create_SensorValue(from.NamedValues[index])));
                    }
                    else {
                        tmp1 = null;
                    }
                    tmp0.Add(tmp1);
                }
                target.NamedValues = tmp0;
            }
            else {
                target.NamedValues = null;
            }
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_ReturnStream_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnStream(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnStream();
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnStream from = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnStream)(transformFrom));
            byte[] tmp = from.StreamPacket;
            if ((tmp != null)) {
                int count = tmp.Length;
                byte[] tmp0 = new byte[count];
                global::System.Buffer.BlockCopy(tmp, 0, tmp0, 0, global::System.Buffer.ByteLength(tmp));
                target.StreamPacket = tmp0;
            }
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.SensorValue> tmp1 = from.NamedValues;
            if ((tmp1 != null)) {
                int count0 = tmp1.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue> tmp2 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue tmp3 = default(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue);
                    global::Microsoft.Robotics.Services.IRobot.Create.SensorValue tmp4 = tmp1[index];
                    if ((tmp4 != null)) {
                        tmp3 = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue)(Microsoft_Robotics_Services_IRobot_Create_SensorValue_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_SensorValue(tmp4)));
                    }
                    tmp2.Add(tmp3);
                }
                target.NamedValues = tmp2;
            }
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_SensorValue_TO_Microsoft_Robotics_Services_IRobot_Create_SensorValue(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.SensorValue target = new global::Microsoft.Robotics.Services.IRobot.Create.SensorValue();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue)(transformFrom));
            target.Sensor = ((global::Microsoft.Robotics.Services.IRobot.Create.CreateSensorPacket)(((int)(from.Sensor))));
            target.Value = from.Value;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_SensorValue_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_SensorValue(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.SensorValue();
            global::Microsoft.Robotics.Services.IRobot.Create.SensorValue from = ((global::Microsoft.Robotics.Services.IRobot.Create.SensorValue)(transformFrom));
            target.Sensor = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket)(((int)(from.Sensor))));
            target.Value = from.Value;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect _cachedInstance2 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.IRobotConnect();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.IRobotConnect _cachedInstance1 = new global::Microsoft.Robotics.Services.IRobot.Roomba.IRobotConnect();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_IRobotConnect_TO_Microsoft_Robotics_Services_IRobot_Roomba_IRobotConnect(object transformFrom) {
            return _cachedInstance1;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_IRobotConnect_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_IRobotConnect(object transformFrom) {
            return _cachedInstance2;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSetMode_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdSetMode(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSetMode target = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSetMode();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.MaintainMode = from.MaintainMode;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdSetMode_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSetMode(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSetMode();
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSetMode from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSetMode)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.MaintainMode = from.MaintainMode;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaCommandReceived_TO_Microsoft_Robotics_Services_IRobot_Roomba_RoombaCommandReceived(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaCommandReceived target = new global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaCommandReceived();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_RoombaCommandReceived_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_RoombaCommandReceived(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaCommandReceived();
            global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaCommandReceived from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaCommandReceived)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdLeds_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdLeds(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdLeds target = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdLeds();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds)(transformFrom));
            target.Leds = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaLedBits)(((int)(from.Leds))));
            target.PowerColor = from.PowerColor;
            target.PowerIntensity = from.PowerIntensity;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdLeds_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdLeds(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds();
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdLeds from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.CmdLeds)(transformFrom));
            target.Leds = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits)(((int)(from.Leds))));
            target.PowerColor = from.PowerColor;
            target.PowerIntensity = from.PowerIntensity;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdPlaySong_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdPlaySong(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdPlaySong target = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdPlaySong();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong)(transformFrom));
            target.SongNumber = from.SongNumber;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdPlaySong_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdPlaySong(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong();
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdPlaySong from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.CmdPlaySong)(transformFrom));
            target.SongNumber = from.SongNumber;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdSensors(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSensors target = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSensors();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors)(transformFrom));
            target.CreateSensorPacket = ((global::Microsoft.Robotics.Services.IRobot.Create.CreateSensorPacket)(((int)(from.CreateSensorPacket))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdSensors_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSensors(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors();
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSensors from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSensors)(transformFrom));
            target.CreateSensorPacket = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket)(((int)(from.CreateSensorPacket))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnFirmwareDate_TO_Microsoft_Robotics_Services_IRobot_Roomba_ReturnFirmwareDate(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnFirmwareDate target = new global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnFirmwareDate();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate)(transformFrom));
            target.FirmwareDate = from.FirmwareDate;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_ReturnFirmwareDate_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_ReturnFirmwareDate(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.ReturnFirmwareDate();
            global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnFirmwareDate from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.ReturnFirmwareDate)(transformFrom));
            target.FirmwareDate = from.FirmwareDate;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnQueryList_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnQueryList(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnQueryList target = new global::Microsoft.Robotics.Services.IRobot.Create.ReturnQueryList();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_ReturnQueryList_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnQueryList(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnQueryList();
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnQueryList from = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnQueryList)(transformFrom));
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDrive_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdDrive(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDrive target = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDrive();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive)(transformFrom));
            target.Velocity = from.Velocity;
            target.Radius = from.Radius;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdDrive_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdDrive(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive();
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDrive from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.CmdDrive)(transformFrom));
            target.Velocity = from.Velocity;
            target.Radius = from.Radius;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDriveDirect_TO_Microsoft_Robotics_Services_IRobot_Create_CmdDriveDirect(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdDriveDirect target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdDriveDirect();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect)(transformFrom));
            target.RightVelocity = from.RightVelocity;
            target.LeftVelocity = from.LeftVelocity;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdDriveDirect_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDriveDirect(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdDriveDirect from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdDriveDirect)(transformFrom));
            target.RightVelocity = from.RightVelocity;
            target.LeftVelocity = from.LeftVelocity;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Lite_Proxy_iRobotPerf_TO_Microsoft_Robotics_Services_IRobot_Lite_iRobotPerf(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Lite.iRobotPerf target = new global::Microsoft.Robotics.Services.IRobot.Lite.iRobotPerf();
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf from = ((global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf)(transformFrom));
            target.PollingCount = from.PollingCount;
            target.DataWaitingCount = from.DataWaitingCount;
            target.PollsPerRequest = from.PollsPerRequest;
            target.MinResponseTimeMs = from.MinResponseTimeMs;
            target.MaxResponseTimeMs = from.MaxResponseTimeMs;
            target.TotalResponseTimeMs = from.TotalResponseTimeMs;
            target.TotalResponses = from.TotalResponses;
            target.AverageResponseMs = from.AverageResponseMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Lite_iRobotPerf_TO_Microsoft_Robotics_Services_IRobot_Lite_Proxy_iRobotPerf(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf target = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf();
            global::Microsoft.Robotics.Services.IRobot.Lite.iRobotPerf from = ((global::Microsoft.Robotics.Services.IRobot.Lite.iRobotPerf)(transformFrom));
            target.PollingCount = from.PollingCount;
            target.DataWaitingCount = from.DataWaitingCount;
            target.PollsPerRequest = from.PollsPerRequest;
            target.MinResponseTimeMs = from.MinResponseTimeMs;
            target.MaxResponseTimeMs = from.MaxResponseTimeMs;
            target.TotalResponseTimeMs = from.TotalResponseTimeMs;
            target.TotalResponses = from.TotalResponses;
            target.AverageResponseMs = from.AverageResponseMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Lite_Proxy_PrivateState_TO_Microsoft_Robotics_Services_IRobot_Lite_PrivateState(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Lite.PrivateState target = new global::Microsoft.Robotics.Services.IRobot.Lite.PrivateState();
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState from = ((global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState)(transformFrom));
            if ((from.iRobotPerf != null)) {
                target.iRobotPerf = ((global::Microsoft.Robotics.Services.IRobot.Lite.iRobotPerf)(Microsoft_Robotics_Services_IRobot_Lite_Proxy_iRobotPerf_TO_Microsoft_Robotics_Services_IRobot_Lite_iRobotPerf(from.iRobotPerf)));
            }
            else {
                target.iRobotPerf = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Lite_PrivateState_TO_Microsoft_Robotics_Services_IRobot_Lite_Proxy_PrivateState(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState target = new global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.PrivateState();
            global::Microsoft.Robotics.Services.IRobot.Lite.PrivateState from = ((global::Microsoft.Robotics.Services.IRobot.Lite.PrivateState)(transformFrom));
            global::Microsoft.Robotics.Services.IRobot.Lite.iRobotPerf tmp = from.iRobotPerf;
            if ((tmp != null)) {
                target.iRobotPerf = ((global::Microsoft.Robotics.Services.IRobot.Lite.Proxy.iRobotPerf)(Microsoft_Robotics_Services_IRobot_Lite_iRobotPerf_TO_Microsoft_Robotics_Services_IRobot_Lite_Proxy_iRobotPerf(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDemo_TO_Microsoft_Robotics_Services_IRobot_Create_CmdDemo(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdDemo target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdDemo();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo)(transformFrom));
            target.DemoMode = ((global::Microsoft.Robotics.Services.IRobot.Create.DemoMode)(((int)(from.DemoMode))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdDemo_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDemo(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdDemo from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdDemo)(transformFrom));
            target.DemoMode = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode)(((int)(from.DemoMode))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdPWMLowSideDrivers_TO_Microsoft_Robotics_Services_IRobot_Create_CmdPWMLowSideDrivers(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdPWMLowSideDrivers target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdPWMLowSideDrivers();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers)(transformFrom));
            target.DigitalOut0 = from.DigitalOut0;
            target.DigitalOut1 = from.DigitalOut1;
            target.DigitalOut2 = from.DigitalOut2;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdPWMLowSideDrivers_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdPWMLowSideDrivers(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdPWMLowSideDrivers from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdPWMLowSideDrivers)(transformFrom));
            target.DigitalOut0 = from.DigitalOut0;
            target.DigitalOut1 = from.DigitalOut1;
            target.DigitalOut2 = from.DigitalOut2;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDigitalOutputs_TO_Microsoft_Robotics_Services_IRobot_Create_CmdDigitalOutputs(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdDigitalOutputs target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdDigitalOutputs();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs)(transformFrom));
            target.DigitalOut0 = from.DigitalOut0;
            target.DigitalOut1 = from.DigitalOut1;
            target.DigitalOut2 = from.DigitalOut2;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdDigitalOutputs_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDigitalOutputs(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdDigitalOutputs from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdDigitalOutputs)(transformFrom));
            target.DigitalOut0 = from.DigitalOut0;
            target.DigitalOut1 = from.DigitalOut1;
            target.DigitalOut2 = from.DigitalOut2;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream _cachedInstance4 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
        
        private static global::Microsoft.Robotics.Services.IRobot.Create.CmdStream _cachedInstance3 = new global::Microsoft.Robotics.Services.IRobot.Create.CmdStream();
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdStream_TO_Microsoft_Robotics_Services_IRobot_Create_CmdStream(object transformFrom) {
            return _cachedInstance3;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdStream_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdStream(object transformFrom) {
            return _cachedInstance4;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList _cachedInstance6 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
        
        private static global::Microsoft.Robotics.Services.IRobot.Create.CmdQueryList _cachedInstance5 = new global::Microsoft.Robotics.Services.IRobot.Create.CmdQueryList();
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdQueryList_TO_Microsoft_Robotics_Services_IRobot_Create_CmdQueryList(object transformFrom) {
            return _cachedInstance5;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdQueryList_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdQueryList(object transformFrom) {
            return _cachedInstance6;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdStreamPauseResume_TO_Microsoft_Robotics_Services_IRobot_Create_CmdStreamPauseResume(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdStreamPauseResume target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdStreamPauseResume();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume)(transformFrom));
            target.StreamActive = from.StreamActive;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdStreamPauseResume_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdStreamPauseResume(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdStreamPauseResume from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdStreamPauseResume)(transformFrom));
            target.StreamActive = from.StreamActive;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdSendIR_TO_Microsoft_Robotics_Services_IRobot_Create_CmdSendIR(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdSendIR target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdSendIR();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR)(transformFrom));
            target.IRCode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RemoteIR)(((int)(from.IRCode))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdSendIR_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdSendIR(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdSendIR from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdSendIR)(transformFrom));
            target.IRCode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR)(((int)(from.IRCode))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDefineScript_TO_Microsoft_Robotics_Services_IRobot_Create_CmdDefineScript(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdDefineScript target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdDefineScript();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript)(transformFrom));
            if ((from.PacketData != null)) {
                int count = from.PacketData.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(from.PacketData, 0, tmp, 0, global::System.Buffer.ByteLength(from.PacketData));
                target.PacketData = tmp;
            }
            else {
                target.PacketData = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdDefineScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdDefineScript(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDefineScript();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdDefineScript from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdDefineScript)(transformFrom));
            byte[] tmp = from.PacketData;
            if ((tmp != null)) {
                int count = tmp.Length;
                byte[] tmp0 = new byte[count];
                global::System.Buffer.BlockCopy(tmp, 0, tmp0, 0, global::System.Buffer.ByteLength(tmp));
                target.PacketData = tmp0;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnDefineScript_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnDefineScript(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnDefineScript target = new global::Microsoft.Robotics.Services.IRobot.Create.ReturnDefineScript();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript)(transformFrom));
            target.ScriptResponseBytes = from.ScriptResponseBytes;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_ReturnDefineScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnDefineScript(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnDefineScript();
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnDefineScript from = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnDefineScript)(transformFrom));
            target.ScriptResponseBytes = from.ScriptResponseBytes;
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdPlayScript_TO_Microsoft_Robotics_Services_IRobot_Create_CmdPlayScript(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdPlayScript target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdPlayScript();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript)(transformFrom));
            target.ScriptResponseBytes = from.ScriptResponseBytes;
            target.TimeoutMs = from.TimeoutMs;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdPlayScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdPlayScript(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdPlayScript from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdPlayScript)(transformFrom));
            target.ScriptResponseBytes = from.ScriptResponseBytes;
            target.TimeoutMs = from.TimeoutMs;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript _cachedInstance8 = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
        
        private static global::Microsoft.Robotics.Services.IRobot.Create.CmdShowScript _cachedInstance7 = new global::Microsoft.Robotics.Services.IRobot.Create.CmdShowScript();
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdShowScript_TO_Microsoft_Robotics_Services_IRobot_Create_CmdShowScript(object transformFrom) {
            return _cachedInstance7;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdShowScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdShowScript(object transformFrom) {
            return _cachedInstance8;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnScript_TO_Microsoft_Robotics_Services_IRobot_Create_ReturnScript(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnScript target = new global::Microsoft.Robotics.Services.IRobot.Create.ReturnScript();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript)(transformFrom));
            if ((from.ScriptPacket != null)) {
                int count = from.ScriptPacket.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(from.ScriptPacket, 0, tmp, 0, global::System.Buffer.ByteLength(from.ScriptPacket));
                target.ScriptPacket = tmp;
            }
            else {
                target.ScriptPacket = null;
            }
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_ReturnScript_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_ReturnScript(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.ReturnScript();
            global::Microsoft.Robotics.Services.IRobot.Create.ReturnScript from = ((global::Microsoft.Robotics.Services.IRobot.Create.ReturnScript)(transformFrom));
            byte[] tmp = from.ScriptPacket;
            if ((tmp != null)) {
                int count = tmp.Length;
                byte[] tmp0 = new byte[count];
                global::System.Buffer.BlockCopy(tmp, 0, tmp0, 0, global::System.Buffer.ByteLength(tmp));
                target.ScriptPacket = tmp0;
            }
            target.RoombaMode = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMode)(((int)(from.RoombaMode))));
            target.Timestamp = from.Timestamp;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitTime_TO_Microsoft_Robotics_Services_IRobot_Create_CmdWaitTime(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitTime target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitTime();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime)(transformFrom));
            target.Seconds = from.Seconds;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdWaitTime_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitTime(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitTime from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitTime)(transformFrom));
            target.Seconds = from.Seconds;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitDistance_TO_Microsoft_Robotics_Services_IRobot_Create_CmdWaitDistance(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitDistance target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitDistance();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance)(transformFrom));
            target.Distance = from.Distance;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdWaitDistance_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitDistance(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitDistance from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitDistance)(transformFrom));
            target.Distance = from.Distance;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitAngle_TO_Microsoft_Robotics_Services_IRobot_Create_CmdWaitAngle(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitAngle target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitAngle();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle)(transformFrom));
            target.Angle = from.Angle;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdWaitAngle_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitAngle(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitAngle from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitAngle)(transformFrom));
            target.Angle = from.Angle;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitEvent_TO_Microsoft_Robotics_Services_IRobot_Create_CmdWaitEvent(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitEvent target = new global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitEvent();
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent from = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent)(transformFrom));
            target.WaitEvent = ((global::Microsoft.Robotics.Services.IRobot.Create.WaitEvent)(((int)(from.WaitEvent))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Create_CmdWaitEvent_TO_Microsoft_Robotics_Services_IRobot_Create_Proxy_CmdWaitEvent(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent target = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent();
            global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitEvent from = ((global::Microsoft.Robotics.Services.IRobot.Create.CmdWaitEvent)(transformFrom));
            target.WaitEvent = ((global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent)(((int)(from.WaitEvent))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdMotors_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdMotors(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdMotors target = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdMotors();
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors)(transformFrom));
            target.Motors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.RoombaMotorBits)(((int)(from.Motors))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdMotors_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdMotors(object transformFrom) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors target = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMotors();
            global::Microsoft.Robotics.Services.IRobot.Roomba.CmdMotors from = ((global::Microsoft.Robotics.Services.IRobot.Roomba.CmdMotors)(transformFrom));
            target.Motors = ((global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaMotorBits)(((int)(from.Motors))));
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock _cachedInstance10 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.CmdForceSeekingDock _cachedInstance9 = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdForceSeekingDock();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdForceSeekingDock_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdForceSeekingDock(object transformFrom) {
            return _cachedInstance9;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdForceSeekingDock_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdForceSeekingDock(object transformFrom) {
            return _cachedInstance10;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean _cachedInstance12 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.CmdClean _cachedInstance11 = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdClean();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdClean_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdClean(object transformFrom) {
            return _cachedInstance11;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdClean_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdClean(object transformFrom) {
            return _cachedInstance12;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot _cachedInstance14 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSpot _cachedInstance13 = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdSpot();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSpot_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdSpot(object transformFrom) {
            return _cachedInstance13;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdSpot_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdSpot(object transformFrom) {
            return _cachedInstance14;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax _cachedInstance16 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdMax();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.CmdMax _cachedInstance15 = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdMax();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdMax_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdMax(object transformFrom) {
            return _cachedInstance15;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdMax_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdMax(object transformFrom) {
            return _cachedInstance16;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate _cachedInstance18 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdFirmwareDate();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.CmdFirmwareDate _cachedInstance17 = new global::Microsoft.Robotics.Services.IRobot.Roomba.CmdFirmwareDate();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdFirmwareDate_TO_Microsoft_Robotics_Services_IRobot_Roomba_CmdFirmwareDate(object transformFrom) {
            return _cachedInstance17;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_CmdFirmwareDate_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_CmdFirmwareDate(object transformFrom) {
            return _cachedInstance18;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart _cachedInstance20 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdStart _cachedInstance19 = new global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdStart();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdStart_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdStart(object transformFrom) {
            return _cachedInstance19;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdStart_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdStart(object transformFrom) {
            return _cachedInstance20;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl _cachedInstance22 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdControl _cachedInstance21 = new global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdControl();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdControl_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdControl(object transformFrom) {
            return _cachedInstance21;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdControl_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdControl(object transformFrom) {
            return _cachedInstance22;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe _cachedInstance24 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdSafe _cachedInstance23 = new global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdSafe();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdSafe_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdSafe(object transformFrom) {
            return _cachedInstance23;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdSafe_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdSafe(object transformFrom) {
            return _cachedInstance24;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull _cachedInstance26 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdFull _cachedInstance25 = new global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdFull();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdFull_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdFull(object transformFrom) {
            return _cachedInstance25;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdFull_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdFull(object transformFrom) {
            return _cachedInstance26;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower _cachedInstance28 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdPower _cachedInstance27 = new global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdPower();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdPower(object transformFrom) {
            return _cachedInstance27;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdPower_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdPower(object transformFrom) {
            return _cachedInstance28;
        }
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdReset _cachedInstance30 = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdReset();
        
        private static global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdReset _cachedInstance29 = new global::Microsoft.Robotics.Services.IRobot.Roomba.InternalCmdReset();
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdReset_TO_Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdReset(object transformFrom) {
            return _cachedInstance29;
        }
        
        public static object Microsoft_Robotics_Services_IRobot_Roomba_InternalCmdReset_TO_Microsoft_Robotics_Services_IRobot_Roomba_Proxy_InternalCmdReset(object transformFrom) {
            return _cachedInstance30;
        }
    }
}
