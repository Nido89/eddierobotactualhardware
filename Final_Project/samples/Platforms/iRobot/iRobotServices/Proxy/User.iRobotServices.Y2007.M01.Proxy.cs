//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.iRobotServices.Y2007.M01, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7" +
    "f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.IRobot.Roomba.Bumper.Proxy {
    
    
    /// <summary>
    ///            iRobot Sensors
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/12/irobot/roomba/bumper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/12/irobot/roomba/bumper.user.html", ElementName="RoombaBumpers")]
    [global::System.ComponentModel.DescriptionAttribute("iRobot Sensors")]
    public enum RoombaBumpers : int {
        
        /// <summary>
        ///            Left Bumper Contact Sensor
        ///            </summary>
        LeftBumper = 1,
        
        /// <summary>
        ///            Right Bumper Contact Sensor
        ///            </summary>
        RightBumper = 2,
        
        /// <summary>
        ///            Wall Sensor
        ///            </summary>
        Wall = 3,
        
        /// <summary>
        ///            Virtual Wall Sensor
        ///            </summary>
        VirtualWall = 4,
        
        /// <summary>
        ///            Left Cliff Sensor
        ///            </summary>
        CliffLeft = 5,
        
        /// <summary>
        ///            Front Left Cliff Sensor
        ///            </summary>
        CliffFrontLeft = 6,
        
        /// <summary>
        ///            Right Front Cliff Sensor
        ///            </summary>
        CliffFrontRight = 7,
        
        /// <summary>
        ///            Right Cliff Sensor
        ///            </summary>
        CliffRight = 8,
        
        /// <summary>
        ///            Left Wheel Drop Sensor
        ///            </summary>
        WheelDropLeft = 9,
        
        /// <summary>
        ///            Right Wheel Drop Sensor
        ///            </summary>
        WheelDropRight = 10,
        
        /// <summary>
        ///            Rear Wheel Drop Sensor
        ///            </summary>
        WheelDropRear = 11,
    }
    
    /// <summary>
    ///            Bumper Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to an iRobot Roomba or Create\'s bumpers, wall, and ledge detector" +
        "s\n(Uses the Generic Contact Sensors contract.)\n(Partner with the \'iRobot� Create" +
        " / Roomba\' service).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) iRobot� Generic Contact Sensors")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/12/irobot/roomba/bumper.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/12/irobot/roomba/bumper.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/12/irobot/roomba/bumper.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ContactSensorArrayOperations = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ContactSensorArrayOperations, "http://schemas.microsoft.com/robotics/2006/12/irobot/roomba/bumper.user.html", "ContactSensorArrayOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayOperations ContactSensorArrayOperations;
    }
}
namespace Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy {
    
    
    /// <summary>
    ///            The IRobotCreateScript State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
        "html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
        "html", ElementName="IRobotScriptingEngineState")]
    [global::System.ComponentModel.DescriptionAttribute("The IRobotCreateScript State")]
    public class IRobotScriptingEngineState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public IRobotScriptingEngineState() {
        }
        
        private global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition _CurrentScript;
        
        /// <summary>
        ///            The Current Script
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Current Script")]
        public global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition CurrentScript {
            get {
                return this._CurrentScript;
            }
            set {
                this._CurrentScript = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition> _SavedScripts;
        
        /// <summary>
        ///            Saved Scripts
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Saved Scripts")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition> SavedScripts {
            get {
                return this._SavedScripts;
            }
            set {
                this._SavedScripts = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current IRobotScriptingEngineState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineState typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineState)(target));
            if ((this._CurrentScript != null)) {
                global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition tmp = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition();
                ((Microsoft.Dss.Core.IDssSerializable)(this._CurrentScript)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._CurrentScript = tmp;
            }
            if ((this._SavedScripts != null)) {
                int count = this._SavedScripts.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition tmp1 = default(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition);
                    if ((this._SavedScripts[index] != null)) {
                        global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition tmp2 = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SavedScripts[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                        tmp1 = tmp2;
                    }
                    tmp0.Add(tmp1);
                }
                typedTarget._SavedScripts = tmp0;
            }
        }
        
        /// <summary>
        ///Clones IRobotScriptingEngineState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineState target0 = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IRobotScriptingEngineState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._CurrentScript == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._CurrentScript)).Serialize(writer);
            }
            if ((this._SavedScripts == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SavedScripts.Count);
                for (int indexSavedScripts = 0; (indexSavedScripts < this._SavedScripts.Count); indexSavedScripts = (indexSavedScripts + 1)) {
                    if ((this._SavedScripts[indexSavedScripts] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._SavedScripts[indexSavedScripts])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes IRobotScriptingEngineState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IRobotScriptingEngineState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._CurrentScript = ((global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._SavedScripts = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._SavedScripts.Add(default(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition));
                    if ((reader.ReadByte() != 0)) {
                        this._SavedScripts[index0] = ((global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Clear the entire command list
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
        "html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
        "html", ElementName="ScriptDefinition")]
    [global::System.ComponentModel.DescriptionAttribute("Clear the entire command list")]
    public class ScriptDefinition : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ScriptDefinition() {
        }
        
        private string _Name;
        
        /// <summary>
        ///            The script name
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The script name")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private byte[] _PacketData;
        
        /// <summary>
        ///            Packet Data ready
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Packet Data ready")]
        public byte[] PacketData {
            get {
                return this._PacketData;
            }
            set {
                this._PacketData = value;
            }
        }
        
        private global::System.Collections.Generic.List<string> _Commands;
        
        /// <summary>
        ///            The commands which compose this script
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The commands which compose this script")]
        public global::System.Collections.Generic.List<string> Commands {
            get {
                return this._Commands;
            }
            set {
                this._Commands = value;
            }
        }
        
        private int _ExpectedScriptResponseBytes;
        
        /// <summary>
        ///            Expected Script Response Bytes
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Expected Script Response Bytes")]
        public int ExpectedScriptResponseBytes {
            get {
                return this._ExpectedScriptResponseBytes;
            }
            set {
                this._ExpectedScriptResponseBytes = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ScriptDefinition to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition)(target));
            typedTarget._Name = this._Name;
            if ((this._PacketData != null)) {
                int count = this._PacketData.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._PacketData, 0, tmp, 0, global::System.Buffer.ByteLength(this._PacketData));
                typedTarget._PacketData = tmp;
            }
            if ((this._Commands != null)) {
                int count0 = this._Commands.Count;
                global::System.Collections.Generic.List<string> tmp0 = new global::System.Collections.Generic.List<string>(count0);
                tmp0.AddRange(this._Commands);
                typedTarget._Commands = tmp0;
            }
            typedTarget._ExpectedScriptResponseBytes = this._ExpectedScriptResponseBytes;
        }
        
        /// <summary>
        ///Clones ScriptDefinition
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition target0 = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ScriptDefinition to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            if ((this._PacketData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._PacketData.Length);
                writer.Write(this._PacketData);
            }
            if ((this._Commands == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Commands.Count);
                for (int indexCommands = 0; (indexCommands < this._Commands.Count); indexCommands = (indexCommands + 1)) {
                    if ((this._Commands[indexCommands] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        writer.Write(this._Commands[indexCommands]);
                    }
                }
            }
            writer.Write(this._ExpectedScriptResponseBytes);
        }
        
        /// <summary>
        ///Deserializes ScriptDefinition
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ScriptDefinition</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                int count1 = reader.ReadInt32();
                this._PacketData = reader.ReadBytes(count1);
            }
            if ((reader.ReadByte() != 0)) {
                int count2 = reader.ReadInt32();
                this._Commands = new global::System.Collections.Generic.List<string>(count2);
                for (int index = 0; (index < count2); index = (index + 1)) {
                    this._Commands.Add(default(string));
                    if ((reader.ReadByte() != 0)) {
                        this._Commands[index] = reader.ReadString();
                    }
                }
            }
            this._ExpectedScriptResponseBytes = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            Clear the current script.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
        "html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
        "html", ElementName="ClearScript")]
    [global::System.ComponentModel.DescriptionAttribute("Clear the current script.")]
    public class ClearScript : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClearScript() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ClearScript to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript)(target));
        }
        
        /// <summary>
        ///Clones ClearScript
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript target0 = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClearScript to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes ClearScript
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClearScript</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Clear the entire command list
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
        "html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
        "html", ElementName="Script")]
    [global::System.ComponentModel.DescriptionAttribute("Clear the entire command list")]
    public class Script : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Script() {
        }
        
        private string _Name;
        
        /// <summary>
        ///            The script name
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The script name")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Script to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script typedTarget = ((global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script)(target));
            typedTarget._Name = this._Name;
        }
        
        /// <summary>
        ///Clones Script
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script target0 = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Script to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
        }
        
        /// <summary>
        ///Deserializes Script
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Script</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            IRobotCreateScript Get Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("IRobotCreateScript Get Operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Clear the Current Script
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Clears the current script.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ClearCurrentScript : global::Microsoft.Dss.ServiceModel.Dssp.Delete<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault>> {
        
        public ClearCurrentScript() {
        }
        
        public ClearCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript body) : 
                base(body) {
        }
        
        public ClearCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Save the Current Script
    ///            <remarks>If no name is specified, the current script name will be maintained.</remarks></summary>
    [global::System.ComponentModel.DescriptionAttribute("Saves the current script.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SaveCurrentScript : global::Microsoft.Dss.ServiceModel.Dssp.Upsert<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition, global:: W3C.Soap.Fault>> {
        
        public SaveCurrentScript() {
        }
        
        public SaveCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body) : 
                base(body) {
        }
        
        public SaveCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Load the Named Script and make it the Current Script
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Loads a specified script.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LoadCurrentScript : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition, global:: W3C.Soap.Fault>> {
        
        public LoadCurrentScript() {
        }
        
        public LoadCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body) : 
                base(body) {
        }
        
        public LoadCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Delete the Named Script
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Delete the named script or \'all\' to delete all scripts.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DeleteNamedScript : global::Microsoft.Dss.ServiceModel.Dssp.Delete<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault>> {
        
        public DeleteNamedScript() {
        }
        
        public DeleteNamedScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body) : 
                base(body) {
        }
        
        public DeleteNamedScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Start Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Start Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddStart : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddStart() {
        }
        
        public AddStart(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart body) : 
                base(body) {
        }
        
        public AddStart(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Control Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Control Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddControl : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddControl() {
        }
        
        public AddControl(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl body) : 
                base(body) {
        }
        
        public AddControl(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Safe Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Safe Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddSafe : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddSafe() {
        }
        
        public AddSafe(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe body) : 
                base(body) {
        }
        
        public AddSafe(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Full Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Full Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddFull : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddFull() {
        }
        
        public AddFull(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull body) : 
                base(body) {
        }
        
        public AddFull(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Drive Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Drive Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddDrive : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddDrive() {
        }
        
        public AddDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body) : 
                base(body) {
        }
        
        public AddDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the DriveDirect Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the DriveDirect Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddDriveDirect : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddDriveDirect() {
        }
        
        public AddDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body) : 
                base(body) {
        }
        
        public AddDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the PlayScript Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the PlayScript Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddPlayScript : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddPlayScript() {
        }
        
        public AddPlayScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body) : 
                base(body) {
        }
        
        public AddPlayScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the WaitAngle Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the WaitAngle Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddWaitAngle : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddWaitAngle() {
        }
        
        public AddWaitAngle(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body) : 
                base(body) {
        }
        
        public AddWaitAngle(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the WaitDistance Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the WaitDistance Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddWaitDistance : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddWaitDistance() {
        }
        
        public AddWaitDistance(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body) : 
                base(body) {
        }
        
        public AddWaitDistance(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the WaitEvent Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the WaitEvent Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddWaitEvent : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddWaitEvent() {
        }
        
        public AddWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body) : 
                base(body) {
        }
        
        public AddWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the WaitTime Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the WaitTime Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddWaitTime : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddWaitTime() {
        }
        
        public AddWaitTime(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body) : 
                base(body) {
        }
        
        public AddWaitTime(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Sensors Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Sensors Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddSensors : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddSensors() {
        }
        
        public AddSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body) : 
                base(body) {
        }
        
        public AddSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Demo Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Demo Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddDemo : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddDemo() {
        }
        
        public AddDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body) : 
                base(body) {
        }
        
        public AddDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Leds Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Leds Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddLeds : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddLeds() {
        }
        
        public AddLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body) : 
                base(body) {
        }
        
        public AddLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the PlaySong Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the PlaySong Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddPlaySong : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddPlaySong() {
        }
        
        public AddPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body) : 
                base(body) {
        }
        
        public AddPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the QueryList Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the QueryList Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddQueryList : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddQueryList() {
        }
        
        public AddQueryList(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body) : 
                base(body) {
        }
        
        public AddQueryList(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the "Cover entire Room" Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the \"Cover entire Room\" Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddCover : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddCover() {
        }
        
        public AddCover(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body) : 
                base(body) {
        }
        
        public AddCover(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the DefineSong Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the DefineSong Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddDefineSong : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddDefineSong() {
        }
        
        public AddDefineSong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body) : 
                base(body) {
        }
        
        public AddDefineSong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the DigitalOutputs Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the DigitalOutputs Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddDigitalOutputs : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddDigitalOutputs() {
        }
        
        public AddDigitalOutputs(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body) : 
                base(body) {
        }
        
        public AddDigitalOutputs(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the ForceSeekingDock Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the ForceSeekingDock Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddForceSeekingDock : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddForceSeekingDock() {
        }
        
        public AddForceSeekingDock(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body) : 
                base(body) {
        }
        
        public AddForceSeekingDock(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Power Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Power Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddPower : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddPower() {
        }
        
        public AddPower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower body) : 
                base(body) {
        }
        
        public AddPower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the PWMLowSideDrivers Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the PWMLowSideDrivers Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddPWMLowSideDrivers : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddPWMLowSideDrivers() {
        }
        
        public AddPWMLowSideDrivers(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body) : 
                base(body) {
        }
        
        public AddPWMLowSideDrivers(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the SendIR Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the SendIR Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddSendIR : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddSendIR() {
        }
        
        public AddSendIR(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body) : 
                base(body) {
        }
        
        public AddSendIR(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the ShowScript Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the ShowScript Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddShowScript : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddShowScript() {
        }
        
        public AddShowScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body) : 
                base(body) {
        }
        
        public AddShowScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Spot Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Spot Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddSpot : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddSpot() {
        }
        
        public AddSpot(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body) : 
                base(body) {
        }
        
        public AddSpot(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the Stream Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the Stream Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddStream : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddStream() {
        }
        
        public AddStream(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body) : 
                base(body) {
        }
        
        public AddStream(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add the StreamPauseResume Command to the scripting engine.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Add the StreamPauseResume Command to the scripting engine.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddStreamPauseResume : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault>> {
        
        public AddStreamPauseResume() {
        }
        
        public AddStreamPauseResume(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body) : 
                base(body) {
        }
        
        public AddStreamPauseResume(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            IRobotCreateScript Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("IRobotCreateScript Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class IRobotScriptingEngineOperations : global::Microsoft.Ccr.Core.PortSet {
        
        public IRobotScriptingEngineOperations() : 
                base(typeof(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup), typeof(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream), typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume)) {
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup>)portSet[typeof(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup)];
		}
        
        public virtual void Post(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop>)portSet[typeof(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop)];
		}
        
        public virtual void Post(global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> ClearCurrentScript() {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClearCurrentScript(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> ClearCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClearCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearScript();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ClearCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition, global:: W3C.Soap.Fault> SaveCurrentScript() {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SaveCurrentScript(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition, global:: W3C.Soap.Fault> SaveCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SaveCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.SaveCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition, global:: W3C.Soap.Fault> LoadCurrentScript() {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LoadCurrentScript(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.ScriptDefinition, global:: W3C.Soap.Fault> LoadCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LoadCurrentScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.LoadCurrentScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> DeleteNamedScript() {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteNamedScript(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType, global:: W3C.Soap.Fault> DeleteNamedScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteNamedScript(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.Script();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.DeleteNamedScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddStart() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddStart(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddStart(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddStart(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdStart();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStart(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddControl() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddControl(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddControl(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddControl(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdControl();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddSafe() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddSafe(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddSafe(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddSafe(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdSafe();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSafe(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddFull() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddFull(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddFull(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddFull(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdFull();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddFull(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDrive(int velocity, int radius) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive(velocity, radius);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDrive(int velocity, int radius, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive(velocity, radius);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDrive(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDrive();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDrive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDriveDirect(int rightVelocity, int leftVelocity) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect(rightVelocity, leftVelocity);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDriveDirect(int rightVelocity, int leftVelocity, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect(rightVelocity, leftVelocity);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDriveDirect(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDriveDirect();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDriveDirect(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddPlayScript(int scriptResponseBytes, int timeoutMs) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript(scriptResponseBytes, timeoutMs);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddPlayScript(int scriptResponseBytes, int timeoutMs, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript(scriptResponseBytes, timeoutMs);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddPlayScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddPlayScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPlayScript();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlayScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddWaitAngle(int angle) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle(angle);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddWaitAngle(int angle, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle(angle);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddWaitAngle(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddWaitAngle(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitAngle();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitAngle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddWaitDistance(int distance) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance(distance);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddWaitDistance(int distance, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance(distance);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddWaitDistance(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddWaitDistance(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitDistance();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitDistance(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent waitEvent) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent(waitEvent);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.WaitEvent waitEvent, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent(waitEvent);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddWaitEvent(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitEvent();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitEvent(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddWaitTime(double seconds) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime(seconds);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddWaitTime(double seconds, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime(seconds);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddWaitTime(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddWaitTime(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdWaitTime();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddWaitTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddSensors(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket createSensorPacket) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors(createSensorPacket);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddSensors(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CreateSensorPacket createSensorPacket, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors(createSensorPacket);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddSensors(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSensors();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSensors(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode demoMode) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo(demoMode);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.DemoMode demoMode, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo(demoMode);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDemo(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDemo();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDemo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits leds, int powerColor, int powerIntensity) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds(leds, powerColor, powerIntensity);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaLedBits leds, int powerColor, int powerIntensity, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds(leds, powerColor, powerIntensity);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddLeds(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdLeds();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddLeds(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddPlaySong(int songNumber) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong(songNumber);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddPlaySong(int songNumber, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong(songNumber);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddPlaySong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdPlaySong();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPlaySong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddQueryList() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddQueryList(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddQueryList(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddQueryList(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdQueryList();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddQueryList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddCover() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddCover(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddCover(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddCover(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdClean();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddCover(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDefineSong(int songNumber, global::System.Collections.Generic.List<Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> notes) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong(songNumber, notes);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDefineSong(int songNumber, global::System.Collections.Generic.List<Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RoombaNote> notes, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong(songNumber, notes);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDefineSong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDefineSong(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdDefineSong();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDefineSong(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDigitalOutputs(bool digitalOut0, bool digitalOut2, bool digitalOut1) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs(digitalOut0, digitalOut2, digitalOut1);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDigitalOutputs(bool digitalOut0, bool digitalOut2, bool digitalOut1, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs(digitalOut0, digitalOut2, digitalOut1);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddDigitalOutputs(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddDigitalOutputs(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdDigitalOutputs();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddDigitalOutputs(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddForceSeekingDock() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddForceSeekingDock(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddForceSeekingDock(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddForceSeekingDock(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdForceSeekingDock();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddForceSeekingDock(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddPower() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddPower(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddPower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddPower(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.InternalCmdPower();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddPWMLowSideDrivers(int digitalOut0, int digitalOut1, int digitalOut2) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers(digitalOut0, digitalOut1, digitalOut2);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddPWMLowSideDrivers(int digitalOut0, int digitalOut1, int digitalOut2, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers(digitalOut0, digitalOut1, digitalOut2);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddPWMLowSideDrivers(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddPWMLowSideDrivers(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdPWMLowSideDrivers();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddPWMLowSideDrivers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddSendIR(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR iRCode) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR(iRCode);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddSendIR(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.RemoteIR iRCode, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR(iRCode);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddSendIR(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddSendIR(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdSendIR();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSendIR(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddShowScript() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddShowScript(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddShowScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddShowScript(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdShowScript();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddShowScript(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddSpot() {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddSpot(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot operation) {
            global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddSpot(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddSpot(global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Roomba.Proxy.CmdSpot();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddSpot(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddStream() {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddStream(out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddStream(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddStream(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStream();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStream(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
		public static implicit operator global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume>(IRobotScriptingEngineOperations portSet)
		{
			if (portSet == null)
			{
				return null;
			}
			return (global::Microsoft.Ccr.Core.Port<global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume>)portSet[typeof(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume)];
		}
        
        public virtual void Post(global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume item) {
            base.PostUnknownType(item);
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddStreamPauseResume(bool streamActive) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume(streamActive);
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddStreamPauseResume(bool streamActive, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume operation) {
            global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume(streamActive);
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultInsertResponseType, global:: W3C.Soap.Fault> AddStreamPauseResume(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume();
            }
            global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddStreamPauseResume(global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume body, out global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.IRobot.Create.Proxy.CmdStreamPauseResume();
            }
            operation = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.AddStreamPauseResume(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Implementation class for the IRobotScriptingEngine Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Generates scripts for the iRobot Create.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) iRobot� Create Scripting Engine")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
            "html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
                    "html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
                    "html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.IRobotScriptingEngineOperations = new global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.IRobotScriptingEngineOperations, "http://schemas.microsoft.com/robotics/2007/01/irobot/create/scriptingengine.user." +
                        "html", "IRobotScriptingEngineOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.IRobot.Create.ScriptingEngine.Proxy.IRobotScriptingEngineOperations IRobotScriptingEngineOperations;
    }
}
namespace Microsoft.Robotics.Services.IRobot.Roomba.Drive.Proxy {
    
    
    /// <summary>
    ///            Roomba Drive Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to an iRobot Roomba or Create\'s differential motor drive.\n(Uses t" +
        "he Generic Differential Drive contract.)\n(Partner with the \'iRobot® Create / Roo" +
        "mba\' service.)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) iRobot® Generic Drive")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/12/irobot/drive.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/12/irobot/drive.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/12/irobot/drive.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.DriveOperations = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DriveOperations, "http://schemas.microsoft.com/robotics/2006/12/irobot/drive.user.html", "DriveOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveOperations DriveOperations;
    }
}
