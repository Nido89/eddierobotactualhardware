//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("RobotDashboard")]
[assembly: global::System.Reflection.AssemblyDescriptionAttribute("The Robot Dashboard can be used to control a Reference Platform robot. Use an Xbo" +
    "x Controller to drive the robot. The Depth and RGB data streams are displayed in" +
    " separate windows.")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.RobotDashboard.Y2011.M07, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7" +
    "f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_RobotDashboard_Proxy_RobotDashboardState_TO_Microsoft_Robotics_Services_RobotDashboard_RobotDashboardState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.RobotDashboard.RobotDashboardState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_RobotDashboard_RobotDashboardState_TO_Microsoft_Robotics_Services_RobotDashboard_Proxy_RobotDashboardState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_RobotDashboard_Proxy_GUIOptions_TO_Microsoft_Robotics_Services_RobotDashboard_GUIOptions));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.RobotDashboard.GUIOptions), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_RobotDashboard_GUIOptions_TO_Microsoft_Robotics_Services_RobotDashboard_Proxy_GUIOptions));
        }
        
        public static object Microsoft_Robotics_Services_RobotDashboard_Proxy_RobotDashboardState_TO_Microsoft_Robotics_Services_RobotDashboard_RobotDashboardState(object transformFrom) {
            global::Microsoft.Robotics.Services.RobotDashboard.RobotDashboardState target = new global::Microsoft.Robotics.Services.RobotDashboard.RobotDashboardState();
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState from = ((global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState)(transformFrom));
            target.TiltAngle = from.TiltAngle;
            if ((from.Options != null)) {
                target.Options = ((global::Microsoft.Robotics.Services.RobotDashboard.GUIOptions)(Microsoft_Robotics_Services_RobotDashboard_Proxy_GUIOptions_TO_Microsoft_Robotics_Services_RobotDashboard_GUIOptions(from.Options)));
            }
            else {
                target.Options = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_RobotDashboard_RobotDashboardState_TO_Microsoft_Robotics_Services_RobotDashboard_Proxy_RobotDashboardState(object transformFrom) {
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState target = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState();
            global::Microsoft.Robotics.Services.RobotDashboard.RobotDashboardState from = ((global::Microsoft.Robotics.Services.RobotDashboard.RobotDashboardState)(transformFrom));
            target.TiltAngle = from.TiltAngle;
            global::Microsoft.Robotics.Services.RobotDashboard.GUIOptions tmp = from.Options;
            if ((tmp != null)) {
                target.Options = ((global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions)(Microsoft_Robotics_Services_RobotDashboard_GUIOptions_TO_Microsoft_Robotics_Services_RobotDashboard_Proxy_GUIOptions(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_RobotDashboard_Proxy_GUIOptions_TO_Microsoft_Robotics_Services_RobotDashboard_GUIOptions(object transformFrom) {
            global::Microsoft.Robotics.Services.RobotDashboard.GUIOptions target = new global::Microsoft.Robotics.Services.RobotDashboard.GUIOptions();
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions from = ((global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions)(transformFrom));
            target.WindowStartX = from.WindowStartX;
            target.WindowStartY = from.WindowStartY;
            target.DepthcamWindowStartX = from.DepthcamWindowStartX;
            target.DepthcamWindowStartY = from.DepthcamWindowStartY;
            target.DepthcamWindowWidth = from.DepthcamWindowWidth;
            target.DepthcamWindowHeight = from.DepthcamWindowHeight;
            target.WebcamWindowStartX = from.WebcamWindowStartX;
            target.WebcamWindowStartY = from.WebcamWindowStartY;
            target.WebcamWindowWidth = from.WebcamWindowWidth;
            target.WebcamWindowHeight = from.WebcamWindowHeight;
            target.DeadZoneX = from.DeadZoneX;
            target.DeadZoneY = from.DeadZoneY;
            target.TranslateScaleFactor = from.TranslateScaleFactor;
            target.RotateScaleFactor = from.RotateScaleFactor;
            target.CameraInterval = from.CameraInterval;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_RobotDashboard_GUIOptions_TO_Microsoft_Robotics_Services_RobotDashboard_Proxy_GUIOptions(object transformFrom) {
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions target = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions();
            global::Microsoft.Robotics.Services.RobotDashboard.GUIOptions from = ((global::Microsoft.Robotics.Services.RobotDashboard.GUIOptions)(transformFrom));
            target.WindowStartX = from.WindowStartX;
            target.WindowStartY = from.WindowStartY;
            target.DepthcamWindowStartX = from.DepthcamWindowStartX;
            target.DepthcamWindowStartY = from.DepthcamWindowStartY;
            target.DepthcamWindowWidth = from.DepthcamWindowWidth;
            target.DepthcamWindowHeight = from.DepthcamWindowHeight;
            target.WebcamWindowStartX = from.WebcamWindowStartX;
            target.WebcamWindowStartY = from.WebcamWindowStartY;
            target.WebcamWindowWidth = from.WebcamWindowWidth;
            target.WebcamWindowHeight = from.WebcamWindowHeight;
            target.DeadZoneX = from.DeadZoneX;
            target.DeadZoneY = from.DeadZoneY;
            target.TranslateScaleFactor = from.TranslateScaleFactor;
            target.RotateScaleFactor = from.RotateScaleFactor;
            target.CameraInterval = from.CameraInterval;
            return target;
        }
    }
}
