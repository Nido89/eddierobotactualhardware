//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("RobotDashboard")]
[assembly: global::System.Reflection.AssemblyDescriptionAttribute("The Robot Dashboard can be used to control a Reference Platform robot. Use an Xbo" +
    "x Controller to drive the robot. The Depth and RGB data streams are displayed in" +
    " separate windows.")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.RobotDashboard.Y2011.M07, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7" +
    "f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.RobotDashboard.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/07/robotdashboard.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/07/robotdashboard.user.html", ElementName="RobotDashboardState")]
    public class RobotDashboardState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RobotDashboardState() {
        }
        
        private double _TiltAngle;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double TiltAngle {
            get {
                return this._TiltAngle;
            }
            set {
                this._TiltAngle = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions _Options;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions Options {
            get {
                return this._Options;
            }
            set {
                this._Options = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RobotDashboardState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState typedTarget = ((global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState)(target));
            typedTarget._TiltAngle = this._TiltAngle;
            if ((this._Options != null)) {
                global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions tmp = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Options)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Options = tmp;
            }
        }
        
        /// <summary>
        ///Clones RobotDashboardState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState target0 = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RobotDashboardState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._TiltAngle);
            if ((this._Options == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Options)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes RobotDashboardState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RobotDashboardState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TiltAngle = reader.ReadDouble();
            if ((reader.ReadByte() != 0)) {
                this._Options = ((global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/07/robotdashboard.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2011/07/robotdashboard.user.html", ElementName="GUIOptions")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) GUI Option Settings")]
    public class GUIOptions : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public GUIOptions() {
        }
        
        private int _WindowStartX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowStartX {
            get {
                return this._WindowStartX;
            }
            set {
                this._WindowStartX = value;
            }
        }
        
        private int _WindowStartY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WindowStartY {
            get {
                return this._WindowStartY;
            }
            set {
                this._WindowStartY = value;
            }
        }
        
        private int _DepthcamWindowStartX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int DepthcamWindowStartX {
            get {
                return this._DepthcamWindowStartX;
            }
            set {
                this._DepthcamWindowStartX = value;
            }
        }
        
        private int _DepthcamWindowStartY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int DepthcamWindowStartY {
            get {
                return this._DepthcamWindowStartY;
            }
            set {
                this._DepthcamWindowStartY = value;
            }
        }
        
        private int _DepthcamWindowWidth;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int DepthcamWindowWidth {
            get {
                return this._DepthcamWindowWidth;
            }
            set {
                this._DepthcamWindowWidth = value;
            }
        }
        
        private int _DepthcamWindowHeight;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int DepthcamWindowHeight {
            get {
                return this._DepthcamWindowHeight;
            }
            set {
                this._DepthcamWindowHeight = value;
            }
        }
        
        private int _WebcamWindowStartX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WebcamWindowStartX {
            get {
                return this._WebcamWindowStartX;
            }
            set {
                this._WebcamWindowStartX = value;
            }
        }
        
        private int _WebcamWindowStartY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WebcamWindowStartY {
            get {
                return this._WebcamWindowStartY;
            }
            set {
                this._WebcamWindowStartY = value;
            }
        }
        
        private int _WebcamWindowWidth;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WebcamWindowWidth {
            get {
                return this._WebcamWindowWidth;
            }
            set {
                this._WebcamWindowWidth = value;
            }
        }
        
        private int _WebcamWindowHeight;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WebcamWindowHeight {
            get {
                return this._WebcamWindowHeight;
            }
            set {
                this._WebcamWindowHeight = value;
            }
        }
        
        private double _DeadZoneX;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double DeadZoneX {
            get {
                return this._DeadZoneX;
            }
            set {
                this._DeadZoneX = value;
            }
        }
        
        private double _DeadZoneY;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double DeadZoneY {
            get {
                return this._DeadZoneY;
            }
            set {
                this._DeadZoneY = value;
            }
        }
        
        private double _TranslateScaleFactor;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double TranslateScaleFactor {
            get {
                return this._TranslateScaleFactor;
            }
            set {
                this._TranslateScaleFactor = value;
            }
        }
        
        private double _RotateScaleFactor;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double RotateScaleFactor {
            get {
                return this._RotateScaleFactor;
            }
            set {
                this._RotateScaleFactor = value;
            }
        }
        
        private int _CameraInterval;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int CameraInterval {
            get {
                return this._CameraInterval;
            }
            set {
                this._CameraInterval = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GUIOptions to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions typedTarget = ((global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions)(target));
            typedTarget._WindowStartX = this._WindowStartX;
            typedTarget._WindowStartY = this._WindowStartY;
            typedTarget._DepthcamWindowStartX = this._DepthcamWindowStartX;
            typedTarget._DepthcamWindowStartY = this._DepthcamWindowStartY;
            typedTarget._DepthcamWindowWidth = this._DepthcamWindowWidth;
            typedTarget._DepthcamWindowHeight = this._DepthcamWindowHeight;
            typedTarget._WebcamWindowStartX = this._WebcamWindowStartX;
            typedTarget._WebcamWindowStartY = this._WebcamWindowStartY;
            typedTarget._WebcamWindowWidth = this._WebcamWindowWidth;
            typedTarget._WebcamWindowHeight = this._WebcamWindowHeight;
            typedTarget._DeadZoneX = this._DeadZoneX;
            typedTarget._DeadZoneY = this._DeadZoneY;
            typedTarget._TranslateScaleFactor = this._TranslateScaleFactor;
            typedTarget._RotateScaleFactor = this._RotateScaleFactor;
            typedTarget._CameraInterval = this._CameraInterval;
        }
        
        /// <summary>
        ///Clones GUIOptions
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions target0 = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.GUIOptions();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GUIOptions to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._WindowStartX);
            writer.Write(this._WindowStartY);
            writer.Write(this._DepthcamWindowStartX);
            writer.Write(this._DepthcamWindowStartY);
            writer.Write(this._DepthcamWindowWidth);
            writer.Write(this._DepthcamWindowHeight);
            writer.Write(this._WebcamWindowStartX);
            writer.Write(this._WebcamWindowStartY);
            writer.Write(this._WebcamWindowWidth);
            writer.Write(this._WebcamWindowHeight);
            writer.Write(this._DeadZoneX);
            writer.Write(this._DeadZoneY);
            writer.Write(this._TranslateScaleFactor);
            writer.Write(this._RotateScaleFactor);
            writer.Write(this._CameraInterval);
        }
        
        /// <summary>
        ///Deserializes GUIOptions
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GUIOptions</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._WindowStartX = reader.ReadInt32();
            this._WindowStartY = reader.ReadInt32();
            this._DepthcamWindowStartX = reader.ReadInt32();
            this._DepthcamWindowStartY = reader.ReadInt32();
            this._DepthcamWindowWidth = reader.ReadInt32();
            this._DepthcamWindowHeight = reader.ReadInt32();
            this._WebcamWindowStartX = reader.ReadInt32();
            this._WebcamWindowStartY = reader.ReadInt32();
            this._WebcamWindowWidth = reader.ReadInt32();
            this._WebcamWindowHeight = reader.ReadInt32();
            this._DeadZoneX = reader.ReadDouble();
            this._DeadZoneY = reader.ReadDouble();
            this._TranslateScaleFactor = reader.ReadDouble();
            this._RotateScaleFactor = reader.ReadDouble();
            this._CameraInterval = reader.ReadInt32();
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RobotDashboardOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.RobotDashboard.Proxy.Get, global:: Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe> {
        
        public RobotDashboardOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Get operation = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Get operation = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Robot Dashboard service for Reference Platform")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Robot Dashboard")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2011/07/robotdashboard.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2011/07/robotdashboard.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2011/07/robotdashboard.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.RobotDashboardOperations = new global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.RobotDashboardOperations, "http://schemas.microsoft.com/robotics/2011/07/robotdashboard.user.html", "RobotDashboardOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.RobotDashboard.Proxy.RobotDashboardOperations RobotDashboardOperations;
    }
}
