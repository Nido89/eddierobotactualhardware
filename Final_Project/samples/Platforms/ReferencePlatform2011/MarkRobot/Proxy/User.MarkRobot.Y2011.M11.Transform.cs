//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("MarkRobot")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.MarkRobot.Y2011.M11, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f9074" +
    "033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_ReferencePlatform_MarkRobot_Proxy_MarkRobotState_TO_Microsoft_Robotics_ReferencePlatform_MarkRobot_MarkRobotState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.ReferencePlatform.MarkRobot.MarkRobotState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_ReferencePlatform_MarkRobot_MarkRobotState_TO_Microsoft_Robotics_ReferencePlatform_MarkRobot_Proxy_MarkRobotState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState_TO_Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Drive.DriveDifferentialTwoWheelState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState_TO_Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Motor.WheeledMotorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Motor.Proxy.MotorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Motor_Proxy_MotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_MotorState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Motor.MotorState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Motor_Proxy_MotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_MotorState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Pose), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Pose), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Vector3), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.PhysicalModel.Quaternion), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Encoder.Proxy.EncoderState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Encoder_Proxy_EncoderState_TO_Microsoft_Robotics_Services_Encoder_Proxy_EncoderState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Encoder.EncoderState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Encoder_Proxy_EncoderState_TO_Microsoft_Robotics_Services_Encoder_Proxy_EncoderState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState_TO_Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.InfraredSensorArray.InfraredSensorArrayState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState_TO_Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Infrared_Proxy_InfraredState_TO_Microsoft_Robotics_Services_Infrared_Proxy_InfraredState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Infrared.InfraredState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Infrared_Proxy_InfraredState_TO_Microsoft_Robotics_Services_Infrared_Proxy_InfraredState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState_TO_Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SonarSensorArray.SonarSensorArrayState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState_TO_Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sonar_Proxy_SonarState_TO_Microsoft_Robotics_Services_Sonar_Proxy_SonarState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Sonar.SonarState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Sonar_Proxy_SonarState_TO_Microsoft_Robotics_Services_Sonar_Proxy_SonarState0));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Battery_Proxy_BatteryState_TO_Microsoft_Robotics_Services_Battery_Proxy_BatteryState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.Battery.BatteryState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_Battery_Proxy_BatteryState_TO_Microsoft_Robotics_Services_Battery_Proxy_BatteryState0));
        }
        
        public static object Microsoft_Robotics_ReferencePlatform_MarkRobot_Proxy_MarkRobotState_TO_Microsoft_Robotics_ReferencePlatform_MarkRobot_MarkRobotState(object transformFrom) {
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.MarkRobotState target = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.MarkRobotState();
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState from = ((global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState)(transformFrom));
            target.LastStartTime = from.LastStartTime;
            target.SensorPollingInterval = from.SensorPollingInterval;
            target.BatteryVoltagePinIndex = from.BatteryVoltagePinIndex;
            target.BatteryVoltageDivider = from.BatteryVoltageDivider;
            target.InfraredRawValueDivisorScalar = from.InfraredRawValueDivisorScalar;
            target.InfraredDistanceExponent = from.InfraredDistanceExponent;
            target.SonarTimeValueMultiplier = from.SonarTimeValueMultiplier;
            if ((from.DriveState != null)) {
                target.DriveState = ((global::Microsoft.Robotics.Services.Drive.DriveDifferentialTwoWheelState)(Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState_TO_Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState(from.DriveState)));
            }
            else {
                target.DriveState = null;
            }
            if ((from.InfraredSensorState != null)) {
                target.InfraredSensorState = ((global::Microsoft.Robotics.Services.InfraredSensorArray.InfraredSensorArrayState)(Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState_TO_Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState(from.InfraredSensorState)));
            }
            else {
                target.InfraredSensorState = null;
            }
            if ((from.SonarSensorState != null)) {
                target.SonarSensorState = ((global::Microsoft.Robotics.Services.SonarSensorArray.SonarSensorArrayState)(Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState_TO_Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState(from.SonarSensorState)));
            }
            else {
                target.SonarSensorState = null;
            }
            if ((from.BatteryState != null)) {
                target.BatteryState = ((global::Microsoft.Robotics.Services.Battery.BatteryState)(Microsoft_Robotics_Services_Battery_Proxy_BatteryState_TO_Microsoft_Robotics_Services_Battery_Proxy_BatteryState(from.BatteryState)));
            }
            else {
                target.BatteryState = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_ReferencePlatform_MarkRobot_MarkRobotState_TO_Microsoft_Robotics_ReferencePlatform_MarkRobot_Proxy_MarkRobotState(object transformFrom) {
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState target = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState();
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.MarkRobotState from = ((global::Microsoft.Robotics.ReferencePlatform.MarkRobot.MarkRobotState)(transformFrom));
            target.LastStartTime = from.LastStartTime;
            target.SensorPollingInterval = from.SensorPollingInterval;
            target.BatteryVoltagePinIndex = from.BatteryVoltagePinIndex;
            target.BatteryVoltageDivider = from.BatteryVoltageDivider;
            target.InfraredRawValueDivisorScalar = from.InfraredRawValueDivisorScalar;
            target.InfraredDistanceExponent = from.InfraredDistanceExponent;
            target.SonarTimeValueMultiplier = from.SonarTimeValueMultiplier;
            global::Microsoft.Robotics.Services.Drive.DriveDifferentialTwoWheelState tmp = from.DriveState;
            if ((tmp != null)) {
                target.DriveState = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState)(Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState_TO_Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState0(tmp)));
            }
            global::Microsoft.Robotics.Services.InfraredSensorArray.InfraredSensorArrayState tmp0 = from.InfraredSensorState;
            if ((tmp0 != null)) {
                target.InfraredSensorState = ((global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState)(Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState_TO_Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState0(tmp0)));
            }
            global::Microsoft.Robotics.Services.SonarSensorArray.SonarSensorArrayState tmp1 = from.SonarSensorState;
            if ((tmp1 != null)) {
                target.SonarSensorState = ((global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState)(Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState_TO_Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState0(tmp1)));
            }
            global::Microsoft.Robotics.Services.Battery.BatteryState tmp2 = from.BatteryState;
            if ((tmp2 != null)) {
                target.BatteryState = ((global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState)(Microsoft_Robotics_Services_Battery_Proxy_BatteryState_TO_Microsoft_Robotics_Services_Battery_Proxy_BatteryState0(tmp2)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState_TO_Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState(object transformFrom) {
            global::Microsoft.Robotics.Services.Drive.DriveDifferentialTwoWheelState target = new global::Microsoft.Robotics.Services.Drive.DriveDifferentialTwoWheelState();
            global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState from = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            if ((from.LeftWheel != null)) {
                target.LeftWheel = ((global::Microsoft.Robotics.Services.Motor.WheeledMotorState)(Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState(from.LeftWheel)));
            }
            else {
                target.LeftWheel = null;
            }
            if ((from.RightWheel != null)) {
                target.RightWheel = ((global::Microsoft.Robotics.Services.Motor.WheeledMotorState)(Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState(from.RightWheel)));
            }
            else {
                target.RightWheel = null;
            }
            target.DistanceBetweenWheels = from.DistanceBetweenWheels;
            target.IsEnabled = from.IsEnabled;
            target.DriveDistanceStage = ((global::Microsoft.Robotics.Services.Drive.DriveStage)(((int)(from.DriveDistanceStage))));
            target.RotateDegreesStage = ((global::Microsoft.Robotics.Services.Drive.DriveStage)(((int)(from.RotateDegreesStage))));
            target.DriveState = ((global::Microsoft.Robotics.Services.Drive.DriveState)(((int)(from.DriveState))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState_TO_Microsoft_Robotics_Services_Drive_Proxy_DriveDifferentialTwoWheelState0(object transformFrom) {
            global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState target = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState();
            global::Microsoft.Robotics.Services.Drive.DriveDifferentialTwoWheelState from = ((global::Microsoft.Robotics.Services.Drive.DriveDifferentialTwoWheelState)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            global::Microsoft.Robotics.Services.Motor.WheeledMotorState tmp = from.LeftWheel;
            if ((tmp != null)) {
                target.LeftWheel = ((global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState)(Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState0(tmp)));
            }
            global::Microsoft.Robotics.Services.Motor.WheeledMotorState tmp0 = from.RightWheel;
            if ((tmp0 != null)) {
                target.RightWheel = ((global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState)(Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState0(tmp0)));
            }
            target.DistanceBetweenWheels = from.DistanceBetweenWheels;
            target.IsEnabled = from.IsEnabled;
            target.DriveDistanceStage = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveStage)(((int)(from.DriveDistanceStage))));
            target.RotateDegreesStage = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveStage)(((int)(from.RotateDegreesStage))));
            target.DriveState = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveState)(((int)(from.DriveState))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Motor.WheeledMotorState target = new global::Microsoft.Robotics.Services.Motor.WheeledMotorState();
            global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState from = ((global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState)(transformFrom));
            target.WheelSpeed = from.WheelSpeed;
            target.Name = from.Name;
            if ((from.MotorState != null)) {
                target.MotorState = ((global::Microsoft.Robotics.Services.Motor.MotorState)(Microsoft_Robotics_Services_Motor_Proxy_MotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_MotorState(from.MotorState)));
            }
            else {
                target.MotorState = null;
            }
            target.Radius = from.Radius;
            target.GearRatio = from.GearRatio;
            if ((from.EncoderState != null)) {
                target.EncoderState = ((global::Microsoft.Robotics.Services.Encoder.EncoderState)(Microsoft_Robotics_Services_Encoder_Proxy_EncoderState_TO_Microsoft_Robotics_Services_Encoder_Proxy_EncoderState(from.EncoderState)));
            }
            else {
                target.EncoderState = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_WheeledMotorState0(object transformFrom) {
            global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState target = new global::Microsoft.Robotics.Services.Motor.Proxy.WheeledMotorState();
            global::Microsoft.Robotics.Services.Motor.WheeledMotorState from = ((global::Microsoft.Robotics.Services.Motor.WheeledMotorState)(transformFrom));
            target.WheelSpeed = from.WheelSpeed;
            target.Name = from.Name;
            global::Microsoft.Robotics.Services.Motor.MotorState tmp = from.MotorState;
            if ((tmp != null)) {
                target.MotorState = ((global::Microsoft.Robotics.Services.Motor.Proxy.MotorState)(Microsoft_Robotics_Services_Motor_Proxy_MotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_MotorState0(tmp)));
            }
            target.Radius = from.Radius;
            target.GearRatio = from.GearRatio;
            global::Microsoft.Robotics.Services.Encoder.EncoderState tmp0 = from.EncoderState;
            if ((tmp0 != null)) {
                target.EncoderState = ((global::Microsoft.Robotics.Services.Encoder.Proxy.EncoderState)(Microsoft_Robotics_Services_Encoder_Proxy_EncoderState_TO_Microsoft_Robotics_Services_Encoder_Proxy_EncoderState0(tmp0)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Motor_Proxy_MotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_MotorState(object transformFrom) {
            global::Microsoft.Robotics.Services.Motor.MotorState target = new global::Microsoft.Robotics.Services.Motor.MotorState();
            global::Microsoft.Robotics.Services.Motor.Proxy.MotorState from = ((global::Microsoft.Robotics.Services.Motor.Proxy.MotorState)(transformFrom));
            target.Name = from.Name;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.CurrentPower = from.CurrentPower;
            target.PowerScalingFactor = from.PowerScalingFactor;
            target.ReversePolarity = from.ReversePolarity;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.Pose)));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Motor_Proxy_MotorState_TO_Microsoft_Robotics_Services_Motor_Proxy_MotorState0(object transformFrom) {
            global::Microsoft.Robotics.Services.Motor.Proxy.MotorState target = new global::Microsoft.Robotics.Services.Motor.Proxy.MotorState();
            global::Microsoft.Robotics.Services.Motor.MotorState from = ((global::Microsoft.Robotics.Services.Motor.MotorState)(transformFrom));
            target.Name = from.Name;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.CurrentPower = from.CurrentPower;
            target.PowerScalingFactor = from.PowerScalingFactor;
            target.ReversePolarity = from.ReversePolarity;
            global::Microsoft.Robotics.PhysicalModel.Pose tmp = from.Pose;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Pose target = new global::Microsoft.Robotics.PhysicalModel.Pose();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Pose from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(transformFrom));
            target.Position = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(from.Position)));
            target.Orientation = ((global::Microsoft.Robotics.PhysicalModel.Quaternion)(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion(from.Orientation)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Pose target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Pose();
            global::Microsoft.Robotics.PhysicalModel.Pose from = ((global::Microsoft.Robotics.PhysicalModel.Pose)(transformFrom));
            global::Microsoft.Robotics.PhysicalModel.Vector3 tmp = from.Position;
            target.Position = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(tmp)));
            global::Microsoft.Robotics.PhysicalModel.Quaternion tmp0 = from.Orientation;
            target.Orientation = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion)(Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0(tmp0)));
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector3(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Vector3 target = new global::Microsoft.Robotics.PhysicalModel.Vector3();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Vector3_TO_Microsoft_Robotics_PhysicalModel_Proxy_Vector30(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3();
            global::Microsoft.Robotics.PhysicalModel.Vector3 from = ((global::Microsoft.Robotics.PhysicalModel.Vector3)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Quaternion target = new global::Microsoft.Robotics.PhysicalModel.Quaternion();
            global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion from = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.W = from.W;
            return target;
        }
        
        public static object Microsoft_Robotics_PhysicalModel_Proxy_Quaternion_TO_Microsoft_Robotics_PhysicalModel_Proxy_Quaternion0(object transformFrom) {
            global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion target = new global::Microsoft.Robotics.PhysicalModel.Proxy.Quaternion();
            global::Microsoft.Robotics.PhysicalModel.Quaternion from = ((global::Microsoft.Robotics.PhysicalModel.Quaternion)(transformFrom));
            target.X = from.X;
            target.Y = from.Y;
            target.Z = from.Z;
            target.W = from.W;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Encoder_Proxy_EncoderState_TO_Microsoft_Robotics_Services_Encoder_Proxy_EncoderState(object transformFrom) {
            global::Microsoft.Robotics.Services.Encoder.EncoderState target = new global::Microsoft.Robotics.Services.Encoder.EncoderState();
            global::Microsoft.Robotics.Services.Encoder.Proxy.EncoderState from = ((global::Microsoft.Robotics.Services.Encoder.Proxy.EncoderState)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            target.TicksSinceReset = from.TicksSinceReset;
            target.CurrentAngle = from.CurrentAngle;
            target.CurrentReading = from.CurrentReading;
            target.TicksPerRevolution = from.TicksPerRevolution;
            target.HardwareIdentifier = from.HardwareIdentifier;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Encoder_Proxy_EncoderState_TO_Microsoft_Robotics_Services_Encoder_Proxy_EncoderState0(object transformFrom) {
            global::Microsoft.Robotics.Services.Encoder.Proxy.EncoderState target = new global::Microsoft.Robotics.Services.Encoder.Proxy.EncoderState();
            global::Microsoft.Robotics.Services.Encoder.EncoderState from = ((global::Microsoft.Robotics.Services.Encoder.EncoderState)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            target.TicksSinceReset = from.TicksSinceReset;
            target.CurrentAngle = from.CurrentAngle;
            target.CurrentReading = from.CurrentReading;
            target.TicksPerRevolution = from.TicksPerRevolution;
            target.HardwareIdentifier = from.HardwareIdentifier;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState_TO_Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState(object transformFrom) {
            global::Microsoft.Robotics.Services.InfraredSensorArray.InfraredSensorArrayState target = new global::Microsoft.Robotics.Services.InfraredSensorArray.InfraredSensorArrayState();
            global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState from = ((global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState)(transformFrom));
            if ((from.Sensors != null)) {
                int count = from.Sensors.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Infrared.InfraredState> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Infrared.InfraredState>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Infrared.InfraredState tmp0 = default(global::Microsoft.Robotics.Services.Infrared.InfraredState);
                    if ((from.Sensors[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.Infrared.InfraredState)(Microsoft_Robotics_Services_Infrared_Proxy_InfraredState_TO_Microsoft_Robotics_Services_Infrared_Proxy_InfraredState(from.Sensors[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.Sensors = tmp;
            }
            else {
                target.Sensors = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState_TO_Microsoft_Robotics_Services_InfraredSensorArray_Proxy_InfraredSensorArrayState0(object transformFrom) {
            global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState target = new global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState();
            global::Microsoft.Robotics.Services.InfraredSensorArray.InfraredSensorArrayState from = ((global::Microsoft.Robotics.Services.InfraredSensorArray.InfraredSensorArrayState)(transformFrom));
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Infrared.InfraredState> tmp = from.Sensors;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState tmp1 = default(global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState);
                    global::Microsoft.Robotics.Services.Infrared.InfraredState tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState)(Microsoft_Robotics_Services_Infrared_Proxy_InfraredState_TO_Microsoft_Robotics_Services_Infrared_Proxy_InfraredState0(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.Sensors = tmp0;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Infrared_Proxy_InfraredState_TO_Microsoft_Robotics_Services_Infrared_Proxy_InfraredState(object transformFrom) {
            global::Microsoft.Robotics.Services.Infrared.InfraredState target = new global::Microsoft.Robotics.Services.Infrared.InfraredState();
            global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState from = ((global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.ManufacturerIdentifier = from.ManufacturerIdentifier;
            target.MinDistance = from.MinDistance;
            target.MaxDistance = from.MaxDistance;
            target.DistanceMeasurement = from.DistanceMeasurement;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.Pose)));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Infrared_Proxy_InfraredState_TO_Microsoft_Robotics_Services_Infrared_Proxy_InfraredState0(object transformFrom) {
            global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState target = new global::Microsoft.Robotics.Services.Infrared.Proxy.InfraredState();
            global::Microsoft.Robotics.Services.Infrared.InfraredState from = ((global::Microsoft.Robotics.Services.Infrared.InfraredState)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.ManufacturerIdentifier = from.ManufacturerIdentifier;
            target.MinDistance = from.MinDistance;
            target.MaxDistance = from.MaxDistance;
            target.DistanceMeasurement = from.DistanceMeasurement;
            global::Microsoft.Robotics.PhysicalModel.Pose tmp = from.Pose;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp)));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState_TO_Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState(object transformFrom) {
            global::Microsoft.Robotics.Services.SonarSensorArray.SonarSensorArrayState target = new global::Microsoft.Robotics.Services.SonarSensorArray.SonarSensorArrayState();
            global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState from = ((global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState)(transformFrom));
            if ((from.Sensors != null)) {
                int count = from.Sensors.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sonar.SonarState> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sonar.SonarState>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sonar.SonarState tmp0 = default(global::Microsoft.Robotics.Services.Sonar.SonarState);
                    if ((from.Sensors[index] != null)) {
                        tmp0 = ((global::Microsoft.Robotics.Services.Sonar.SonarState)(Microsoft_Robotics_Services_Sonar_Proxy_SonarState_TO_Microsoft_Robotics_Services_Sonar_Proxy_SonarState(from.Sensors[index])));
                    }
                    else {
                        tmp0 = null;
                    }
                    tmp.Add(tmp0);
                }
                target.Sensors = tmp;
            }
            else {
                target.Sensors = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState_TO_Microsoft_Robotics_Services_SonarSensorArray_Proxy_SonarSensorArrayState0(object transformFrom) {
            global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState target = new global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState();
            global::Microsoft.Robotics.Services.SonarSensorArray.SonarSensorArrayState from = ((global::Microsoft.Robotics.Services.SonarSensorArray.SonarSensorArrayState)(transformFrom));
            global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sonar.SonarState> tmp = from.Sensors;
            if ((tmp != null)) {
                int count = tmp.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState> tmp0 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState tmp1 = default(global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState);
                    global::Microsoft.Robotics.Services.Sonar.SonarState tmp2 = tmp[index];
                    if ((tmp2 != null)) {
                        tmp1 = ((global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState)(Microsoft_Robotics_Services_Sonar_Proxy_SonarState_TO_Microsoft_Robotics_Services_Sonar_Proxy_SonarState0(tmp2)));
                    }
                    tmp0.Add(tmp1);
                }
                target.Sensors = tmp0;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sonar_Proxy_SonarState_TO_Microsoft_Robotics_Services_Sonar_Proxy_SonarState(object transformFrom) {
            global::Microsoft.Robotics.Services.Sonar.SonarState target = new global::Microsoft.Robotics.Services.Sonar.SonarState();
            global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState from = ((global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.MaxDistance = from.MaxDistance;
            target.DistanceMeasurement = from.DistanceMeasurement;
            target.AngularRange = from.AngularRange;
            target.AngularResolution = from.AngularResolution;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose(from.Pose)));
            if ((from.DistanceMeasurements != null)) {
                int count = from.DistanceMeasurements.Length;
                double[] tmp = new double[count];
                global::System.Buffer.BlockCopy(from.DistanceMeasurements, 0, tmp, 0, global::System.Buffer.ByteLength(from.DistanceMeasurements));
                target.DistanceMeasurements = tmp;
            }
            else {
                target.DistanceMeasurements = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Sonar_Proxy_SonarState_TO_Microsoft_Robotics_Services_Sonar_Proxy_SonarState0(object transformFrom) {
            global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState target = new global::Microsoft.Robotics.Services.Sonar.Proxy.SonarState();
            global::Microsoft.Robotics.Services.Sonar.SonarState from = ((global::Microsoft.Robotics.Services.Sonar.SonarState)(transformFrom));
            target.TimeStamp = from.TimeStamp;
            target.HardwareIdentifier = from.HardwareIdentifier;
            target.MaxDistance = from.MaxDistance;
            target.DistanceMeasurement = from.DistanceMeasurement;
            target.AngularRange = from.AngularRange;
            target.AngularResolution = from.AngularResolution;
            global::Microsoft.Robotics.PhysicalModel.Pose tmp = from.Pose;
            target.Pose = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Pose)(Microsoft_Robotics_PhysicalModel_Proxy_Pose_TO_Microsoft_Robotics_PhysicalModel_Proxy_Pose0(tmp)));
            double[] tmp0 = from.DistanceMeasurements;
            if ((tmp0 != null)) {
                int count = tmp0.Length;
                double[] tmp1 = new double[count];
                global::System.Buffer.BlockCopy(tmp0, 0, tmp1, 0, global::System.Buffer.ByteLength(tmp0));
                target.DistanceMeasurements = tmp1;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Battery_Proxy_BatteryState_TO_Microsoft_Robotics_Services_Battery_Proxy_BatteryState(object transformFrom) {
            global::Microsoft.Robotics.Services.Battery.BatteryState target = new global::Microsoft.Robotics.Services.Battery.BatteryState();
            global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState from = ((global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState)(transformFrom));
            target.MaxBatteryPower = from.MaxBatteryPower;
            target.PercentBatteryPower = from.PercentBatteryPower;
            target.PercentCriticalBattery = from.PercentCriticalBattery;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_Battery_Proxy_BatteryState_TO_Microsoft_Robotics_Services_Battery_Proxy_BatteryState0(object transformFrom) {
            global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState target = new global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState();
            global::Microsoft.Robotics.Services.Battery.BatteryState from = ((global::Microsoft.Robotics.Services.Battery.BatteryState)(transformFrom));
            target.MaxBatteryPower = from.MaxBatteryPower;
            target.PercentBatteryPower = from.PercentBatteryPower;
            target.PercentCriticalBattery = from.PercentCriticalBattery;
            return target;
        }
    }
}
