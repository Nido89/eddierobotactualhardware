//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("MarkRobot")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.MarkRobot.Y2011.M11, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f9074" +
    "033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2011/11/markrobot.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2011/11/markrobot.user.html", ElementName="MarkRobotState")]
    public class MarkRobotState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MarkRobotState() {
        }
        
        private global::System.DateTime _LastStartTime;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.DateTime LastStartTime {
            get {
                return this._LastStartTime;
            }
            set {
                this._LastStartTime = value;
            }
        }
        
        private int _SensorPollingInterval;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int SensorPollingInterval {
            get {
                return this._SensorPollingInterval;
            }
            set {
                this._SensorPollingInterval = value;
            }
        }
        
        private int _BatteryVoltagePinIndex;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int BatteryVoltagePinIndex {
            get {
                return this._BatteryVoltagePinIndex;
            }
            set {
                this._BatteryVoltagePinIndex = value;
            }
        }
        
        private double _BatteryVoltageDivider;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double BatteryVoltageDivider {
            get {
                return this._BatteryVoltageDivider;
            }
            set {
                this._BatteryVoltageDivider = value;
            }
        }
        
        private double _InfraredRawValueDivisorScalar;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double InfraredRawValueDivisorScalar {
            get {
                return this._InfraredRawValueDivisorScalar;
            }
            set {
                this._InfraredRawValueDivisorScalar = value;
            }
        }
        
        private double _InfraredDistanceExponent;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double InfraredDistanceExponent {
            get {
                return this._InfraredDistanceExponent;
            }
            set {
                this._InfraredDistanceExponent = value;
            }
        }
        
        private double _SonarTimeValueMultiplier;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public double SonarTimeValueMultiplier {
            get {
                return this._SonarTimeValueMultiplier;
            }
            set {
                this._SonarTimeValueMultiplier = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState _DriveState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState DriveState {
            get {
                return this._DriveState;
            }
            set {
                this._DriveState = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState _InfraredSensorState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState InfraredSensorState {
            get {
                return this._InfraredSensorState;
            }
            set {
                this._InfraredSensorState = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState _SonarSensorState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState SonarSensorState {
            get {
                return this._SonarSensorState;
            }
            set {
                this._SonarSensorState = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState _BatteryState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState BatteryState {
            get {
                return this._BatteryState;
            }
            set {
                this._BatteryState = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current MarkRobotState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState typedTarget = ((global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState)(target));
            typedTarget._LastStartTime = this._LastStartTime;
            typedTarget._SensorPollingInterval = this._SensorPollingInterval;
            typedTarget._BatteryVoltagePinIndex = this._BatteryVoltagePinIndex;
            typedTarget._BatteryVoltageDivider = this._BatteryVoltageDivider;
            typedTarget._InfraredRawValueDivisorScalar = this._InfraredRawValueDivisorScalar;
            typedTarget._InfraredDistanceExponent = this._InfraredDistanceExponent;
            typedTarget._SonarTimeValueMultiplier = this._SonarTimeValueMultiplier;
            if ((this._DriveState != null)) {
                global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState tmp = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._DriveState = tmp;
            }
            if ((this._InfraredSensorState != null)) {
                global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState tmp0 = new global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._InfraredSensorState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._InfraredSensorState = tmp0;
            }
            if ((this._SonarSensorState != null)) {
                global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState tmp1 = new global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SonarSensorState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._SonarSensorState = tmp1;
            }
            if ((this._BatteryState != null)) {
                global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState tmp2 = new global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._BatteryState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._BatteryState = tmp2;
            }
        }
        
        /// <summary>
        ///Clones MarkRobotState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState target0 = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MarkRobotState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._LastStartTime, writer);
            writer.Write(this._SensorPollingInterval);
            writer.Write(this._BatteryVoltagePinIndex);
            writer.Write(this._BatteryVoltageDivider);
            writer.Write(this._InfraredRawValueDivisorScalar);
            writer.Write(this._InfraredDistanceExponent);
            writer.Write(this._SonarTimeValueMultiplier);
            if ((this._DriveState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveState)).Serialize(writer);
            }
            if ((this._InfraredSensorState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._InfraredSensorState)).Serialize(writer);
            }
            if ((this._SonarSensorState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SonarSensorState)).Serialize(writer);
            }
            if ((this._BatteryState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._BatteryState)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes MarkRobotState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MarkRobotState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._LastStartTime = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._SensorPollingInterval = reader.ReadInt32();
            this._BatteryVoltagePinIndex = reader.ReadInt32();
            this._BatteryVoltageDivider = reader.ReadDouble();
            this._InfraredRawValueDivisorScalar = reader.ReadDouble();
            this._InfraredDistanceExponent = reader.ReadDouble();
            this._SonarTimeValueMultiplier = reader.ReadDouble();
            if ((reader.ReadByte() != 0)) {
                this._DriveState = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._InfraredSensorState = ((global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorArrayState())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._SonarSensorState = ((global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorArrayState())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._BatteryState = ((global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Battery.Proxy.BatteryState())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class MarkRobotOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe> {
        
        public MarkRobotOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get operation = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get operation = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe operation = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe operation = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Mobile autonomous robot using Kinect service for the 2011 Reference Platform")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) MarkRobot")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2011/11/markrobot.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2011/11/markrobot.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2011/11/markrobot.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.MarkRobotOperations = new global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotOperations();
            this.BatteryOperations = new global::Microsoft.Robotics.Services.Battery.Proxy.BatteryOperations();
            this.DriveOperations = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveOperations();
            this.InfraredSensorOperations = new global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorOperations();
            this.SonarSensorOperations = new global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.MarkRobotOperations, "http://schemas.microsoft.com/2011/11/markrobot.user.html", "MarkRobotOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.BatteryOperations, "http://schemas.microsoft.com/2006/06/battery.html", "BatteryOperations", null), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DriveOperations, "http://schemas.microsoft.com/robotics/2006/05/drive.html", "DriveOperations", null), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.InfraredSensorOperations, "http://schemas.microsoft.com/robotics/2011/10/infraredsensorarray.html", "InfraredSensorOperations", "/irsensors"), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SonarSensorOperations, "http://schemas.microsoft.com/robotics/2011/09/sonarsensorarray.html", "SonarSensorOperations", "/sonarsensors"));
        }
        
        public global::Microsoft.Robotics.ReferencePlatform.MarkRobot.Proxy.MarkRobotOperations MarkRobotOperations;
        
        public global::Microsoft.Robotics.Services.Battery.Proxy.BatteryOperations BatteryOperations;
        
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveOperations DriveOperations;
        
        public global::Microsoft.Robotics.Services.InfraredSensorArray.Proxy.InfraredSensorOperations InfraredSensorOperations;
        
        public global::Microsoft.Robotics.Services.SonarSensorArray.Proxy.SonarSensorOperations SonarSensorOperations;
    }
}
