//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("SerialCOMService")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.SerialCOMService.Y2011.M07, Version=0.0.0.0, Culture=neutral, PublicKeyToken" +
    "=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.SerialComService.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="SerialCOMServiceState")]
    public class SerialCOMServiceState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SerialCOMServiceState() {
        }
        
        private int _PortNumber;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int PortNumber {
            get {
                return this._PortNumber;
            }
            set {
                this._PortNumber = value;
            }
        }
        
        private int _BaudRate;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int BaudRate {
            get {
                return this._BaudRate;
            }
            set {
                this._BaudRate = value;
            }
        }
        
        private global::System.IO.Ports.Parity _Parity;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.IO.Ports.Parity Parity {
            get {
                return this._Parity;
            }
            set {
                this._Parity = value;
            }
        }
        
        private int _DataBits;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int DataBits {
            get {
                return this._DataBits;
            }
            set {
                this._DataBits = value;
            }
        }
        
        private global::System.IO.Ports.StopBits _StopBits;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.IO.Ports.StopBits StopBits {
            get {
                return this._StopBits;
            }
            set {
                this._StopBits = value;
            }
        }
        
        private int _ReadTimeout;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int ReadTimeout {
            get {
                return this._ReadTimeout;
            }
            set {
                this._ReadTimeout = value;
            }
        }
        
        private int _WriteTimeout;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int WriteTimeout {
            get {
                return this._WriteTimeout;
            }
            set {
                this._WriteTimeout = value;
            }
        }
        
        private global::System.IO.Ports.Handshake _Handshake;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::System.IO.Ports.Handshake Handshake {
            get {
                return this._Handshake;
            }
            set {
                this._Handshake = value;
            }
        }
        
        private bool _RtsEnable;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool RtsEnable {
            get {
                return this._RtsEnable;
            }
            set {
                this._RtsEnable = value;
            }
        }
        
        private bool _DtrEnable;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool DtrEnable {
            get {
                return this._DtrEnable;
            }
            set {
                this._DtrEnable = value;
            }
        }
        
        private bool _DiscardNull;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool DiscardNull {
            get {
                return this._DiscardNull;
            }
            set {
                this._DiscardNull = value;
            }
        }
        
        private bool _Asynchronous;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool Asynchronous {
            get {
                return this._Asynchronous;
            }
            set {
                this._Asynchronous = value;
            }
        }
        
        private bool _AutoConnect;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool AutoConnect {
            get {
                return this._AutoConnect;
            }
            set {
                this._AutoConnect = value;
            }
        }
        
        private bool _IsConnected;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public bool IsConnected {
            get {
                return this._IsConnected;
            }
            set {
                this._IsConnected = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SerialCOMServiceState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState typedTarget = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState)(target));
            typedTarget._PortNumber = this._PortNumber;
            typedTarget._BaudRate = this._BaudRate;
            typedTarget._Parity = this._Parity;
            typedTarget._DataBits = this._DataBits;
            typedTarget._StopBits = this._StopBits;
            typedTarget._ReadTimeout = this._ReadTimeout;
            typedTarget._WriteTimeout = this._WriteTimeout;
            typedTarget._Handshake = this._Handshake;
            typedTarget._RtsEnable = this._RtsEnable;
            typedTarget._DtrEnable = this._DtrEnable;
            typedTarget._DiscardNull = this._DiscardNull;
            typedTarget._Asynchronous = this._Asynchronous;
            typedTarget._AutoConnect = this._AutoConnect;
            typedTarget._IsConnected = this._IsConnected;
        }
        
        /// <summary>
        ///Clones SerialCOMServiceState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState target0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SerialCOMServiceState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._PortNumber);
            writer.Write(this._BaudRate);
            writer.Write(((int)(this._Parity)));
            writer.Write(this._DataBits);
            writer.Write(((int)(this._StopBits)));
            writer.Write(this._ReadTimeout);
            writer.Write(this._WriteTimeout);
            writer.Write(((int)(this._Handshake)));
            writer.Write(this._RtsEnable);
            writer.Write(this._DtrEnable);
            writer.Write(this._DiscardNull);
            writer.Write(this._Asynchronous);
            writer.Write(this._AutoConnect);
            writer.Write(this._IsConnected);
        }
        
        /// <summary>
        ///Deserializes SerialCOMServiceState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SerialCOMServiceState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._PortNumber = reader.ReadInt32();
            this._BaudRate = reader.ReadInt32();
            this._Parity = ((global::System.IO.Ports.Parity)(reader.ReadInt32()));
            this._DataBits = reader.ReadInt32();
            this._StopBits = ((global::System.IO.Ports.StopBits)(reader.ReadInt32()));
            this._ReadTimeout = reader.ReadInt32();
            this._WriteTimeout = reader.ReadInt32();
            this._Handshake = ((global::System.IO.Ports.Handshake)(reader.ReadInt32()));
            this._RtsEnable = reader.ReadBoolean();
            this._DtrEnable = reader.ReadBoolean();
            this._DiscardNull = reader.ReadBoolean();
            this._Asynchronous = reader.ReadBoolean();
            this._AutoConnect = reader.ReadBoolean();
            this._IsConnected = reader.ReadBoolean();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="OpenPortRequestType")]
    public class OpenPortRequestType : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public OpenPortRequestType() {
        }
        
        /// <summary>
        ///Copies the data member values of the current OpenPortRequestType to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType typedTarget = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType)(target));
        }
        
        /// <summary>
        ///Clones OpenPortRequestType
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType target0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current OpenPortRequestType to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes OpenPortRequestType
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized OpenPortRequestType</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="ClosePortRequestType")]
    public class ClosePortRequestType : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClosePortRequestType() {
        }
        
        /// <summary>
        ///Copies the data member values of the current ClosePortRequestType to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType typedTarget = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType)(target));
        }
        
        /// <summary>
        ///Clones ClosePortRequestType
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType target0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClosePortRequestType to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes ClosePortRequestType
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClosePortRequestType</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="ClearBufferRequest")]
    public class ClearBufferRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ClearBufferRequest() {
        }
        
        private global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialPortClearOptions _BufferToClear;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialPortClearOptions BufferToClear {
            get {
                return this._BufferToClear;
            }
            set {
                this._BufferToClear = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ClearBufferRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest typedTarget = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest)(target));
            typedTarget._BufferToClear = this._BufferToClear;
        }
        
        /// <summary>
        ///Clones ClearBufferRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest target0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ClearBufferRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(((int)(this._BufferToClear)));
        }
        
        /// <summary>
        ///Deserializes ClearBufferRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ClearBufferRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._BufferToClear = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialPortClearOptions)(reader.ReadInt32()));
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="SendPacketRequest")]
    public class SendPacketRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SendPacketRequest() {
        }
        
        public SendPacketRequest(global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet data) {
            this._Data = data;
        }
        
        private global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet _Data;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet Data {
            get {
                return this._Data;
            }
            set {
                this._Data = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SendPacketRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest typedTarget = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest)(target));
            if ((this._Data != null)) {
                global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet tmp = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Data)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Data = tmp;
            }
        }
        
        /// <summary>
        ///Clones SendPacketRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest target0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SendPacketRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Data == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Data)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes SendPacketRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SendPacketRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Data = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="Packet")]
    public class Packet : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Packet() {
        }
        
        public Packet(byte[] message) {
            this._Message = message;
        }
        
        private byte[] _Message;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public byte[] Message {
            get {
                return this._Message;
            }
            set {
                this._Message = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Packet to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet typedTarget = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet)(target));
            if ((this._Message != null)) {
                int count = this._Message.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._Message, 0, tmp, 0, global::System.Buffer.ByteLength(this._Message));
                typedTarget._Message = tmp;
            }
        }
        
        /// <summary>
        ///Clones Packet
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet target0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Packet to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Message == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Message.Length);
                writer.Write(this._Message);
            }
        }
        
        /// <summary>
        ///Deserializes Packet
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Packet</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Message = reader.ReadBytes(count0);
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="GetPacketRequest")]
    public class GetPacketRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public GetPacketRequest() {
        }
        
        public GetPacketRequest(string terminator) {
            this._Terminator = terminator;
        }
        
        private string _Terminator;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Terminator {
            get {
                return this._Terminator;
            }
            set {
                this._Terminator = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current GetPacketRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest typedTarget = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest)(target));
            typedTarget._Terminator = this._Terminator;
        }
        
        /// <summary>
        ///Clones GetPacketRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest target0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current GetPacketRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Terminator == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Terminator);
            }
        }
        
        /// <summary>
        ///Deserializes GetPacketRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized GetPacketRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Terminator = reader.ReadString();
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="SendAndGetRequest")]
    public class SendAndGetRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SendAndGetRequest() {
        }
        
        private int _Timeout;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public int Timeout {
            get {
                return this._Timeout;
            }
            set {
                this._Timeout = value;
            }
        }
        
        private string _Terminator;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public string Terminator {
            get {
                return this._Terminator;
            }
            set {
                this._Terminator = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet _Data;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet Data {
            get {
                return this._Data;
            }
            set {
                this._Data = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SendAndGetRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest typedTarget = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest)(target));
            typedTarget._Timeout = this._Timeout;
            typedTarget._Terminator = this._Terminator;
            if ((this._Data != null)) {
                global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet tmp = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Data)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Data = tmp;
            }
        }
        
        /// <summary>
        ///Clones SendAndGetRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest target0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SendAndGetRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Timeout);
            if ((this._Terminator == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Terminator);
            }
            if ((this._Data == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Data)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes SendAndGetRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SendAndGetRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Timeout = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._Terminator = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Data = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GetConfiguration : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState>> {
        
        public GetConfiguration() {
        }
        
        public GetConfiguration(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public GetConfiguration(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetConfiguration : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public SetConfiguration() {
        }
        
        public SetConfiguration(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body) : 
                base(body) {
        }
        
        public SetConfiguration(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class OpenPort : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public OpenPort() {
        }
        
        public OpenPort(global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType body) : 
                base(body) {
        }
        
        public OpenPort(global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ClosePort : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ClosePort() {
        }
        
        public ClosePort(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType body) : 
                base(body) {
        }
        
        public ClosePort(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ClearBuffer : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public ClearBuffer() {
        }
        
        public ClearBuffer(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest body) : 
                base(body) {
        }
        
        public ClearBuffer(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SendPacket : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SendPacket() {
        }
        
        public SendPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest body) : 
                base(body) {
        }
        
        public SendPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GetPacket : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: W3C.Soap.Fault>> {
        
        public GetPacket() {
        }
        
        public GetPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest body) : 
                base(body) {
        }
        
        public GetPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReceivedPacket : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ReceivedPacket() {
        }
        
        public ReceivedPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet body) : 
                base(body) {
        }
        
        public ReceivedPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SendAndGet : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: W3C.Soap.Fault>> {
        
        public SendAndGet() {
        }
        
        public SendAndGet(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest body) : 
                base(body) {
        }
        
        public SendAndGet(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SerialCOMServiceOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration, global:: Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration, global:: Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort, global:: Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort, global:: Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer, global:: Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket, global:: Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket, global:: Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket, global:: Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet, global:: Microsoft.Robotics.Services.SerialComService.Proxy.Replace, global:: Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe> {
        
        public SerialCOMServiceOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState> GetConfiguration() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetConfiguration(out global::Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState> GetConfiguration(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetConfiguration(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> SetConfiguration() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetConfiguration(out global::Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> SetConfiguration(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetConfiguration(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SetConfiguration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> OpenPort() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice OpenPort(out global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType();
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> OpenPort(global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice OpenPort(global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ClosePort() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClosePort(out global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType();
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ClosePort(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClosePort(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePort(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> ClearBuffer() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClearBuffer(out global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest();
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> ClearBuffer(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ClearBuffer(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBuffer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SendPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet data) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest(data);
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet data, out global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest(data);
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SendPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: W3C.Soap.Fault> GetPacket(string terminator) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest(terminator);
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetPacket(string terminator, out global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest(terminator);
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: W3C.Soap.Fault> GetPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ReceivedPacket(byte[] message) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet(message);
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReceivedPacket(byte[] message, out global::Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet(message);
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ReceivedPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ReceivedPacket(global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ReceivedPacket(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: W3C.Soap.Fault> SendAndGet() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendAndGet(out global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest();
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet, global:: W3C.Soap.Fault> SendAndGet(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SendAndGet(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Replace operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.SerialComService.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Replace operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState body, out global::Microsoft.Robotics.Services.SerialComService.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.microsoft.com/2011/07/serialcomservice.user.html", ElementName="SerialPortClearOptions")]
    public enum SerialPortClearOptions : int {
        
        Both = 0,
        
        Input = 1,
        
        Output = 2,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Generic Serial Port IO")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) SerialCOMService")]
    public class Contract {
        
        public const string Identifier = "http://www.microsoft.com/2011/07/serialcomservice.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.microsoft.com/2011/07/serialcomservice.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://www.microsoft.com/2011/07/serialcomservice.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SerialCOMServiceOperations = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SerialCOMServiceOperations, "http://www.microsoft.com/2011/07/serialcomservice.user.html", "SerialCOMServiceOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceOperations SerialCOMServiceOperations;
    }
}
