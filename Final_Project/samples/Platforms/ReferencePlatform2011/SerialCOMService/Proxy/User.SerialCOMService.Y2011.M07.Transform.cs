//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("SerialCOMService")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Transform, SourceAssemblyKey="User.SerialCOMService.Y2011.M07, Version=0.0.0.0, Culture=neutral, PublicKeyToken" +
    "=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Dss.Transforms.TransformUser {
    
    
    public class Transforms : global::Microsoft.Dss.Core.Transforms.TransformBase {
        
        static Transforms() {
            Register();
        }
        
        public static void Register() {
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Proxy_SerialCOMServiceState_TO_Microsoft_Robotics_Services_SerialComService_SerialCOMServiceState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.SerialCOMServiceState), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_SerialCOMServiceState_TO_Microsoft_Robotics_Services_SerialComService_Proxy_SerialCOMServiceState));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Proxy_OpenPortRequestType_TO_Microsoft_Robotics_Services_SerialComService_OpenPortRequestType));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.OpenPortRequestType), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_OpenPortRequestType_TO_Microsoft_Robotics_Services_SerialComService_Proxy_OpenPortRequestType));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Proxy_ClosePortRequestType_TO_Microsoft_Robotics_Services_SerialComService_ClosePortRequestType));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.ClosePortRequestType), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_ClosePortRequestType_TO_Microsoft_Robotics_Services_SerialComService_Proxy_ClosePortRequestType));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Proxy_ClearBufferRequest_TO_Microsoft_Robotics_Services_SerialComService_ClearBufferRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.ClearBufferRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_ClearBufferRequest_TO_Microsoft_Robotics_Services_SerialComService_Proxy_ClearBufferRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Proxy_SendPacketRequest_TO_Microsoft_Robotics_Services_SerialComService_SendPacketRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.SendPacketRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_SendPacketRequest_TO_Microsoft_Robotics_Services_SerialComService_Proxy_SendPacketRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Proxy_Packet_TO_Microsoft_Robotics_Services_SerialComService_Packet));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Packet), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Packet_TO_Microsoft_Robotics_Services_SerialComService_Proxy_Packet));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Proxy_GetPacketRequest_TO_Microsoft_Robotics_Services_SerialComService_GetPacketRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.GetPacketRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_GetPacketRequest_TO_Microsoft_Robotics_Services_SerialComService_Proxy_GetPacketRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddProxyTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_Proxy_SendAndGetRequest_TO_Microsoft_Robotics_Services_SerialComService_SendAndGetRequest));
            global::Microsoft.Dss.Core.Transforms.TransformBase.AddSourceTransform(typeof(global::Microsoft.Robotics.Services.SerialComService.SendAndGetRequest), new global::Microsoft.Dss.Core.Attributes.Transform(Microsoft_Robotics_Services_SerialComService_SendAndGetRequest_TO_Microsoft_Robotics_Services_SerialComService_Proxy_SendAndGetRequest));
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_Proxy_SerialCOMServiceState_TO_Microsoft_Robotics_Services_SerialComService_SerialCOMServiceState(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.SerialCOMServiceState target = new global::Microsoft.Robotics.Services.SerialComService.SerialCOMServiceState();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState from = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState)(transformFrom));
            target.PortNumber = from.PortNumber;
            target.BaudRate = from.BaudRate;
            target.Parity = from.Parity;
            target.DataBits = from.DataBits;
            target.StopBits = from.StopBits;
            target.ReadTimeout = from.ReadTimeout;
            target.WriteTimeout = from.WriteTimeout;
            target.Handshake = from.Handshake;
            target.RtsEnable = from.RtsEnable;
            target.DtrEnable = from.DtrEnable;
            target.DiscardNull = from.DiscardNull;
            target.Asynchronous = from.Asynchronous;
            target.AutoConnect = from.AutoConnect;
            target.IsConnected = from.IsConnected;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_SerialCOMServiceState_TO_Microsoft_Robotics_Services_SerialComService_Proxy_SerialCOMServiceState(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState target = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialCOMServiceState();
            global::Microsoft.Robotics.Services.SerialComService.SerialCOMServiceState from = ((global::Microsoft.Robotics.Services.SerialComService.SerialCOMServiceState)(transformFrom));
            target.PortNumber = from.PortNumber;
            target.BaudRate = from.BaudRate;
            target.Parity = from.Parity;
            target.DataBits = from.DataBits;
            target.StopBits = from.StopBits;
            target.ReadTimeout = from.ReadTimeout;
            target.WriteTimeout = from.WriteTimeout;
            target.Handshake = from.Handshake;
            target.RtsEnable = from.RtsEnable;
            target.DtrEnable = from.DtrEnable;
            target.DiscardNull = from.DiscardNull;
            target.Asynchronous = from.Asynchronous;
            target.AutoConnect = from.AutoConnect;
            target.IsConnected = from.IsConnected;
            return target;
        }
        
        private static global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType _cachedInstance0 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.OpenPortRequestType();
        
        private static global::Microsoft.Robotics.Services.SerialComService.OpenPortRequestType _cachedInstance = new global::Microsoft.Robotics.Services.SerialComService.OpenPortRequestType();
        
        public static object Microsoft_Robotics_Services_SerialComService_Proxy_OpenPortRequestType_TO_Microsoft_Robotics_Services_SerialComService_OpenPortRequestType(object transformFrom) {
            return _cachedInstance;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_OpenPortRequestType_TO_Microsoft_Robotics_Services_SerialComService_Proxy_OpenPortRequestType(object transformFrom) {
            return _cachedInstance0;
        }
        
        private static global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType _cachedInstance2 = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClosePortRequestType();
        
        private static global::Microsoft.Robotics.Services.SerialComService.ClosePortRequestType _cachedInstance1 = new global::Microsoft.Robotics.Services.SerialComService.ClosePortRequestType();
        
        public static object Microsoft_Robotics_Services_SerialComService_Proxy_ClosePortRequestType_TO_Microsoft_Robotics_Services_SerialComService_ClosePortRequestType(object transformFrom) {
            return _cachedInstance1;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_ClosePortRequestType_TO_Microsoft_Robotics_Services_SerialComService_Proxy_ClosePortRequestType(object transformFrom) {
            return _cachedInstance2;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_Proxy_ClearBufferRequest_TO_Microsoft_Robotics_Services_SerialComService_ClearBufferRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.ClearBufferRequest target = new global::Microsoft.Robotics.Services.SerialComService.ClearBufferRequest();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest from = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest)(transformFrom));
            target.BufferToClear = ((global::Microsoft.Robotics.Services.SerialComService.SerialPortClearOptions)(((int)(from.BufferToClear))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_ClearBufferRequest_TO_Microsoft_Robotics_Services_SerialComService_Proxy_ClearBufferRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest target = new global::Microsoft.Robotics.Services.SerialComService.Proxy.ClearBufferRequest();
            global::Microsoft.Robotics.Services.SerialComService.ClearBufferRequest from = ((global::Microsoft.Robotics.Services.SerialComService.ClearBufferRequest)(transformFrom));
            target.BufferToClear = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.SerialPortClearOptions)(((int)(from.BufferToClear))));
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_Proxy_SendPacketRequest_TO_Microsoft_Robotics_Services_SerialComService_SendPacketRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.SendPacketRequest target = new global::Microsoft.Robotics.Services.SerialComService.SendPacketRequest();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest from = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest)(transformFrom));
            if ((from.Data != null)) {
                target.Data = ((global::Microsoft.Robotics.Services.SerialComService.Packet)(Microsoft_Robotics_Services_SerialComService_Proxy_Packet_TO_Microsoft_Robotics_Services_SerialComService_Packet(from.Data)));
            }
            else {
                target.Data = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_SendPacketRequest_TO_Microsoft_Robotics_Services_SerialComService_Proxy_SendPacketRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest target = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendPacketRequest();
            global::Microsoft.Robotics.Services.SerialComService.SendPacketRequest from = ((global::Microsoft.Robotics.Services.SerialComService.SendPacketRequest)(transformFrom));
            global::Microsoft.Robotics.Services.SerialComService.Packet tmp = from.Data;
            if ((tmp != null)) {
                target.Data = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet)(Microsoft_Robotics_Services_SerialComService_Packet_TO_Microsoft_Robotics_Services_SerialComService_Proxy_Packet(tmp)));
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_Proxy_Packet_TO_Microsoft_Robotics_Services_SerialComService_Packet(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.Packet target = new global::Microsoft.Robotics.Services.SerialComService.Packet();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet from = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet)(transformFrom));
            if ((from.Message != null)) {
                int count = from.Message.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(from.Message, 0, tmp, 0, global::System.Buffer.ByteLength(from.Message));
                target.Message = tmp;
            }
            else {
                target.Message = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_Packet_TO_Microsoft_Robotics_Services_SerialComService_Proxy_Packet(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet target = new global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet();
            global::Microsoft.Robotics.Services.SerialComService.Packet from = ((global::Microsoft.Robotics.Services.SerialComService.Packet)(transformFrom));
            byte[] tmp = from.Message;
            if ((tmp != null)) {
                int count = tmp.Length;
                byte[] tmp0 = new byte[count];
                global::System.Buffer.BlockCopy(tmp, 0, tmp0, 0, global::System.Buffer.ByteLength(tmp));
                target.Message = tmp0;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_Proxy_GetPacketRequest_TO_Microsoft_Robotics_Services_SerialComService_GetPacketRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.GetPacketRequest target = new global::Microsoft.Robotics.Services.SerialComService.GetPacketRequest();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest from = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest)(transformFrom));
            target.Terminator = from.Terminator;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_GetPacketRequest_TO_Microsoft_Robotics_Services_SerialComService_Proxy_GetPacketRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest target = new global::Microsoft.Robotics.Services.SerialComService.Proxy.GetPacketRequest();
            global::Microsoft.Robotics.Services.SerialComService.GetPacketRequest from = ((global::Microsoft.Robotics.Services.SerialComService.GetPacketRequest)(transformFrom));
            target.Terminator = from.Terminator;
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_Proxy_SendAndGetRequest_TO_Microsoft_Robotics_Services_SerialComService_SendAndGetRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.SendAndGetRequest target = new global::Microsoft.Robotics.Services.SerialComService.SendAndGetRequest();
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest from = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest)(transformFrom));
            target.Timeout = from.Timeout;
            target.Terminator = from.Terminator;
            if ((from.Data != null)) {
                target.Data = ((global::Microsoft.Robotics.Services.SerialComService.Packet)(Microsoft_Robotics_Services_SerialComService_Proxy_Packet_TO_Microsoft_Robotics_Services_SerialComService_Packet(from.Data)));
            }
            else {
                target.Data = null;
            }
            return target;
        }
        
        public static object Microsoft_Robotics_Services_SerialComService_SendAndGetRequest_TO_Microsoft_Robotics_Services_SerialComService_Proxy_SendAndGetRequest(object transformFrom) {
            global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest target = new global::Microsoft.Robotics.Services.SerialComService.Proxy.SendAndGetRequest();
            global::Microsoft.Robotics.Services.SerialComService.SendAndGetRequest from = ((global::Microsoft.Robotics.Services.SerialComService.SendAndGetRequest)(transformFrom));
            target.Timeout = from.Timeout;
            target.Terminator = from.Terminator;
            global::Microsoft.Robotics.Services.SerialComService.Packet tmp = from.Data;
            if ((tmp != null)) {
                target.Data = ((global::Microsoft.Robotics.Services.SerialComService.Proxy.Packet)(Microsoft_Robotics_Services_SerialComService_Packet_TO_Microsoft_Robotics_Services_SerialComService_Proxy_Packet(tmp)));
            }
            return target;
        }
    }
}
