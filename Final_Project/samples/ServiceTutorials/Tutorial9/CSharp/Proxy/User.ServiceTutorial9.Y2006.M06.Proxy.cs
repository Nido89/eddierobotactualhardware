//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.ServiceTutorial9.Y2006.M06, Version=0.0.0.0, Culture=neutral, PublicKeyToken" +
    "=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace ServiceTutorial9.Multi.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/multi.user.h" +
        "tml")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/multi.user.h" +
        "tml", ElementName="AddressState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the state for the address service.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Address Service State")]
    public class AddressState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AddressState() {
        }
        
        private string _Address;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the address or a person")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Address")]
        public string Address {
            get {
                return this._Address;
            }
            set {
                this._Address = value;
            }
        }
        
        private string _ZipCode;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the zip code of a person.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Zip Code")]
        public string ZipCode {
            get {
                return this._ZipCode;
            }
            set {
                this._ZipCode = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AddressState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::ServiceTutorial9.Multi.Proxy.AddressState typedTarget = ((global::ServiceTutorial9.Multi.Proxy.AddressState)(target));
            typedTarget._Address = this._Address;
            typedTarget._ZipCode = this._ZipCode;
        }
        
        /// <summary>
        ///Clones AddressState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::ServiceTutorial9.Multi.Proxy.AddressState target0 = new global::ServiceTutorial9.Multi.Proxy.AddressState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AddressState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Address == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Address);
            }
            if ((this._ZipCode == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ZipCode);
            }
        }
        
        /// <summary>
        ///Deserializes AddressState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AddressState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Address = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._ZipCode = reader.ReadString();
            }
            return this;
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::ServiceTutorial9.Multi.Proxy.AddressState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::ServiceTutorial9.Multi.Proxy.AddressState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Replaces the current state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::ServiceTutorial9.Multi.Proxy.AddressState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::ServiceTutorial9.Multi.Proxy.AddressState body) : 
                base(body) {
        }
        
        public Replace(global::ServiceTutorial9.Multi.Proxy.AddressState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddressServiceOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: ServiceTutorial9.Multi.Proxy.Get, global:: ServiceTutorial9.Multi.Proxy.Replace> {
        
        public AddressServiceOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::ServiceTutorial9.Multi.Proxy.AddressState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::ServiceTutorial9.Multi.Proxy.Get operation = new global::ServiceTutorial9.Multi.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::ServiceTutorial9.Multi.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::ServiceTutorial9.Multi.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::ServiceTutorial9.Multi.Proxy.AddressState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::ServiceTutorial9.Multi.Proxy.Get operation = new global::ServiceTutorial9.Multi.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::ServiceTutorial9.Multi.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::ServiceTutorial9.Multi.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::ServiceTutorial9.Multi.Proxy.AddressState body = new global::ServiceTutorial9.Multi.Proxy.AddressState();
            global::ServiceTutorial9.Multi.Proxy.Replace operation = new global::ServiceTutorial9.Multi.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::ServiceTutorial9.Multi.Proxy.Replace operation) {
            global::ServiceTutorial9.Multi.Proxy.AddressState body = new global::ServiceTutorial9.Multi.Proxy.AddressState();
            operation = new global::ServiceTutorial9.Multi.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::ServiceTutorial9.Multi.Proxy.AddressState body) {
            if ((body == null)) {
                body = new global::ServiceTutorial9.Multi.Proxy.AddressState();
            }
            global::ServiceTutorial9.Multi.Proxy.Replace operation = new global::ServiceTutorial9.Multi.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::ServiceTutorial9.Multi.Proxy.AddressState body, out global::ServiceTutorial9.Multi.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::ServiceTutorial9.Multi.Proxy.AddressState();
            }
            operation = new global::ServiceTutorial9.Multi.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("This service is a multi-headed service with one being an implementation of the ge" +
        "neric service provided in Service Tutorial 8.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Service Tutorial 9: Multi-headed Service Implementation")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/multi.user.h" +
            "tml";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/multi.user.h" +
                    "tml", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/multi.user.h" +
                    "tml", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.AddressServiceOperations = new global::ServiceTutorial9.Multi.Proxy.AddressServiceOperations();
            this.GenericServiceOperations = new global::ServiceTutorial8.Proxy.GenericServiceOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.AddressServiceOperations, "http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/multi.user.h" +
                        "tml", "AddressServiceOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.GenericServiceOperations, "http://schemas.microsoft.com/2007/08/servicetutorial8.user.html", "GenericServiceOperations", null));
        }
        
        public global::ServiceTutorial9.Multi.Proxy.AddressServiceOperations AddressServiceOperations;
        
        public global::ServiceTutorial8.Proxy.GenericServiceOperations GenericServiceOperations;
    }
}
namespace ServiceTutorial9.Implementation.Proxy {
    
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("This service implements the generic service provided in Service Tutorial 8.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Service Tutorial 9: Generic Service Implementation")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/implementati" +
            "on.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/implementati" +
                    "on.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/implementati" +
                    "on.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.GenericServiceOperations = new global::ServiceTutorial8.Proxy.GenericServiceOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.GenericServiceOperations, "http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/implementati" +
                        "on.user.html", "GenericServiceOperations", ""));
        }
        
        public global::ServiceTutorial8.Proxy.GenericServiceOperations GenericServiceOperations;
    }
}
namespace ServiceTutorial9.Extension.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/extension.us" +
        "er.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/extension.us" +
        "er.html", ElementName="ExtensionState")]
    [global::System.ComponentModel.DescriptionAttribute("This service state extends the generic service state provided in Service Tutorial" +
        " 8.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Service Tutorial 9: Extension Service State")]
    public class ExtensionState : global::ServiceTutorial8.Proxy.GenericState, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ExtensionState() {
        }
        
        private int _Age;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the age of a person.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Age")]
        public int Age {
            get {
                return this._Age;
            }
            set {
                this._Age = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ExtensionState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::ServiceTutorial9.Extension.Proxy.ExtensionState typedTarget = ((global::ServiceTutorial9.Extension.Proxy.ExtensionState)(target));
            typedTarget._Age = this._Age;
        }
        
        /// <summary>
        ///Clones ExtensionState
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::ServiceTutorial9.Extension.Proxy.ExtensionState target0 = new global::ServiceTutorial9.Extension.Proxy.ExtensionState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ExtensionState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._Age);
        }
        
        /// <summary>
        ///Deserializes ExtensionState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ExtensionState</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Age = reader.ReadInt32();
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/extension.us" +
        "er.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/extension.us" +
        "er.html", ElementName="UpdateAgeRequest")]
    public class UpdateAgeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public UpdateAgeRequest() {
        }
        
        private int _Age;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Updated person age")]
        public int Age {
            get {
                return this._Age;
            }
            set {
                this._Age = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current UpdateAgeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest typedTarget = ((global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest)(target));
            typedTarget._Age = this._Age;
        }
        
        /// <summary>
        ///Clones UpdateAgeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest target0 = new global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current UpdateAgeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Age);
        }
        
        /// <summary>
        ///Deserializes UpdateAgeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized UpdateAgeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Age = reader.ReadInt32();
            return this;
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::ServiceTutorial9.Extension.Proxy.ExtensionState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::ServiceTutorial9.Extension.Proxy.ExtensionState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Replaces the current state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::ServiceTutorial9.Extension.Proxy.ExtensionState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::ServiceTutorial9.Extension.Proxy.ExtensionState body) : 
                base(body) {
        }
        
        public Replace(global::ServiceTutorial9.Extension.Proxy.ExtensionState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Updates the age.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateAge : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public UpdateAge() {
        }
        
        public UpdateAge(global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest body) : 
                base(body) {
        }
        
        public UpdateAge(global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GenericServiceExtensionOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: ServiceTutorial9.Extension.Proxy.Get, global:: ServiceTutorial9.Extension.Proxy.Replace, global:: ServiceTutorial9.Extension.Proxy.UpdateAge> {
        
        public GenericServiceExtensionOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::ServiceTutorial9.Extension.Proxy.ExtensionState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::ServiceTutorial9.Extension.Proxy.Get operation = new global::ServiceTutorial9.Extension.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::ServiceTutorial9.Extension.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::ServiceTutorial9.Extension.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::ServiceTutorial9.Extension.Proxy.ExtensionState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::ServiceTutorial9.Extension.Proxy.Get operation = new global::ServiceTutorial9.Extension.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::ServiceTutorial9.Extension.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::ServiceTutorial9.Extension.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::ServiceTutorial9.Extension.Proxy.ExtensionState body = new global::ServiceTutorial9.Extension.Proxy.ExtensionState();
            global::ServiceTutorial9.Extension.Proxy.Replace operation = new global::ServiceTutorial9.Extension.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::ServiceTutorial9.Extension.Proxy.Replace operation) {
            global::ServiceTutorial9.Extension.Proxy.ExtensionState body = new global::ServiceTutorial9.Extension.Proxy.ExtensionState();
            operation = new global::ServiceTutorial9.Extension.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::ServiceTutorial9.Extension.Proxy.ExtensionState body) {
            if ((body == null)) {
                body = new global::ServiceTutorial9.Extension.Proxy.ExtensionState();
            }
            global::ServiceTutorial9.Extension.Proxy.Replace operation = new global::ServiceTutorial9.Extension.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::ServiceTutorial9.Extension.Proxy.ExtensionState body, out global::ServiceTutorial9.Extension.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::ServiceTutorial9.Extension.Proxy.ExtensionState();
            }
            operation = new global::ServiceTutorial9.Extension.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateAge() {
            global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest body = new global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest();
            global::ServiceTutorial9.Extension.Proxy.UpdateAge operation = new global::ServiceTutorial9.Extension.Proxy.UpdateAge(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateAge(out global::ServiceTutorial9.Extension.Proxy.UpdateAge operation) {
            global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest body = new global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest();
            operation = new global::ServiceTutorial9.Extension.Proxy.UpdateAge(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> UpdateAge(global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest body) {
            if ((body == null)) {
                body = new global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest();
            }
            global::ServiceTutorial9.Extension.Proxy.UpdateAge operation = new global::ServiceTutorial9.Extension.Proxy.UpdateAge(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateAge(global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest body, out global::ServiceTutorial9.Extension.Proxy.UpdateAge operation) {
            if ((body == null)) {
                body = new global::ServiceTutorial9.Extension.Proxy.UpdateAgeRequest();
            }
            operation = new global::ServiceTutorial9.Extension.Proxy.UpdateAge(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("This service extends the generic service provided in Service Tutorial 8.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Service Tutorial 9: Generic Service Extension")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/extension.us" +
            "er.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/extension.us" +
                    "er.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/extension.us" +
                    "er.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.GenericServiceExtensionOperations = new global::ServiceTutorial9.Extension.Proxy.GenericServiceExtensionOperations();
            this.GenericServiceOperations = new global::ServiceTutorial8.Proxy.GenericServiceOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.GenericServiceExtensionOperations, "http://schemas.microsoft.com/2007/08/servicetutorial9/genericservice/extension.us" +
                        "er.html", "GenericServiceExtensionOperations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.GenericServiceOperations, "http://schemas.microsoft.com/2007/08/servicetutorial8.user.html", "GenericServiceOperations", null));
        }
        
        public global::ServiceTutorial9.Extension.Proxy.GenericServiceExtensionOperations GenericServiceExtensionOperations;
        
        public global::ServiceTutorial8.Proxy.GenericServiceOperations GenericServiceOperations;
    }
}
