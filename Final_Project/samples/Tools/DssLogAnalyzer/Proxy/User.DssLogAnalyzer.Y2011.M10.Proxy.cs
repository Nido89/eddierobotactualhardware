//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("DssLogAnalyzer")]
[assembly: global::System.Reflection.AssemblyDescriptionAttribute("DssLogAnalyzer")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.DssLogAnalyzer.Y2011.M10, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7" +
    "f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy {
    
    
    /// <summary>
    ///            DssLogAnalyzer state
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", ElementName="DssLogAnalyzerState")]
    [global::System.ComponentModel.DescriptionAttribute("DssLogAnalyzer state")]
    public class DssLogAnalyzerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DssLogAnalyzerState() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList> _Envelopes;
        
        /// <summary>
        ///            Gets or sets a value indicating whether envelope list
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets a value indicating whether envelope list")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList> Envelopes {
            get {
                return this._Envelopes;
            }
            set {
                this._Envelopes = value;
            }
        }
        
        private string _LogFilesFolder;
        
        /// <summary>
        ///            Gets or sets a value indicating whether root log files folder
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets a value indicating whether root log files folder")]
        public string LogFilesFolder {
            get {
                return this._LogFilesFolder;
            }
            set {
                this._LogFilesFolder = value;
            }
        }
        
        private global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList>> _LogFileEnvelopes;
        
        /// <summary>
        ///            Gets or sets a value indicating whether the list of log files per directory
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets a value indicating whether the list of log files per directory")]
        public global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList>> LogFileEnvelopes {
            get {
                return this._LogFileEnvelopes;
            }
            set {
                this._LogFileEnvelopes = value;
            }
        }
        
        private bool _Headless;
        
        /// <summary>
        ///            Gets or sets a value indicating whether the UI should be displayed
        ///            </summary>
        /// <value><c>true</c> if headless; otherwise, <c>false</c>.
        ///            </value>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets a value indicating whether the UI should be displayed")]
        public bool Headless {
            get {
                return this._Headless;
            }
            set {
                this._Headless = value;
            }
        }
        
        private global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList _CurrentSelectedEnvelopes;
        
        /// <summary>
        ///            Gets or sets currently selected envelope
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets currently selected envelope")]
        public global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList CurrentSelectedEnvelopes {
            get {
                return this._CurrentSelectedEnvelopes;
            }
            set {
                this._CurrentSelectedEnvelopes = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DssLogAnalyzerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerState typedTarget = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerState)(target));
            if ((this._Envelopes != null)) {
                int count = this._Envelopes.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList tmp0 = default(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList);
                    if ((this._Envelopes[index] != null)) {
                        global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList tmp1 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Envelopes[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Envelopes = tmp;
            }
            typedTarget._LogFilesFolder = this._LogFilesFolder;
            if ((this._LogFileEnvelopes != null)) {
                global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList>> tmp2 = new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList>>();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LogFileEnvelopes)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._LogFileEnvelopes = tmp2;
            }
            typedTarget._Headless = this._Headless;
            if ((this._CurrentSelectedEnvelopes != null)) {
                global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList tmp3 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList();
                ((Microsoft.Dss.Core.IDssSerializable)(this._CurrentSelectedEnvelopes)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                typedTarget._CurrentSelectedEnvelopes = tmp3;
            }
        }
        
        /// <summary>
        ///Clones DssLogAnalyzerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerState target0 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DssLogAnalyzerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Envelopes == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Envelopes.Count);
                for (int indexEnvelopes = 0; (indexEnvelopes < this._Envelopes.Count); indexEnvelopes = (indexEnvelopes + 1)) {
                    if ((this._Envelopes[indexEnvelopes] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Envelopes[indexEnvelopes])).Serialize(writer);
                    }
                }
            }
            if ((this._LogFilesFolder == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._LogFilesFolder);
            }
            if ((this._LogFileEnvelopes == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LogFileEnvelopes)).Serialize(writer);
            }
            writer.Write(this._Headless);
            if ((this._CurrentSelectedEnvelopes == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._CurrentSelectedEnvelopes)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes DssLogAnalyzerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DssLogAnalyzerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Envelopes = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Envelopes.Add(default(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList));
                    if ((reader.ReadByte() != 0)) {
                        this._Envelopes[index0] = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                this._LogFilesFolder = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._LogFileEnvelopes = ((global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList>>)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Dss.Core.Utilities.DssDictionary<string, global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList>>())).Deserialize(reader)));
            }
            this._Headless = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._CurrentSelectedEnvelopes = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            A list of envelopes that all originate from the same file
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", ElementName="EnvelopeList")]
    [global::System.ComponentModel.DescriptionAttribute("A list of envelopes that all originate from the same file")]
    public class EnvelopeList : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EnvelopeList() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope> _Envelopes;
        
        /// <summary>
        ///            Gets or sets envelope list
        ///            </summary>
        /// <value>
        ///            The envelopes.
        ///            </value>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets envelope list")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope> Envelopes {
            get {
                return this._Envelopes;
            }
            set {
                this._Envelopes = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current EnvelopeList to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList typedTarget = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList)(target));
            if ((this._Envelopes != null)) {
                int count = this._Envelopes.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope tmp0 = default(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope);
                    if ((this._Envelopes[index] != null)) {
                        global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope tmp1 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Envelopes[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Envelopes = tmp;
            }
        }
        
        /// <summary>
        ///Clones EnvelopeList
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList target0 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeList();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EnvelopeList to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Envelopes == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Envelopes.Count);
                for (int indexEnvelopes = 0; (indexEnvelopes < this._Envelopes.Count); indexEnvelopes = (indexEnvelopes + 1)) {
                    if ((this._Envelopes[indexEnvelopes] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Envelopes[indexEnvelopes])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes EnvelopeList
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EnvelopeList</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Envelopes = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Envelopes.Add(default(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope));
                    if ((reader.ReadByte() != 0)) {
                        this._Envelopes[index0] = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Data Envelope
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", ElementName="Envelope")]
    [global::System.ComponentModel.DescriptionAttribute("Data Envelope")]
    public class Envelope : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Envelope() {
        }
        
        private long _Offset;
        
        /// <summary>
        ///            Gets or sets the frame offset
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets the frame offset")]
        public long Offset {
            get {
                return this._Offset;
            }
            set {
                this._Offset = value;
            }
        }
        
        private string _Filename;
        
        /// <summary>
        ///            Gets or sets envelope filename
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets envelope filename")]
        public string Filename {
            get {
                return this._Filename;
            }
            set {
                this._Filename = value;
            }
        }
        
        private global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader _Header;
        
        /// <summary>
        ///            Gets or sets envelope header
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets envelope header")]
        public global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader Header {
            get {
                return this._Header;
            }
            set {
                this._Header = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Envelope to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope typedTarget = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope)(target));
            typedTarget._Offset = this._Offset;
            typedTarget._Filename = this._Filename;
            if ((this._Header != null)) {
                global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader tmp = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Header)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Header = tmp;
            }
        }
        
        /// <summary>
        ///Clones Envelope
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope target0 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Envelope();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Envelope to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Offset);
            if ((this._Filename == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Filename);
            }
            if ((this._Header == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Header)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes Envelope
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Envelope</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Offset = reader.ReadInt64();
            if ((reader.ReadByte() != 0)) {
                this._Filename = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Header = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Data envelope header
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", ElementName="EnvelopeHeader")]
    [global::System.ComponentModel.DescriptionAttribute("Data envelope header")]
    public class EnvelopeHeader : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EnvelopeHeader() {
        }
        
        private string _Action;
        
        /// <summary>
        ///            Gets or sets which action this header is
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets which action this header is")]
        public string Action {
            get {
                return this._Action;
            }
            set {
                this._Action = value;
            }
        }
        
        private string _From;
        
        /// <summary>
        ///            Gets or sets from URL
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets from URL")]
        public string From {
            get {
                return this._From;
            }
            set {
                this._From = value;
            }
        }
        
        private global::System.Guid _MessageId;
        
        /// <summary>
        ///            Gets or sets Message ID
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets Message ID")]
        public global::System.Guid MessageId {
            get {
                return this._MessageId;
            }
            set {
                this._MessageId = value;
            }
        }
        
        private string _To;
        
        /// <summary>
        ///            Gets or sets To URL
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets To URL")]
        public string To {
            get {
                return this._To;
            }
            set {
                this._To = value;
            }
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Gets or sets the timestamp
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets the timestamp")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current EnvelopeHeader to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader typedTarget = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader)(target));
            typedTarget._Action = this._Action;
            typedTarget._From = this._From;
            typedTarget._MessageId = this._MessageId;
            typedTarget._To = this._To;
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones EnvelopeHeader
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader target0 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopeHeader();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EnvelopeHeader to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Action == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Action);
            }
            if ((this._From == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._From);
            }
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeAsXml(writer, this._MessageId);
            if ((this._To == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._To);
            }
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes EnvelopeHeader
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EnvelopeHeader</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Action = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._From = reader.ReadString();
            }
            this._MessageId = ((global::System.Guid)(global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeXml(reader, typeof(global::System.Guid))));
            if ((reader.ReadByte() != 0)) {
                this._To = reader.ReadString();
            }
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Log files loaded request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", ElementName="LogFilesLoadedRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Log files loaded request")]
    public class LogFilesLoadedRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LogFilesLoadedRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current LogFilesLoadedRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest typedTarget = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest)(target));
        }
        
        /// <summary>
        ///Clones LogFilesLoadedRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest target0 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LogFilesLoadedRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes LogFilesLoadedRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LogFilesLoadedRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            Envelope selected request
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", ElementName="EnvelopesSelectedRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Envelope selected request")]
    public class EnvelopesSelectedRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EnvelopesSelectedRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current EnvelopesSelectedRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest typedTarget = ((global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest)(target));
        }
        
        /// <summary>
        ///Clones EnvelopesSelectedRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest target0 = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EnvelopesSelectedRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes EnvelopesSelectedRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EnvelopesSelectedRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            DssLogAnalyzer get operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("DssLogAnalyzer get operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            DssLogAnalyzer subscribe operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("DssLogAnalyzer subscribe operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Log files loaded update request
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Log files loaded update request")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LogFilesLoaded : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public LogFilesLoaded() {
        }
        
        public LogFilesLoaded(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest body) : 
                base(body) {
        }
        
        public LogFilesLoaded(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Envelope selected update request
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Envelope selected update request")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class EnvelopesSelected : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public EnvelopesSelected() {
        }
        
        public EnvelopesSelected(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest body) : 
                base(body) {
        }
        
        public EnvelopesSelected(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            DssLogAnalyzer main operations port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("DssLogAnalyzer main operations port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DssLogAnalyzerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get, global:: Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe, global:: Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded, global:: Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected> {
        
        public DssLogAnalyzerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> LogFilesLoaded() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest body = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest();
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LogFilesLoaded(out global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded operation) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest body = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest();
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> LogFilesLoaded(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest();
            }
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LogFilesLoaded(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest body, out global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoadedRequest();
            }
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.LogFilesLoaded(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> EnvelopesSelected() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest body = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest();
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice EnvelopesSelected(out global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected operation) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest body = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest();
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> EnvelopesSelected(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest();
            }
            global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice EnvelopesSelected(global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest body, out global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelectedRequest();
            }
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.EnvelopesSelected(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            DssLogAnalyzer service class
    ///            </summary>
    /// <summary>
    ///            Main service class
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("DssLogAnalyzer service (no description provided)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) DssLogAnalyzer")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.DssLogAnalyzerOperations = new global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DssLogAnalyzerOperations, "http://schemas.microsoft.com/robotics/2009/11/dssloganalyzer.user.html", "DssLogAnalyzerOperations", ""));
        }
        
        public global::Microsoft.Robotics.Tools.DssLogAnalyzer.Proxy.DssLogAnalyzerOperations DssLogAnalyzerOperations;
    }
}
namespace Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy {
    
    
    /// <summary>
    ///            RawViewer state
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/01/rawviewer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2010/01/rawviewer.user.html", ElementName="RawViewerState")]
    [global::System.ComponentModel.DescriptionAttribute("RawViewer state")]
    public class RawViewerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RawViewerState() {
        }
        
        /// <summary>
        ///Copies the data member values of the current RawViewerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerState typedTarget = ((global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerState)(target));
        }
        
        /// <summary>
        ///Clones RawViewerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerState target0 = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RawViewerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes RawViewerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RawViewerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            RawViewer get operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("RawViewer get operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            RawViewer subscribe operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("RawViewer subscribe operation")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            RawViewer main operations port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("RawViewer main operations port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class RawViewerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get, global:: Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe> {
        
        public RawViewerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Raw Viewer Plug in Service
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("RawViewer service (shows xml deserialized view of the object)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) RawViewer")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2010/01/rawviewer.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2010/01/rawviewer.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2010/01/rawviewer.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.RawViewerOperations = new global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.RawViewerOperations, "http://schemas.microsoft.com/robotics/2010/01/rawviewer.user.html", "RawViewerOperations", ""));
        }
        
        public global::Microsoft.Robotics.Tools.DssLogAnalyzerPlugins.RawViewer.Proxy.RawViewerOperations RawViewerOperations;
    }
}
