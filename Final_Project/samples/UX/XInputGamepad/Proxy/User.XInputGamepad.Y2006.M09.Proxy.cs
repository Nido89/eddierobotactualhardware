//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.XInputGamepad.Y2006.M09, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f" +
    "9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy {
    
    
    /// <summary>
    ///            Specifies the state of the XInput controller.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="XInputGamepadState")]
    [global::System.ComponentModel.DescriptionAttribute("Specifies the state of the XInput controller.")]
    public class XInputGamepadState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public XInputGamepadState() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Indicates time of the controller's state update.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates time of the controller\'s state update.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller _Controller = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller();
        
        /// <summary>
        ///            Indicates controller state.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates controller state.")]
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller Controller {
            get {
                return this._Controller;
            }
            set {
                this._Controller = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad _DPad = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad();
        
        /// <summary>
        ///            Indicates the state of the directional pad.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the state of the directional pad.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad DPad {
            get {
                return this._DPad;
            }
            set {
                this._DPad = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons _Buttons = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons();
        
        /// <summary>
        ///            Identifies the state of the buttons.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the buttons.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons Buttons {
            get {
                return this._Buttons;
            }
            set {
                this._Buttons = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers _Triggers = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers();
        
        /// <summary>
        ///            Identifies the state of the triggers.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the triggers.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers Triggers {
            get {
                return this._Triggers;
            }
            set {
                this._Triggers = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks _Thumbsticks = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks();
        
        /// <summary>
        ///            Identifies the state of the thumbsticks.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the thumbsticks.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks Thumbsticks {
            get {
                return this._Thumbsticks;
            }
            set {
                this._Thumbsticks = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration _Vibration = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration();
        
        /// <summary>
        ///            Identifies the state of the vibration motors.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the vibration motors.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration Vibration {
            get {
                return this._Vibration;
            }
            set {
                this._Vibration = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current XInputGamepadState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            if ((this._Controller != null)) {
                global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller tmp = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Controller)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Controller = tmp;
            }
            if ((this._DPad != null)) {
                global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad tmp0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad();
                ((Microsoft.Dss.Core.IDssSerializable)(this._DPad)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._DPad = tmp0;
            }
            if ((this._Buttons != null)) {
                global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons tmp1 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._Buttons = tmp1;
            }
            if ((this._Triggers != null)) {
                global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers tmp2 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Triggers)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._Triggers = tmp2;
            }
            if ((this._Thumbsticks != null)) {
                global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks tmp3 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Thumbsticks)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                typedTarget._Thumbsticks = tmp3;
            }
            if ((this._Vibration != null)) {
                global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration tmp4 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Vibration)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                typedTarget._Vibration = tmp4;
            }
        }
        
        /// <summary>
        ///Clones XInputGamepadState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current XInputGamepadState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            if ((this._Controller == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Controller)).Serialize(writer);
            }
            if ((this._DPad == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._DPad)).Serialize(writer);
            }
            if ((this._Buttons == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons)).Serialize(writer);
            }
            if ((this._Triggers == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Triggers)).Serialize(writer);
            }
            if ((this._Thumbsticks == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Thumbsticks)).Serialize(writer);
            }
            if ((this._Vibration == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Vibration)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes XInputGamepadState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized XInputGamepadState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                this._Controller = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._DPad = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Buttons = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Triggers = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Thumbsticks = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Vibration = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            This class represents a controller.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="Controller")]
    [global::System.ComponentModel.DescriptionAttribute("This class represents a controller.")]
    public class Controller : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Controller() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Indicates the time of the controller change.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the controller change.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PlayerIndex _PlayerIndex;
        
        /// <summary>
        ///            Identifies the player index.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the player index.")]
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PlayerIndex PlayerIndex {
            get {
                return this._PlayerIndex;
            }
            set {
                this._PlayerIndex = value;
            }
        }
        
        private bool _IsConnected;
        
        /// <summary>
        ///            Indicates whether a controller is connected.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether a controller is connected.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool IsConnected {
            get {
                return this._IsConnected;
            }
            set {
                this._IsConnected = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Controller to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._PlayerIndex = this._PlayerIndex;
            typedTarget._IsConnected = this._IsConnected;
        }
        
        /// <summary>
        ///Clones Controller
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Controller to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            writer.Write(((int)(this._PlayerIndex)));
            writer.Write(this._IsConnected);
        }
        
        /// <summary>
        ///Deserializes Controller
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Controller</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._PlayerIndex = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PlayerIndex)(reader.ReadInt32()));
            this._IsConnected = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the state of the directional pad.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="DPad")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the directional pad.")]
    public class DPad : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DPad() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time of the directional pad input.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time of the directional pad input.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private bool _Left;
        
        /// <summary>
        ///            Indicates if the directional pad is pressed left.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if the directional pad is pressed left.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Left {
            get {
                return this._Left;
            }
            set {
                this._Left = value;
            }
        }
        
        private bool _Down;
        
        /// <summary>
        ///            Indicates if the directional pad is pressed down.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if the directional pad is pressed down.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Down {
            get {
                return this._Down;
            }
            set {
                this._Down = value;
            }
        }
        
        private bool _Right;
        
        /// <summary>
        ///            Indicates if the directional pad is pressed right.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if the directional pad is pressed right.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Right {
            get {
                return this._Right;
            }
            set {
                this._Right = value;
            }
        }
        
        private bool _Up;
        
        /// <summary>
        ///            Indicates if the directional pad is pressed up.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if the directional pad is pressed up.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Up {
            get {
                return this._Up;
            }
            set {
                this._Up = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DPad to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._Left = this._Left;
            typedTarget._Down = this._Down;
            typedTarget._Right = this._Right;
            typedTarget._Up = this._Up;
        }
        
        /// <summary>
        ///Clones DPad
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DPad to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            writer.Write(this._Left);
            writer.Write(this._Down);
            writer.Write(this._Right);
            writer.Write(this._Up);
        }
        
        /// <summary>
        ///Deserializes DPad
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DPad</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._Left = reader.ReadBoolean();
            this._Down = reader.ReadBoolean();
            this._Right = reader.ReadBoolean();
            this._Up = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the state of the controller buttons.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="Buttons")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the controller buttons.")]
    [global::System.ComponentModel.BrowsableAttribute(false)]
    public class Buttons : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Buttons() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time of the button input.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time of the button input.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private bool _A;
        
        /// <summary>
        ///            Identifies whether the A button was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the A button was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool A {
            get {
                return this._A;
            }
            set {
                this._A = value;
            }
        }
        
        private bool _B;
        
        /// <summary>
        ///            Identifies whether the B button was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the B button was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool B {
            get {
                return this._B;
            }
            set {
                this._B = value;
            }
        }
        
        private bool _X;
        
        /// <summary>
        ///            Identifies whether the X button was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the X button was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        private bool _Y;
        
        /// <summary>
        ///            Identifies whether the Y button was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the Y button was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private bool _Back;
        
        /// <summary>
        ///            Identifies whether the Back button was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the Back button was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Back {
            get {
                return this._Back;
            }
            set {
                this._Back = value;
            }
        }
        
        private bool _Start;
        
        /// <summary>
        ///            Identifies whether the Start button was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the Start button was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool Start {
            get {
                return this._Start;
            }
            set {
                this._Start = value;
            }
        }
        
        private bool _LeftStick;
        
        /// <summary>
        ///            Identifies whether the left thumbstick was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the left thumbstick was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool LeftStick {
            get {
                return this._LeftStick;
            }
            set {
                this._LeftStick = value;
            }
        }
        
        private bool _RightStick;
        
        /// <summary>
        ///            Identifies whether the right thumbstick was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the right thumbstick was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool RightStick {
            get {
                return this._RightStick;
            }
            set {
                this._RightStick = value;
            }
        }
        
        private bool _LeftShoulder;
        
        /// <summary>
        ///            Identifies whether the left shoulder (bumper) was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the left shoulder (bumper) was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool LeftShoulder {
            get {
                return this._LeftShoulder;
            }
            set {
                this._LeftShoulder = value;
            }
        }
        
        private bool _RightShoulder;
        
        /// <summary>
        ///            Identifies whether the right shoulder (bumper) was pressed.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether the right shoulder (bumper) was pressed.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public bool RightShoulder {
            get {
                return this._RightShoulder;
            }
            set {
                this._RightShoulder = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Buttons to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._A = this._A;
            typedTarget._B = this._B;
            typedTarget._X = this._X;
            typedTarget._Y = this._Y;
            typedTarget._Back = this._Back;
            typedTarget._Start = this._Start;
            typedTarget._LeftStick = this._LeftStick;
            typedTarget._RightStick = this._RightStick;
            typedTarget._LeftShoulder = this._LeftShoulder;
            typedTarget._RightShoulder = this._RightShoulder;
        }
        
        /// <summary>
        ///Clones Buttons
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Buttons to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            writer.Write(this._A);
            writer.Write(this._B);
            writer.Write(this._X);
            writer.Write(this._Y);
            writer.Write(this._Back);
            writer.Write(this._Start);
            writer.Write(this._LeftStick);
            writer.Write(this._RightStick);
            writer.Write(this._LeftShoulder);
            writer.Write(this._RightShoulder);
        }
        
        /// <summary>
        ///Deserializes Buttons
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Buttons</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._A = reader.ReadBoolean();
            this._B = reader.ReadBoolean();
            this._X = reader.ReadBoolean();
            this._Y = reader.ReadBoolean();
            this._Back = reader.ReadBoolean();
            this._Start = reader.ReadBoolean();
            this._LeftStick = reader.ReadBoolean();
            this._RightStick = reader.ReadBoolean();
            this._LeftShoulder = reader.ReadBoolean();
            this._RightShoulder = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the state of the controller's triggers.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="Triggers")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the state of the controller\'s triggers.")]
    [global::System.ComponentModel.BrowsableAttribute(false)]
    public class Triggers : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Triggers() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time of the trigger input.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time of the trigger input.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private float _Left;
        
        /// <summary>
        ///            Identifies the left trigger value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the left trigger value.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public float Left {
            get {
                return this._Left;
            }
            set {
                this._Left = value;
            }
        }
        
        private float _Right;
        
        /// <summary>
        ///            Identifies the right trigger value.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the right trigger value.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public float Right {
            get {
                return this._Right;
            }
            set {
                this._Right = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Triggers to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._Left = this._Left;
            typedTarget._Right = this._Right;
        }
        
        /// <summary>
        ///Clones Triggers
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Triggers to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            writer.Write(this._Left);
            writer.Write(this._Right);
        }
        
        /// <summary>
        ///Deserializes Triggers
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Triggers</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._Left = reader.ReadSingle();
            this._Right = reader.ReadSingle();
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the thumbsticks state.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="Thumbsticks")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the thumbsticks state.")]
    [global::System.ComponentModel.BrowsableAttribute(false)]
    public class Thumbsticks : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Thumbsticks() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time of the thumbstick input.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time of the thumbstick input.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private float _LeftX;
        
        /// <summary>
        ///            Identifies the X value of left thumbstick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the X value of left thumbstick.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public float LeftX {
            get {
                return this._LeftX;
            }
            set {
                this._LeftX = value;
            }
        }
        
        private float _LeftY;
        
        /// <summary>
        ///            Identifies the Y value of left thumbstick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Y value of left thumbstick.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public float LeftY {
            get {
                return this._LeftY;
            }
            set {
                this._LeftY = value;
            }
        }
        
        private float _RightX;
        
        /// <summary>
        ///            Identifies the X value of right thumbstick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the X value of right thumbstick.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public float RightX {
            get {
                return this._RightX;
            }
            set {
                this._RightX = value;
            }
        }
        
        private float _RightY;
        
        /// <summary>
        ///            Identifies the Y value of right thumbstick.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the Y value of right thumbstick.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public float RightY {
            get {
                return this._RightY;
            }
            set {
                this._RightY = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Thumbsticks to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._LeftX = this._LeftX;
            typedTarget._LeftY = this._LeftY;
            typedTarget._RightX = this._RightX;
            typedTarget._RightY = this._RightY;
        }
        
        /// <summary>
        ///Clones Thumbsticks
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Thumbsticks to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            writer.Write(this._LeftX);
            writer.Write(this._LeftY);
            writer.Write(this._RightX);
            writer.Write(this._RightY);
        }
        
        /// <summary>
        ///Deserializes Thumbsticks
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Thumbsticks</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._LeftX = reader.ReadSingle();
            this._LeftY = reader.ReadSingle();
            this._RightX = reader.ReadSingle();
            this._RightY = reader.ReadSingle();
            return this;
        }
    }
    
    /// <summary>
    ///            Identifies the vibration motors' state.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="Vibration")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the vibration motors\' state.")]
    [global::System.ComponentModel.BrowsableAttribute(false)]
    public class Vibration : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Vibration() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        /// <summary>
        ///            Identifies the time of the vibration motors change.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time of the vibration motors change.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        private float _Left;
        
        /// <summary>
        ///            Identifies the value of the left vibration motor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the value of the left vibration motor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public float Left {
            get {
                return this._Left;
            }
            set {
                this._Left = value;
            }
        }
        
        private float _Right;
        
        /// <summary>
        ///            Identifies the value of the right vibration motor.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the value of the right vibration motor.")]
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public float Right {
            get {
                return this._Right;
            }
            set {
                this._Right = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Vibration to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration)(target));
            typedTarget._TimeStamp = this._TimeStamp;
            typedTarget._Left = this._Left;
            typedTarget._Right = this._Right;
        }
        
        /// <summary>
        ///Clones Vibration
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Vibration to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
            writer.Write(this._Left);
            writer.Write(this._Right);
        }
        
        /// <summary>
        ///Deserializes Vibration
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Vibration</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._Left = reader.ReadSingle();
            this._Right = reader.ReadSingle();
            return this;
        }
    }
    
    /// <summary>
    ///            A request to cause the service to update the state of the controllers.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="PollRequest")]
    [global::System.ComponentModel.DescriptionAttribute("A request to cause the service to update the state of the controllers.")]
    public class PollRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PollRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current PollRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest)(target));
        }
        
        /// <summary>
        ///Clones PollRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PollRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes PollRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PollRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            A request to return information about the current controllers.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="QueryControllersRequest")]
    [global::System.ComponentModel.DescriptionAttribute("A request to return information about the current controllers.")]
    public class QueryControllersRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public QueryControllersRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current QueryControllersRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest)(target));
        }
        
        /// <summary>
        ///Clones QueryControllersRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current QueryControllersRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes QueryControllersRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized QueryControllersRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            The response that contains information about the current controllers.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="QueryControllersResponse")]
    [global::System.ComponentModel.DescriptionAttribute("The response that contains information about the current controllers.")]
    public class QueryControllersResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public QueryControllersResponse() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps> _Controllers = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps>();
        
        /// <summary>
        ///            A list of capabilities for each controller.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("A list of capabilities for each controller.")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps> Controllers {
            get {
                return this._Controllers;
            }
            set {
                this._Controllers = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current QueryControllersResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersResponse)(target));
            if ((this._Controllers != null)) {
                int count = this._Controllers.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps tmp0 = default(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps);
                    if ((this._Controllers[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps tmp1 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Controllers[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Controllers = tmp;
            }
        }
        
        /// <summary>
        ///Clones QueryControllersResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersResponse target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current QueryControllersResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Controllers == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Controllers.Count);
                for (int indexControllers = 0; (indexControllers < this._Controllers.Count); indexControllers = (indexControllers + 1)) {
                    if ((this._Controllers[indexControllers] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Controllers[indexControllers])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes QueryControllersResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized QueryControllersResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Controllers = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Controllers.Add(default(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps));
                    if ((reader.ReadByte() != 0)) {
                        this._Controllers[index0] = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Represents the capabilities of a controller.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="ControllerCaps")]
    [global::System.ComponentModel.DescriptionAttribute("Represents the capabilities of a controller.")]
    public class ControllerCaps : global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ControllerCaps() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerType _ControllerType;
        
        /// <summary>
        ///            Type type of the controller.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Type type of the controller.")]
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerType ControllerType {
            get {
                return this._ControllerType;
            }
            set {
                this._ControllerType = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ControllerCaps to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps typedTarget = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps)(target));
            typedTarget._ControllerType = this._ControllerType;
        }
        
        /// <summary>
        ///Clones ControllerCaps
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps target0 = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerCaps();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ControllerCaps to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(((int)(this._ControllerType)));
        }
        
        /// <summary>
        ///Deserializes ControllerCaps
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ControllerCaps</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._ControllerType = ((global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerType)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            A subscribe operation requests the service to send notifications to another service.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("A subscribe operation requests the service to send notifications to another servi" +
        "ce.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Gets the current state of the controller.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the controller.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Sets the current state of the game controller.
    ///            This raises an event when a subscription is initially established.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sets the current state of the game controller. This raises an event when a subscr" +
        "iption is initially established.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Polls the controller to update the current state.\n If the state has changed, then appropriate notifications are sent.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Polls the controller to update the current state.\\n If the state has changed, the" +
        "n appropriate notifications are sent.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Poll : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Poll() {
        }
        
        public Poll(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest body) : 
                base(body) {
        }
        
        public Poll(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates when the directional pad position changes.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates when the directional pad position changes.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DPadChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public DPadChanged() {
        }
        
        public DPadChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad body) : 
                base(body) {
        }
        
        public DPadChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates when one or more buttons are pressed or released on the controller.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates when one or more buttons are pressed or released on the controller.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ButtonsChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ButtonsChanged() {
        }
        
        public ButtonsChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons body) : 
                base(body) {
        }
        
        public ButtonsChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates when a trigger's value when it is pressed.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates when a trigger\'s value when it is pressed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class TriggersChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public TriggersChanged() {
        }
        
        public TriggersChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers body) : 
                base(body) {
        }
        
        public TriggersChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Indicates when a thumbstick position changes.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ThumbsticksChange")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates when a thumbstick position changes.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ThumbsticksChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ThumbsticksChanged() {
        }
        
        public ThumbsticksChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks body) : 
                base(body) {
        }
        
        public ThumbsticksChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Send this message to change which controller this service instance is using.
    ///            This event is raised when the controller is changed or when the controller is connected or disconnected
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Send this message to change which controller this service instance is using. This" +
        " event is raised when the controller is changed or when the controller is connec" +
        "ted or disconnected")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ControllerChanged : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ControllerChanged() {
        }
        
        public ControllerChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller body) : 
                base(body) {
        }
        
        public ControllerChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Sets the amount of vibration in the left and right rumble motors.
    ///            The left motor is the low-frequency rumble motor.
    ///            The right motor is the high-frequency rumble motor.
    ///            This notification is raised when the vibration settings are changed.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SetVibrationMotor")]
    [global::System.ComponentModel.DescriptionAttribute("Sets the amount of vibration in the left and right rumble motors. The left motor " +
        "is the low-frequency rumble motor. The right motor is the high-frequency rumble " +
        "motor. This notification is raised when the vibration settings are changed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetVibration : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetVibration() {
        }
        
        public SetVibration(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration body) : 
                base(body) {
        }
        
        public SetVibration(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Gets the list of attached controllers.
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) QueryControllers")]
    [global::System.ComponentModel.DescriptionAttribute("Gets the list of attached controllers.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class QueryControllers : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersResponse, global:: W3C.Soap.Fault>> {
        
        public QueryControllers() {
        }
        
        public QueryControllers(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest body) : 
                base(body) {
        }
        
        public QueryControllers(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            The operations supported by this service.
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("The operations supported by this service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class XInputGamepadOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration, global:: Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers> {
        
        public XInputGamepadOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Poll() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Poll(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Poll(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Poll(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.PollRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Poll(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DPadChanged() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DPadChanged(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DPadChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DPadChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPad();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.DPadChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ButtonsChanged() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonsChanged(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ButtonsChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonsChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Buttons();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ButtonsChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> TriggersChanged() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TriggersChanged(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> TriggersChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice TriggersChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Triggers();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.TriggersChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ThumbsticksChanged() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ThumbsticksChanged(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ThumbsticksChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ThumbsticksChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Thumbsticks();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ThumbsticksChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ControllerChanged() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ControllerChanged(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ControllerChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ControllerChanged(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Controller();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.ControllerChanged(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetVibration() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetVibration(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetVibration(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetVibration(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.Vibration();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.SetVibration(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersResponse, global:: W3C.Soap.Fault> QueryControllers() {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest();
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryControllers(out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers operation) {
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersResponse, global:: W3C.Soap.Fault> QueryControllers(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest();
            }
            global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice QueryControllers(global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest body, out global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllersRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.QueryControllers(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Identifies the player index.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="PlayerIndex")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the player index.")]
    [global::System.ComponentModel.BrowsableAttribute(false)]
    public enum PlayerIndex : int {
        
        /// <summary>
        ///            Player index (1)
        ///            </summary>
        One = 0,
        
        /// <summary>
        ///            Player index (2)
        ///            </summary>
        Two = 1,
        
        /// <summary>
        ///            Player index (3)
        ///            </summary>
        Three = 2,
        
        /// <summary>
        ///            Player index (4)
        ///            </summary>
        Four = 3,
        
        /// <summary>
        ///            Player index (not specified)
        ///            </summary>
        Any = 255,
    }
    
    /// <summary>
    ///            Identifies the controller type.
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", ElementName="ControllerType")]
    [global::System.ComponentModel.DescriptionAttribute("Identifies the controller type.")]
    [global::System.ComponentModel.BrowsableAttribute(false)]
    public enum ControllerType : int {
        
        /// <summary>
        ///            Controller type is not specified
        ///            </summary>
        NotSelected = 0,
        
        /// <summary>
        ///            Controller is a gamepad
        ///            </summary>
        GamePad = 1,
        
        /// <summary>
        ///            Controller is a steering wheel
        ///            </summary>
        Wheel = 2,
        
        /// <summary>
        ///            Controller is a joystick
        ///            </summary>
        ArcadeStick = 3,
        
        /// <summary>
        ///            Controller is a flight control stick
        ///            </summary>
        FlightStick = 4,
        
        /// <summary>
        ///            Controller is a dance pad
        ///            </summary>
        DancePad = 5,
    }
    
    /// <summary>
    ///            Provides access to an Xbox 360 controller such as a gamepad.
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to an Xbox 360 controller such as a gamepad.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) XInput Controller")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.XInputGamepadOperations = new global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.XInputGamepadOperations, "http://schemas.microsoft.com/robotics/2006/09/xinputgamepad.user.html", "XInputGamepadOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.XInputGamepad.Proxy.XInputGamepadOperations XInputGamepadOperations;
    }
}
