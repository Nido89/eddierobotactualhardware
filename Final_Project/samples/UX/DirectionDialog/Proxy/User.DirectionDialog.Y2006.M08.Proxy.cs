//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.DirectionDialog.Y2006.M08, Version=0.0.0.0, Culture=neutral, PublicKeyToken=" +
    "7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy {
    
    
    /// <summary>
    ///            DirectionDialogState
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html", ElementName="DirectionDialogState")]
    [global::System.ComponentModel.DescriptionAttribute("DirectionDialogState")]
    public class DirectionDialogState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DirectionDialogState() {
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button> _Buttons = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button>();
        
        /// <summary>
        ///            Buttons - List of buttons on the Form
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Buttons - List of buttons on the Form")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button> Buttons {
            get {
                return this._Buttons;
            }
            set {
                this._Buttons = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DirectionDialogState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState typedTarget = ((global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState)(target));
            if ((this._Buttons != null)) {
                int count = this._Buttons.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button tmp0 = default(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button);
                    if ((this._Buttons[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button tmp1 = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Buttons = tmp;
            }
        }
        
        /// <summary>
        ///Clones DirectionDialogState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState target0 = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DirectionDialogState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Buttons == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Buttons.Count);
                for (int indexButtons = 0; (indexButtons < this._Buttons.Count); indexButtons = (indexButtons + 1)) {
                    if ((this._Buttons[indexButtons] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons[indexButtons])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes DirectionDialogState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DirectionDialogState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Buttons = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._Buttons.Add(default(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button));
                    if ((reader.ReadByte() != 0)) {
                        this._Buttons[index0] = ((global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Button info for messages
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html", ElementName="Button")]
    [global::System.ComponentModel.DescriptionAttribute("Button info for messages")]
    public class Button : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Button() {
        }
        
        public Button(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection direction) {
            this._Direction = direction;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The Button Name
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Button Name")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection _Direction;
        
        /// <summary>
        ///            The Button Direction
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Button Direction")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection Direction {
            get {
                return this._Direction;
            }
            set {
                this._Direction = value;
            }
        }
        
        private bool _Pressed;
        
        /// <summary>
        ///            Pressed - Set to true if the button is pressed
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Pressed - Set to true if the button is pressed")]
        public bool Pressed {
            get {
                return this._Pressed;
            }
            set {
                this._Pressed = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Button to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button typedTarget = ((global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button)(target));
            typedTarget._Name = this._Name;
            typedTarget._Direction = this._Direction;
            typedTarget._Pressed = this._Pressed;
        }
        
        /// <summary>
        ///Clones Button
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button target0 = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Button();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Button to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._Direction)));
            writer.Write(this._Pressed);
        }
        
        /// <summary>
        ///Deserializes Button
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Button</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._Direction = ((global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection)(reader.ReadInt32()));
            this._Pressed = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Notification message type for Button Press
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html", ElementName="ButtonPressRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Notification message type for Button Press")]
    public class ButtonPressRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ButtonPressRequest() {
        }
        
        public ButtonPressRequest(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection direction) {
            this._Direction = direction;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The Button Name
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Button Name")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection _Direction;
        
        /// <summary>
        ///            The Button Direction
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Button Direction")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection Direction {
            get {
                return this._Direction;
            }
            set {
                this._Direction = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ButtonPressRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest)(target));
            typedTarget._Name = this._Name;
            typedTarget._Direction = this._Direction;
        }
        
        /// <summary>
        ///Clones ButtonPressRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest target0 = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ButtonPressRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._Direction)));
        }
        
        /// <summary>
        ///Deserializes ButtonPressRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ButtonPressRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._Direction = ((global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Notification message type for Button Release
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html", ElementName="ButtonReleaseRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Notification message type for Button Release")]
    public class ButtonReleaseRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ButtonReleaseRequest() {
        }
        
        public ButtonReleaseRequest(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection direction) {
            this._Direction = direction;
        }
        
        private string _Name;
        
        /// <summary>
        ///            The Button Name
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Button Name")]
        public string Name {
            get {
                return this._Name;
            }
            set {
                this._Name = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection _Direction;
        
        /// <summary>
        ///            The Button Direction
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The Button Direction")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection Direction {
            get {
                return this._Direction;
            }
            set {
                this._Direction = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ButtonReleaseRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest)(target));
            typedTarget._Name = this._Name;
            typedTarget._Direction = this._Direction;
        }
        
        /// <summary>
        ///Clones ButtonReleaseRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest target0 = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ButtonReleaseRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Name == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Name);
            }
            writer.Write(((int)(this._Direction)));
        }
        
        /// <summary>
        ///Deserializes ButtonReleaseRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ButtonReleaseRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Name = reader.ReadString();
            }
            this._Direction = ((global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection)(reader.ReadInt32()));
            return this;
        }
    }
    
    /// <summary>
    ///            Get - Gets the state
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Get")]
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the dialog as a list of the buttons on the dialog and t" +
        "heir current pressed states.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace - Replaces the state
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) DialogStateChange")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates when the dialog state changes.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Replace<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ButtonPress - Message sent when a button is pressed
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ButtonPress")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates when a button in the dialog is pressed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ButtonPress : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ButtonPress() {
        }
        
        public ButtonPress(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest body) : 
                base(body) {
        }
        
        public ButtonPress(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ButtonRleases - Message sent when a button is released
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ButtonRelease")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates when a button in the dialog is released.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ButtonRelease : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ButtonRelease() {
        }
        
        public ButtonRelease(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest body) : 
                base(body) {
        }
        
        public ButtonRelease(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe - Request message for subscriptions
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribe - Request message for subscriptions")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Main Operations Port for the service
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Main Operations Port for the service")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DirectionDialogOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace, global:: Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress, global:: Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease, global:: Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe> {
        
        public DirectionDialogOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState();
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState();
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState();
            }
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState body, out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogState();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ButtonPress(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection direction) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest(direction);
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonPress(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection direction, out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress operation) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest(direction);
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ButtonPress(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest();
            }
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonPress(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest body, out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPressRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonPress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ButtonRelease(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection direction) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest(direction);
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonRelease(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonDirection direction, out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease operation) {
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest(direction);
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ButtonRelease(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest();
            }
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonRelease(global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest body, out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonReleaseRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.ButtonRelease(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Button Directions
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html", ElementName="ButtonDirection")]
    [global::System.ComponentModel.DescriptionAttribute("Button Directions")]
    public enum ButtonDirection : int {
        
        /// <summary>
        ///            Stop
        ///            </summary>
        Stop = 0,
        
        /// <summary>
        ///            Forwards
        ///            </summary>
        Forwards = 1,
        
        /// <summary>
        ///            Backwards
        ///            </summary>
        Backwards = 2,
        
        /// <summary>
        ///            Left
        ///            </summary>
        Left = 3,
        
        /// <summary>
        ///            Right
        ///            </summary>
        Right = 4,
    }
    
    /// <summary>
    ///            Direction Dialog service - Provides four direction arrows (plus Stop) for controlling a robot
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Displays a Windows dialog with 5 buttons on it for direction control.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Direction Dialog")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.DirectionDialogOperations = new global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DirectionDialogOperations, "http://schemas.microsoft.com/robotics/2006/08/directiondialog.user.html", "DirectionDialogOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.DirectionDialog.Proxy.DirectionDialogOperations DirectionDialogOperations;
    }
}
