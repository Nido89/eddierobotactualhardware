//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::System.Reflection.AssemblyTitleAttribute("DSS Explorer Service")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.Explorer.Y2006.M06, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f90740" +
    "33fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Explorer.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/07/explorer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/07/explorer.user.html", ElementName="State")]
    public class State : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public State() {
        }
        
        private global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState _DriveState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The last known state of the drive.")]
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState DriveState {
            get {
                return this._DriveState;
            }
            set {
                this._DriveState = value;
            }
        }
        
        private int _Countdown;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the countdown to the next state change.")]
        public int Countdown {
            get {
                return this._Countdown;
            }
            set {
                this._Countdown = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Explorer.Proxy.LogicalState _LogicalState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the logical state of the explorer.")]
        public global::Microsoft.Robotics.Services.Explorer.Proxy.LogicalState LogicalState {
            get {
                return this._LogicalState;
            }
            set {
                this._LogicalState = value;
            }
        }
        
        private int _NewHeading;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the new heading set for the drive.")]
        public int NewHeading {
            get {
                return this._NewHeading;
            }
            set {
                this._NewHeading = value;
            }
        }
        
        private int _Velocity;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the velocity set for the drive.")]
        public int Velocity {
            get {
                return this._Velocity;
            }
            set {
                this._Velocity = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State _South;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the last known laser reading in the opposite direction.")]
        public global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State South {
            get {
                return this._South;
            }
            set {
                this._South = value;
            }
        }
        
        private bool _Mapped;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies whether a full sweep scan of the environment has been completed.")]
        public bool Mapped {
            get {
                return this._Mapped;
            }
            set {
                this._Mapped = value;
            }
        }
        
        private global::System.DateTime _MostRecentLaser;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the time of the most recent laser reading.")]
        public global::System.DateTime MostRecentLaser {
            get {
                return this._MostRecentLaser;
            }
            set {
                this._MostRecentLaser = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current State to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Explorer.Proxy.State typedTarget = ((global::Microsoft.Robotics.Services.Explorer.Proxy.State)(target));
            if ((this._DriveState != null)) {
                global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState tmp = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._DriveState = tmp;
            }
            typedTarget._Countdown = this._Countdown;
            typedTarget._LogicalState = this._LogicalState;
            typedTarget._NewHeading = this._NewHeading;
            typedTarget._Velocity = this._Velocity;
            if ((this._South != null)) {
                global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State tmp0 = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
                ((Microsoft.Dss.Core.IDssSerializable)(this._South)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._South = tmp0;
            }
            typedTarget._Mapped = this._Mapped;
            typedTarget._MostRecentLaser = this._MostRecentLaser;
        }
        
        /// <summary>
        ///Clones State
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Explorer.Proxy.State target0 = new global::Microsoft.Robotics.Services.Explorer.Proxy.State();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current State to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._DriveState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveState)).Serialize(writer);
            }
            writer.Write(this._Countdown);
            writer.Write(((int)(this._LogicalState)));
            writer.Write(this._NewHeading);
            writer.Write(this._Velocity);
            if ((this._South == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._South)).Serialize(writer);
            }
            writer.Write(this._Mapped);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._MostRecentLaser, writer);
        }
        
        /// <summary>
        ///Deserializes State
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized State</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._DriveState = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState())).Deserialize(reader)));
            }
            this._Countdown = reader.ReadInt32();
            this._LogicalState = ((global::Microsoft.Robotics.Services.Explorer.Proxy.LogicalState)(reader.ReadInt32()));
            this._NewHeading = reader.ReadInt32();
            this._Velocity = reader.ReadInt32();
            if ((reader.ReadByte() != 0)) {
                this._South = ((global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State())).Deserialize(reader)));
            }
            this._Mapped = reader.ReadBoolean();
            this._MostRecentLaser = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/07/explorer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/07/explorer.user.html", ElementName="WatchDogUpdateRequest")]
    public class WatchDogUpdateRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public WatchDogUpdateRequest() {
        }
        
        private global::System.DateTime _TimeStamp;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time of the reading (in ms).")]
        public global::System.DateTime TimeStamp {
            get {
                return this._TimeStamp;
            }
            set {
                this._TimeStamp = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current WatchDogUpdateRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest typedTarget = ((global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest)(target));
            typedTarget._TimeStamp = this._TimeStamp;
        }
        
        /// <summary>
        ///Clones WatchDogUpdateRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest target0 = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current WatchDogUpdateRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._TimeStamp, writer);
        }
        
        /// <summary>
        ///Deserializes WatchDogUpdateRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized WatchDogUpdateRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._TimeStamp = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Gets the current state of the Explorer service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Explorer.Proxy.State, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Explorer.Proxy.State, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Provides an update to a bumper\'s state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class BumperUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public BumperUpdate() {
        }
        
        public BumperUpdate(global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor body) : 
                base(body) {
        }
        
        public BumperUpdate(global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Provides an update to the set of bumpers\' state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class BumpersUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public BumpersUpdate() {
        }
        
        public BumpersUpdate(global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState body) : 
                base(body) {
        }
        
        public BumpersUpdate(global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Provides an update to the drive\'s state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DriveUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public DriveUpdate() {
        }
        
        public DriveUpdate(global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState body) : 
                base(body) {
        }
        
        public DriveUpdate(global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Provides an update to the laser range finder state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LaserRangeFinderUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public LaserRangeFinderUpdate() {
        }
        
        public LaserRangeFinderUpdate(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body) : 
                base(body) {
        }
        
        public LaserRangeFinderUpdate(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Provides an update for the laser range finder reset request.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LaserRangeFinderResetUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public LaserRangeFinderResetUpdate() {
        }
        
        public LaserRangeFinderResetUpdate(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body) : 
                base(body) {
        }
        
        public LaserRangeFinderResetUpdate(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.ComponentModel.DescriptionAttribute("Provides an update to the watchdog state.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class WatchDogUpdate : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public WatchDogUpdate() {
        }
        
        public WatchDogUpdate(global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest body) : 
                base(body) {
        }
        
        public WatchDogUpdate(global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ExplorerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Explorer.Proxy.Get, global:: Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate, global:: Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate, global:: Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate, global:: Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate, global:: Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate, global:: Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate> {
        
        public ExplorerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Explorer.Proxy.State, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Explorer.Proxy.Get operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Explorer.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Explorer.Proxy.State, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Explorer.Proxy.Get operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Explorer.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> BumperUpdate(int hardwareIdentifier, string name) {
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor body = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor(hardwareIdentifier, name);
            global::Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice BumperUpdate(int hardwareIdentifier, string name, out global::Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate operation) {
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor body = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor(hardwareIdentifier, name);
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> BumperUpdate(global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor();
            }
            global::Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice BumperUpdate(global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor body, out global::Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensor();
            }
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.BumperUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> BumpersUpdate() {
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState body = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState();
            global::Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice BumpersUpdate(out global::Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate operation) {
            global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState body = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState();
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> BumpersUpdate(global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState();
            }
            global::Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice BumpersUpdate(global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState body, out global::Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.ContactSensor.Proxy.ContactSensorArrayState();
            }
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.BumpersUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DriveUpdate() {
            global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState body = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState();
            global::Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DriveUpdate(out global::Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate operation) {
            global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState body = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState();
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> DriveUpdate(global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState();
            }
            global::Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DriveUpdate(global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState body, out global::Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState();
            }
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.DriveUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> LaserRangeFinderUpdate() {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LaserRangeFinderUpdate(out global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate operation) {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> LaserRangeFinderUpdate(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            }
            global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LaserRangeFinderUpdate(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State body, out global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.State();
            }
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> LaserRangeFinderResetUpdate() {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LaserRangeFinderResetUpdate(out global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate operation) {
            global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> LaserRangeFinderResetUpdate(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            }
            global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LaserRangeFinderResetUpdate(global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType body, out global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sensors.SickLRF.Proxy.ResetType();
            }
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.LaserRangeFinderResetUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> WatchDogUpdate() {
            global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest body = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest();
            global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice WatchDogUpdate(out global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate operation) {
            global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest body = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest();
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> WatchDogUpdate(global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest();
            }
            global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice WatchDogUpdate(global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest body, out global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdateRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Explorer.Proxy.WatchDogUpdate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/07/explorer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/07/explorer.user.html", ElementName="LogicalState")]
    public enum LogicalState : int {
        
        Unknown = 0,
        
        RandomTurn = 1,
        
        AdjustHeading = 2,
        
        FreeForwards = 3,
        
        MapSurroundings = 4,
        
        MapNorth = 5,
        
        MapSouth = 6,
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access simple exploration behavior for a robot using a differential driv" +
        "e, bumpers, and a laser range finder.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Explorer")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/07/explorer.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/07/explorer.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/07/explorer.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ExplorerOperations = new global::Microsoft.Robotics.Services.Explorer.Proxy.ExplorerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ExplorerOperations, "http://schemas.microsoft.com/robotics/2006/07/explorer.user.html", "ExplorerOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Explorer.Proxy.ExplorerOperations ExplorerOperations;
    }
}
