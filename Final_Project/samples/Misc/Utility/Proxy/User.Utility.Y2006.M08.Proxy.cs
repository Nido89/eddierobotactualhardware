//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.Utility.Y2006.M08, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f907403" +
    "3fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceTypeRegistrationRequiredAttribute()]

namespace Microsoft.Robotics.Services.Sample.ByteArray.Proxy {
    
    
    /// <summary>
    ///            A Byte Array
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/bytearray.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/bytearray.user.html", ElementName="ByteArray")]
    [global::System.ComponentModel.DescriptionAttribute("The byte array")]
    public class ByteArray : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ByteArray() {
        }
        
        public ByteArray(byte[] data) {
            this._Data = data;
        }
        
        private byte[] _Data;
        
        /// <summary>
        ///            The Byte Array Data
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the set of data in the byte array.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public byte[] Data {
            get {
                return this._Data;
            }
            set {
                this._Data = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ByteArray to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray typedTarget = ((global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray)(target));
            if ((this._Data != null)) {
                int count = this._Data.Length;
                byte[] tmp = new byte[count];
                global::System.Buffer.BlockCopy(this._Data, 0, tmp, 0, global::System.Buffer.ByteLength(this._Data));
                typedTarget._Data = tmp;
            }
        }
        
        /// <summary>
        ///Clones ByteArray
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray target0 = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ByteArray to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Data == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Data.Length);
                writer.Write(this._Data);
            }
        }
        
        /// <summary>
        ///Deserializes ByteArray
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ByteArray</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Data = reader.ReadBytes(count0);
            }
            return this;
        }
    }
    
    /// <summary>
    ///            A Byte List
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/bytearray.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/07/bytearray.user.html", ElementName="ByteList")]
    [global::System.ComponentModel.DescriptionAttribute("The byte list")]
    public class ByteList : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ByteList() {
        }
        
        public ByteList(global::System.Collections.Generic.List<byte> data) {
            this._Data = data;
        }
        
        private global::System.Collections.Generic.List<byte> _Data;
        
        /// <summary>
        ///            The Byte List Data
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the set of data in the byte list.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public global::System.Collections.Generic.List<byte> Data {
            get {
                return this._Data;
            }
            set {
                this._Data = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ByteList to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList typedTarget = ((global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList)(target));
            if ((this._Data != null)) {
                int count = this._Data.Count;
                global::System.Collections.Generic.List<byte> tmp = new global::System.Collections.Generic.List<byte>(count);
                tmp.AddRange(this._Data);
                typedTarget._Data = tmp;
            }
        }
        
        /// <summary>
        ///Clones ByteList
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList target0 = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ByteList to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Data == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Data.Count);
                for (int indexData = 0; (indexData < this._Data.Count); indexData = (indexData + 1)) {
                    writer.Write(this._Data[indexData]);
                }
            }
        }
        
        /// <summary>
        ///Deserializes ByteList
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ByteList</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._Data = new global::System.Collections.Generic.List<byte>(count0);
                for (int index = 0; (index < count0); index = (index + 1)) {
                    this._Data.Add(default(byte));
                    this._Data[index] = reader.ReadByte();
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Get a Byte Array
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Get a pre-initialized byte array.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GetArray : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: W3C.Soap.Fault>> {
        
        public GetArray() {
        }
        
        public GetArray(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public GetArray(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Get a Byte Array as a List
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Get a pre-initialized list of bytes.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class GetList : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: W3C.Soap.Fault>> {
        
        public GetList() {
        }
        
        public GetList(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public GetList(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Convert a Byte Array to a List of Bytes
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Convert a byte array to a list of bytes.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ByteArrayToList : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: W3C.Soap.Fault>> {
        
        public ByteArrayToList() {
        }
        
        public ByteArrayToList(global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray body) : 
                base(body) {
        }
        
        public ByteArrayToList(global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Convert a List of Bytes to a Byte Array
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Convert a list of bytes to a byte array.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ByteListToArray : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: W3C.Soap.Fault>> {
        
        public ByteListToArray() {
        }
        
        public ByteListToArray(global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList body) : 
                base(body) {
        }
        
        public ByteListToArray(global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ByteArray Main Operations PortSet
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("ByteArray Main Operations PortSet")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ByteArrayOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray, global:: Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList, global:: Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList, global:: Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray> {
        
        public ByteArrayOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: W3C.Soap.Fault> GetArray() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetArray(out global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: W3C.Soap.Fault> GetArray(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetArray(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetArray(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: W3C.Soap.Fault> GetList() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetList(out global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: W3C.Soap.Fault> GetList(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice GetList(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.GetList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: W3C.Soap.Fault> ByteArrayToList(byte[] data) {
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray body = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray(data);
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ByteArrayToList(byte[] data, out global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList operation) {
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray body = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray(data);
            operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList, global:: W3C.Soap.Fault> ByteArrayToList(global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray();
            }
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ByteArrayToList(global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray body, out global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayToList(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: W3C.Soap.Fault> ByteListToArray(global::System.Collections.Generic.List<byte> data) {
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList body = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList(data);
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ByteListToArray(global::System.Collections.Generic.List<byte> data, out global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray operation) {
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList body = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList(data);
            operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArray, global:: W3C.Soap.Fault> ByteListToArray(global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList();
            }
            global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ByteListToArray(global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList body, out global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteList();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteListToArray(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            ByteArrayService - Creates and converts byte arrays
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides conversion between byte arrays and byte lists.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Byte Array")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/07/bytearray.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/bytearray.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/07/bytearray.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ByteArrayOperations = new global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ByteArrayOperations, "http://schemas.microsoft.com/robotics/2007/07/bytearray.user.html", "ByteArrayOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.ByteArray.Proxy.ByteArrayOperations ByteArrayOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy {
    
    
    /// <summary>
    ///            The DateTime State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", ElementName="DateTimeState")]
    [global::System.ComponentModel.DescriptionAttribute("The DateTime State")]
    public class DateTimeState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DateTimeState() {
        }
        
        private global::System.DateTime _Now;
        
        /// <summary>
        ///            Now - Current Date/Time
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current date and time on this computer, expressed as the local time" +
            ".")]
        public global::System.DateTime Now {
            get {
                return this._Now;
            }
            set {
                this._Now = value;
            }
        }
        
        private global::System.DateTime _UtcNow;
        
        /// <summary>
        ///            UtcNow - Current Date/Time in UTC
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current date and time on this computer, expressed as the Universal " +
            "Time Coordinated (UTC).")]
        public global::System.DateTime UtcNow {
            get {
                return this._UtcNow;
            }
            set {
                this._UtcNow = value;
            }
        }
        
        private global::System.DateTime _Today;
        
        /// <summary>
        ///            Today - Today's date
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates today\'s date.")]
        public global::System.DateTime Today {
            get {
                return this._Today;
            }
            set {
                this._Today = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DateTimeState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.DateTimeState typedTarget = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.DateTimeState)(target));
            typedTarget._Now = this._Now;
            typedTarget._UtcNow = this._UtcNow;
            typedTarget._Today = this._Today;
        }
        
        /// <summary>
        ///Clones DateTimeState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.DateTimeState target0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.DateTimeState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DateTimeState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Now, writer);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._UtcNow, writer);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Today, writer);
        }
        
        /// <summary>
        ///Deserializes DateTimeState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DateTimeState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Now = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._UtcNow = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._Today = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            CreateDateTimeRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", ElementName="CreateDateTimeRequest")]
    [global::System.ComponentModel.DescriptionAttribute("CreateDateTimeRequest")]
    public class CreateDateTimeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CreateDateTimeRequest() {
        }
        
        private int _Year;
        
        /// <summary>
        ///            Year
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the year of the date.")]
        public int Year {
            get {
                return this._Year;
            }
            set {
                this._Year = value;
            }
        }
        
        private int _Month;
        
        /// <summary>
        ///            Month
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the month of the date.")]
        public int Month {
            get {
                return this._Month;
            }
            set {
                this._Month = value;
            }
        }
        
        private int _Day;
        
        /// <summary>
        ///            Day
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the day of the month.")]
        public int Day {
            get {
                return this._Day;
            }
            set {
                this._Day = value;
            }
        }
        
        private int _Hour;
        
        /// <summary>
        ///            Hour
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the hour of the date.")]
        public int Hour {
            get {
                return this._Hour;
            }
            set {
                this._Hour = value;
            }
        }
        
        private int _Minute;
        
        /// <summary>
        ///            Minute
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the minute of the date.")]
        public int Minute {
            get {
                return this._Minute;
            }
            set {
                this._Minute = value;
            }
        }
        
        private int _Second;
        
        /// <summary>
        ///            Second
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the second of the date.")]
        public int Second {
            get {
                return this._Second;
            }
            set {
                this._Second = value;
            }
        }
        
        private int _Millisecond;
        
        /// <summary>
        ///            Millisecond
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the millisecond of the date.")]
        public int Millisecond {
            get {
                return this._Millisecond;
            }
            set {
                this._Millisecond = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CreateDateTimeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest)(target));
            typedTarget._Year = this._Year;
            typedTarget._Month = this._Month;
            typedTarget._Day = this._Day;
            typedTarget._Hour = this._Hour;
            typedTarget._Minute = this._Minute;
            typedTarget._Second = this._Second;
            typedTarget._Millisecond = this._Millisecond;
        }
        
        /// <summary>
        ///Clones CreateDateTimeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest target0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CreateDateTimeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Year);
            writer.Write(this._Month);
            writer.Write(this._Day);
            writer.Write(this._Hour);
            writer.Write(this._Minute);
            writer.Write(this._Second);
            writer.Write(this._Millisecond);
        }
        
        /// <summary>
        ///Deserializes CreateDateTimeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CreateDateTimeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Year = reader.ReadInt32();
            this._Month = reader.ReadInt32();
            this._Day = reader.ReadInt32();
            this._Hour = reader.ReadInt32();
            this._Minute = reader.ReadInt32();
            this._Second = reader.ReadInt32();
            this._Millisecond = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            CreateTimeSpanRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", ElementName="CreateTimeSpanRequest")]
    [global::System.ComponentModel.DescriptionAttribute("CreateTimeSpanRequest")]
    public class CreateTimeSpanRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CreateTimeSpanRequest() {
        }
        
        private int _Days;
        
        /// <summary>
        ///            Days
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the number of days of the TimeSpan.")]
        public int Days {
            get {
                return this._Days;
            }
            set {
                this._Days = value;
            }
        }
        
        private int _Hours;
        
        /// <summary>
        ///            Hours
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the number of hours of the Timespan.")]
        public int Hours {
            get {
                return this._Hours;
            }
            set {
                this._Hours = value;
            }
        }
        
        private int _Minutes;
        
        /// <summary>
        ///            Minutes
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the number of minutes of the TimeSpan.")]
        public int Minutes {
            get {
                return this._Minutes;
            }
            set {
                this._Minutes = value;
            }
        }
        
        private int _Seconds;
        
        /// <summary>
        ///            Seconds
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the number of seconds of the TimeSpan.")]
        public int Seconds {
            get {
                return this._Seconds;
            }
            set {
                this._Seconds = value;
            }
        }
        
        private int _Milliseconds;
        
        /// <summary>
        ///            Milliseconds
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the number of milliseconds of the TimeSpan.")]
        public int Milliseconds {
            get {
                return this._Milliseconds;
            }
            set {
                this._Milliseconds = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CreateTimeSpanRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest)(target));
            typedTarget._Days = this._Days;
            typedTarget._Hours = this._Hours;
            typedTarget._Minutes = this._Minutes;
            typedTarget._Seconds = this._Seconds;
            typedTarget._Milliseconds = this._Milliseconds;
        }
        
        /// <summary>
        ///Clones CreateTimeSpanRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest target0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CreateTimeSpanRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Days);
            writer.Write(this._Hours);
            writer.Write(this._Minutes);
            writer.Write(this._Seconds);
            writer.Write(this._Milliseconds);
        }
        
        /// <summary>
        ///Deserializes CreateTimeSpanRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CreateTimeSpanRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Days = reader.ReadInt32();
            this._Hours = reader.ReadInt32();
            this._Minutes = reader.ReadInt32();
            this._Seconds = reader.ReadInt32();
            this._Milliseconds = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            AddTimeSpanToDateTimeRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", ElementName="AddTimeSpanToDateTimeRequest")]
    [global::System.ComponentModel.DescriptionAttribute("AddTimeSpanToDateTimeRequest")]
    public class AddTimeSpanToDateTimeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AddTimeSpanToDateTimeRequest() {
        }
        
        private global::System.DateTime _DateTime;
        
        /// <summary>
        ///            DateTime - The Date/Time to add to
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the DateTime to which to add the TimeSpan.")]
        public global::System.DateTime DateTime {
            get {
                return this._DateTime;
            }
            set {
                this._DateTime = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan _TimeSpan;
        
        /// <summary>
        ///            TimeSpan - The TimeSpan to add
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the TimeSpan that will be added to DateTime.")]
        public global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan TimeSpan {
            get {
                return this._TimeSpan;
            }
            set {
                this._TimeSpan = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AddTimeSpanToDateTimeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest)(target));
            typedTarget._DateTime = this._DateTime;
            if ((this._TimeSpan != null)) {
                global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan tmp = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan();
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpan)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._TimeSpan = tmp;
            }
        }
        
        /// <summary>
        ///Clones AddTimeSpanToDateTimeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest target0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AddTimeSpanToDateTimeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._DateTime, writer);
            if ((this._TimeSpan == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpan)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes AddTimeSpanToDateTimeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AddTimeSpanToDateTimeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._DateTime = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                this._TimeSpan = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            AddTimeSpanToTimeSpanRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", ElementName="AddTimeSpanToTimeSpanRequest")]
    [global::System.ComponentModel.DescriptionAttribute("AddTimeSpanToTimeSpanRequest")]
    public class AddTimeSpanToTimeSpanRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AddTimeSpanToTimeSpanRequest() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan _TimeSpan1;
        
        /// <summary>
        ///            TimeSpan1 - The TimeSpan to add to
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the TimeSpan to which to add the TimeSpan.")]
        public global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan TimeSpan1 {
            get {
                return this._TimeSpan1;
            }
            set {
                this._TimeSpan1 = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan _TimeSpan2;
        
        /// <summary>
        ///            TimeSpan2 - The TimeSpan to add
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the TimeSpan that will be added to TimeSpan.")]
        public global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan TimeSpan2 {
            get {
                return this._TimeSpan2;
            }
            set {
                this._TimeSpan2 = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AddTimeSpanToTimeSpanRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest)(target));
            if ((this._TimeSpan1 != null)) {
                global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan tmp = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan();
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpan1)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._TimeSpan1 = tmp;
            }
            if ((this._TimeSpan2 != null)) {
                global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan tmp0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan();
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpan2)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._TimeSpan2 = tmp0;
            }
        }
        
        /// <summary>
        ///Clones AddTimeSpanToTimeSpanRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest target0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AddTimeSpanToTimeSpanRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._TimeSpan1 == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpan1)).Serialize(writer);
            }
            if ((this._TimeSpan2 == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpan2)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes AddTimeSpanToTimeSpanRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AddTimeSpanToTimeSpanRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._TimeSpan1 = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._TimeSpan2 = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            SubtractTimeSpanFromTimeSpanRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", ElementName="SubtractTimeSpanFromTimeSpanRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SubtractTimeSpanFromTimeSpanRequest")]
    public class SubtractTimeSpanFromTimeSpanRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SubtractTimeSpanFromTimeSpanRequest() {
        }
        
        private global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan _TimeSpanToSubtractFrom;
        
        /// <summary>
        ///            TimeSpanToSubtractFrom
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the DateTime (the minuend) from which\nto subtract the other DateTime.")]
        public global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan TimeSpanToSubtractFrom {
            get {
                return this._TimeSpanToSubtractFrom;
            }
            set {
                this._TimeSpanToSubtractFrom = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan _TimeSpanToSubtract;
        
        /// <summary>
        ///            TimeSpanToSubtract
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("identifies the DateTime (the subtrahend) which\nwill be subtracted from the other " +
            "DateTime.")]
        public global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan TimeSpanToSubtract {
            get {
                return this._TimeSpanToSubtract;
            }
            set {
                this._TimeSpanToSubtract = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SubtractTimeSpanFromTimeSpanRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest)(target));
            if ((this._TimeSpanToSubtractFrom != null)) {
                global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan tmp = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan();
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpanToSubtractFrom)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._TimeSpanToSubtractFrom = tmp;
            }
            if ((this._TimeSpanToSubtract != null)) {
                global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan tmp0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan();
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpanToSubtract)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._TimeSpanToSubtract = tmp0;
            }
        }
        
        /// <summary>
        ///Clones SubtractTimeSpanFromTimeSpanRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest target0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SubtractTimeSpanFromTimeSpanRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._TimeSpanToSubtractFrom == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpanToSubtractFrom)).Serialize(writer);
            }
            if ((this._TimeSpanToSubtract == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpanToSubtract)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes SubtractTimeSpanFromTimeSpanRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SubtractTimeSpanFromTimeSpanRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._TimeSpanToSubtractFrom = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._TimeSpanToSubtract = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            SubtractTimeSpanFromDateTimeRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", ElementName="SubtractTimeSpanFromDateTimeRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SubtractTimeSpanFromDateTimeRequest")]
    public class SubtractTimeSpanFromDateTimeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SubtractTimeSpanFromDateTimeRequest() {
        }
        
        private global::System.DateTime _DateTime;
        
        /// <summary>
        ///            DateTime - Date/Time to subtract from
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the DateTime from which to subtract the TimeSpan.")]
        public global::System.DateTime DateTime {
            get {
                return this._DateTime;
            }
            set {
                this._DateTime = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan _TimeSpan;
        
        /// <summary>
        ///            TimeSpan - The TimeSpan to subtract
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the TimeSpan that will be subtracted from DateTime.")]
        public global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan TimeSpan {
            get {
                return this._TimeSpan;
            }
            set {
                this._TimeSpan = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SubtractTimeSpanFromDateTimeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest)(target));
            typedTarget._DateTime = this._DateTime;
            if ((this._TimeSpan != null)) {
                global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan tmp = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan();
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpan)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._TimeSpan = tmp;
            }
        }
        
        /// <summary>
        ///Clones SubtractTimeSpanFromDateTimeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest target0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SubtractTimeSpanFromDateTimeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._DateTime, writer);
            if ((this._TimeSpan == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._TimeSpan)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes SubtractTimeSpanFromDateTimeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SubtractTimeSpanFromDateTimeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._DateTime = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            if ((reader.ReadByte() != 0)) {
                this._TimeSpan = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            SubtractDateTimeFromDateTimeRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", ElementName="SubtractDateTimeFromDateTimeRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SubtractDateTimeFromDateTimeRequest")]
    public class SubtractDateTimeFromDateTimeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SubtractDateTimeFromDateTimeRequest() {
        }
        
        private global::System.DateTime _DateTimeToSubtractFrom;
        
        /// <summary>
        ///            DateTimeToSubtractFrom
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the DateTime (the minuend)\nfrom which to subtract the other DateTime.")]
        public global::System.DateTime DateTimeToSubtractFrom {
            get {
                return this._DateTimeToSubtractFrom;
            }
            set {
                this._DateTimeToSubtractFrom = value;
            }
        }
        
        private global::System.DateTime _DateTimeToSubtract;
        
        /// <summary>
        ///            DateTimeToSubtract
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the DateTime (the subtrahend)\nwhich will be subtracted from the other " +
            "DateTime.")]
        public global::System.DateTime DateTimeToSubtract {
            get {
                return this._DateTimeToSubtract;
            }
            set {
                this._DateTimeToSubtract = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SubtractDateTimeFromDateTimeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest)(target));
            typedTarget._DateTimeToSubtractFrom = this._DateTimeToSubtractFrom;
            typedTarget._DateTimeToSubtract = this._DateTimeToSubtract;
        }
        
        /// <summary>
        ///Clones SubtractDateTimeFromDateTimeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest target0 = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SubtractDateTimeFromDateTimeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._DateTimeToSubtractFrom, writer);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._DateTimeToSubtract, writer);
        }
        
        /// <summary>
        ///Deserializes SubtractDateTimeFromDateTimeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SubtractDateTimeFromDateTimeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._DateTimeToSubtractFrom = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            this._DateTimeToSubtract = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Get - Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Returns the state of the Date Time service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.DateTimeState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.DateTimeState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            CreateDateTime - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateDateTime")]
    [global::System.ComponentModel.DescriptionAttribute("Returns a DateTime created from date and time parameters.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateDateTime : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest, global:: Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault>> {
        
        public CreateDateTime() {
        }
        
        public CreateDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest body) : 
                base(body) {
        }
        
        public CreateDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest body, global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            CreateTimeSpan - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CreateTimeSpan")]
    [global::System.ComponentModel.DescriptionAttribute("Returns a TimeSpan created from parameters.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class CreateTimeSpan : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault>> {
        
        public CreateTimeSpan() {
        }
        
        public CreateTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest body) : 
                base(body) {
        }
        
        public CreateTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add TimeSpan To DateTime - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) AddTimeSpanToDateTime")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the result of adding a TimeSpan to a DateTime.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddTimeSpanToDateTime : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest, global:: Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault>> {
        
        public AddTimeSpanToDateTime() {
        }
        
        public AddTimeSpanToDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest body) : 
                base(body) {
        }
        
        public AddTimeSpanToDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest body, global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Add TimeSpan To TimeSpan - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) AddTimeSpanToTimeSpan")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the result of adding a TimeSpan to a TimeSpan.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class AddTimeSpanToTimeSpan : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault>> {
        
        public AddTimeSpanToTimeSpan() {
        }
        
        public AddTimeSpanToTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest body) : 
                base(body) {
        }
        
        public AddTimeSpanToTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subtract TimeSpan From TimeSpan - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SubtractTimeSpanFromTimeSpan")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the result of subtracting a TimeSpan from TimeSpan.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SubtractTimeSpanFromTimeSpan : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault>> {
        
        public SubtractTimeSpanFromTimeSpan() {
        }
        
        public SubtractTimeSpanFromTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest body) : 
                base(body) {
        }
        
        public SubtractTimeSpanFromTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subtract TimeSpan From DateTime - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SubtractTimeSpanFromDateTime")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the result of subtracting a TimeSpan from a DateTime.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SubtractTimeSpanFromDateTime : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest, global:: Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault>> {
        
        public SubtractTimeSpanFromDateTime() {
        }
        
        public SubtractTimeSpanFromDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest body) : 
                base(body) {
        }
        
        public SubtractTimeSpanFromDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest body, global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subtract DateTime From DateTime - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) SubtractDateTimeFromDateTime")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the result of subtracting a DateTime from another DateTime,\nwhich is the " +
        "TimeSpan interval between the DateTimes.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SubtractDateTimeFromDateTime : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault>> {
        
        public SubtractDateTimeFromDateTime() {
        }
        
        public SubtractDateTimeFromDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest body) : 
                base(body) {
        }
        
        public SubtractDateTimeFromDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Vpldatetime Main Operations Port
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Vpldatetime Main Operations Port")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class VplDateTimeHelperOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime, global:: Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan, global:: Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime, global:: Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan, global:: Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan, global:: Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime, global:: Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime> {
        
        public VplDateTimeHelperOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.DateTimeState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.DateTimeState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> CreateDateTime() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest();
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDateTime(out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime operation) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> CreateDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest();
            }
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest body, out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTimeRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> CreateTimeSpan() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest();
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateTimeSpan(out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan operation) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> CreateTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest();
            }
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice CreateTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest body, out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpanRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.CreateTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> AddTimeSpanToDateTime() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest();
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddTimeSpanToDateTime(out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime operation) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> AddTimeSpanToDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest();
            }
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddTimeSpanToDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest body, out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTimeRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> AddTimeSpanToTimeSpan() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest();
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddTimeSpanToTimeSpan(out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan operation) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> AddTimeSpanToTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest();
            }
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice AddTimeSpanToTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest body, out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpanRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.AddTimeSpanToTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> SubtractTimeSpanFromTimeSpan() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest();
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SubtractTimeSpanFromTimeSpan(out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan operation) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> SubtractTimeSpanFromTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest();
            }
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SubtractTimeSpanFromTimeSpan(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest body, out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpanRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromTimeSpan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> SubtractTimeSpanFromDateTime() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest();
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SubtractTimeSpanFromDateTime(out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime operation) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::System.DateTime, global:: W3C.Soap.Fault> SubtractTimeSpanFromDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest();
            }
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SubtractTimeSpanFromDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest body, out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTimeRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractTimeSpanFromDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> SubtractDateTimeFromDateTime() {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest();
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SubtractDateTimeFromDateTime(out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime operation) {
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.DssTimeSpan, global:: W3C.Soap.Fault> SubtractDateTimeFromDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest();
            }
            global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SubtractDateTimeFromDateTime(global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest body, out global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTimeRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.SubtractDateTimeFromDateTime(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Implementation class for Vpldatetime
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides date and time functions (using .Net DateTime and TimeSpan).")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Date Time")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.VplDateTimeHelperOperations = new global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.VplDateTimeHelperOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.VplDateTimeHelperOperations, "http://schemas.microsoft.com/2008/08/vpldatetimehelper.user.html", "VplDateTimeHelperOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.VplDateTimeHelper.Proxy.VplDateTimeHelperOperations VplDateTimeHelperOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Dialog.Proxy {
    
    
    /// <summary>
    ///            AlertRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html", ElementName="AlertRequest")]
    [global::System.ComponentModel.DescriptionAttribute("AlertRequest")]
    public class AlertRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AlertRequest() {
        }
        
        private string _Message;
        
        /// <summary>
        ///            Message - Message to display
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the message text in the dialog.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) AlertText")]
        public string Message {
            get {
                return this._Message;
            }
            set {
                this._Message = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AlertRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest)(target));
            typedTarget._Message = this._Message;
        }
        
        /// <summary>
        ///Clones AlertRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest target0 = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AlertRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Message == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Message);
            }
        }
        
        /// <summary>
        ///Deserializes AlertRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AlertRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Message = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            PromptRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html", ElementName="PromptRequest")]
    [global::System.ComponentModel.DescriptionAttribute("PromptRequest")]
    public class PromptRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PromptRequest() {
        }
        
        private string _Message;
        
        /// <summary>
        ///            Message - Message to display as a prompt
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the prompt text in the dialog.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) PromptText")]
        public string Message {
            get {
                return this._Message;
            }
            set {
                this._Message = value;
            }
        }
        
        private string _DefaultValue;
        
        /// <summary>
        ///            DefaultValue - Initial value in the text field
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the text in the dialog\'s TextBox.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) DefaultValue")]
        public string DefaultValue {
            get {
                return this._DefaultValue;
            }
            set {
                this._DefaultValue = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PromptRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest)(target));
            typedTarget._Message = this._Message;
            typedTarget._DefaultValue = this._DefaultValue;
        }
        
        /// <summary>
        ///Clones PromptRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest target0 = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PromptRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Message == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Message);
            }
            if ((this._DefaultValue == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._DefaultValue);
            }
        }
        
        /// <summary>
        ///Deserializes PromptRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PromptRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Message = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._DefaultValue = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            PromptResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html", ElementName="PromptResponse")]
    [global::System.ComponentModel.DescriptionAttribute("PromptResponse")]
    public class PromptResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PromptResponse() {
        }
        
        private bool _Confirmed;
        
        /// <summary>
        ///            Confirmed - True if OK was pressed, false otherwise
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Returns whether the dialog\'s OK (true) or Cancel (false) button was clicked.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Confirmed")]
        public bool Confirmed {
            get {
                return this._Confirmed;
            }
            set {
                this._Confirmed = value;
            }
        }
        
        private string _TextData;
        
        /// <summary>
        ///            TextData - The text that was entered by the user
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Returns the text in the TextBox when the OK button is clicked, or the default tex" +
            "t if Cancel is clicked.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) TextData")]
        public string TextData {
            get {
                return this._TextData;
            }
            set {
                this._TextData = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PromptResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptResponse)(target));
            typedTarget._Confirmed = this._Confirmed;
            typedTarget._TextData = this._TextData;
        }
        
        /// <summary>
        ///Clones PromptResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptResponse target0 = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PromptResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Confirmed);
            if ((this._TextData == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._TextData);
            }
        }
        
        /// <summary>
        ///Deserializes PromptResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PromptResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Confirmed = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                this._TextData = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ConfirmRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html", ElementName="ConfirmRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ConfirmRequest")]
    public class ConfirmRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ConfirmRequest() {
        }
        
        private string _Message;
        
        /// <summary>
        ///            Message - Message to display
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the text to show in the dialog.")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) ConfirmText")]
        public string Message {
            get {
                return this._Message;
            }
            set {
                this._Message = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ConfirmRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest)(target));
            typedTarget._Message = this._Message;
        }
        
        /// <summary>
        ///Clones ConfirmRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest target0 = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ConfirmRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Message == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Message);
            }
        }
        
        /// <summary>
        ///Deserializes ConfirmRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ConfirmRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Message = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ConfirmResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/dialog.user.html", ElementName="ConfirmResponse")]
    [global::System.ComponentModel.DescriptionAttribute("ConfirmResponse")]
    public class ConfirmResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ConfirmResponse() {
        }
        
        private bool _Confirmed;
        
        /// <summary>
        ///            Confirmed - True if OK was pressed, false otherwise
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Returns true if the OK button was clicked, false if Cancel (or Close) was clicked" +
            ".")]
        [global::System.ComponentModel.DisplayNameAttribute("(User) Confirmed")]
        public bool Confirmed {
            get {
                return this._Confirmed;
            }
            set {
                this._Confirmed = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ConfirmResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmResponse)(target));
            typedTarget._Confirmed = this._Confirmed;
        }
        
        /// <summary>
        ///Clones ConfirmResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmResponse target0 = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ConfirmResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Confirmed);
        }
        
        /// <summary>
        ///Deserializes ConfirmResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ConfirmResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Confirmed = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            Alert - Display an Alert Dialog
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) AlertDialog")]
    [global::System.ComponentModel.DescriptionAttribute("Displays a simple text message dialog to the user.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Alert : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Alert() {
        }
        
        public Alert(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest body) : 
                base(body) {
        }
        
        public Alert(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Prompt - Display a Prompt Dialog
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) PromptDialog")]
    [global::System.ComponentModel.DescriptionAttribute("Displays a simple dialog that prompts the user to enter a text string.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Prompt : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptResponse, global:: W3C.Soap.Fault>> {
        
        public Prompt() {
        }
        
        public Prompt(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest body) : 
                base(body) {
        }
        
        public Prompt(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Confirm - Display a Confirm Dialog
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ConfirmDialog")]
    [global::System.ComponentModel.DescriptionAttribute("Displays a simple dialog that asks the user a question and provides OK and Cancel" +
        " buttons.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Confirm : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmResponse, global:: W3C.Soap.Fault>> {
        
        public Confirm() {
        }
        
        public Confirm(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest body) : 
                base(body) {
        }
        
        public Confirm(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Simple Dialog Operations PortSet
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Simple Dialog Operations PortSet")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DialogOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert, global:: Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt, global:: Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm> {
        
        public DialogOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Alert() {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest();
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Alert(out global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert operation) {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Alert(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Alert(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest body, out global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.AlertRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Alert(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptResponse, global:: W3C.Soap.Fault> Prompt() {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest();
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Prompt(out global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt operation) {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptResponse, global:: W3C.Soap.Fault> Prompt(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Prompt(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest body, out global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.PromptRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Prompt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmResponse, global:: W3C.Soap.Fault> Confirm() {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest();
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Confirm(out global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm operation) {
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmResponse, global:: W3C.Soap.Fault> Confirm(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Confirm(global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest body, out global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.ConfirmRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.Confirm(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            DialogService - Provides Alert, Confirm and Prompt dialogs
    ///            </summary>
    /// <remarks>Provides a way to display Alert, Confirm or Prompt dialogs using Windows Forms</remarks>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides display of simple message dialogs.\n(These dialogs automatically timeout " +
        "after 60 seconds.)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Simple Dialog")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/08/dialog.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/dialog.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/dialog.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.DialogOperations = new global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.DialogOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DialogOperations, "http://schemas.microsoft.com/robotics/2006/08/dialog.user.html", "DialogOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Dialog.Proxy.DialogOperations DialogOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.FlexDialog.Proxy {
    
    
    /// <summary>
    ///            Flexible Dialog State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="FlexDialogState")]
    [global::System.ComponentModel.DescriptionAttribute("The state of the Flexible Dialog service.")]
    public class FlexDialogState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FlexDialogState() {
        }
        
        private string _Title;
        
        /// <summary>
        ///            Title - Appears in the dialog's title bar
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the title of the dialog box.")]
        public string Title {
            get {
                return this._Title;
            }
            set {
                this._Title = value;
            }
        }
        
        private bool _Visible;
        
        /// <summary>
        ///            Visible - Determines if dialog is visible or not
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies if the dialog is visible.")]
        public bool Visible {
            get {
                return this._Visible;
            }
            set {
                this._Visible = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl> _Controls = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl>();
        
        /// <summary>
        ///            Controls - List of controls on the dialog
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The set of controls included in the dialog (displayed vertically).")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl> Controls {
            get {
                return this._Controls;
            }
            set {
                this._Controls = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton> _Buttons = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton>();
        
        /// <summary>
        ///            Buttons - List of buttons on the dialog
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The collection of buttons included in the dialog (displayed horizontally).")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton> Buttons {
            get {
                return this._Buttons;
            }
            set {
                this._Buttons = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FlexDialogState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogState typedTarget = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogState)(target));
            typedTarget._Title = this._Title;
            typedTarget._Visible = this._Visible;
            if ((this._Controls != null)) {
                int count = this._Controls.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl> tmp = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl tmp0 = default(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl);
                    if ((this._Controls[index] != null)) {
                        global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl tmp1 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Controls[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                        tmp0 = tmp1;
                    }
                    tmp.Add(tmp0);
                }
                typedTarget._Controls = tmp;
            }
            if ((this._Buttons != null)) {
                int count0 = this._Buttons.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton> tmp2 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton tmp3 = default(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton);
                    if ((this._Buttons[index0] != null)) {
                        global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton tmp4 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons[index0])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                        tmp3 = tmp4;
                    }
                    tmp2.Add(tmp3);
                }
                typedTarget._Buttons = tmp2;
            }
        }
        
        /// <summary>
        ///Clones FlexDialogState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogState target0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FlexDialogState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Title == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Title);
            }
            writer.Write(this._Visible);
            if ((this._Controls == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Controls.Count);
                for (int indexControls = 0; (indexControls < this._Controls.Count); indexControls = (indexControls + 1)) {
                    if ((this._Controls[indexControls] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Controls[indexControls])).Serialize(writer);
                    }
                }
            }
            if ((this._Buttons == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Buttons.Count);
                for (int indexButtons = 0; (indexButtons < this._Buttons.Count); indexButtons = (indexButtons + 1)) {
                    if ((this._Buttons[indexButtons] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._Buttons[indexButtons])).Serialize(writer);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes FlexDialogState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FlexDialogState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Title = reader.ReadString();
            }
            this._Visible = reader.ReadBoolean();
            if ((reader.ReadByte() != 0)) {
                int count1 = reader.ReadInt32();
                this._Controls = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl>(count1);
                for (int index1 = 0; (index1 < count1); index1 = (index1 + 1)) {
                    this._Controls.Add(default(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl));
                    if ((reader.ReadByte() != 0)) {
                        this._Controls[index1] = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl())).Deserialize(reader)));
                    }
                }
            }
            if ((reader.ReadByte() != 0)) {
                int count2 = reader.ReadInt32();
                this._Buttons = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton>(count2);
                for (int index2 = 0; (index2 < count2); index2 = (index2 + 1)) {
                    this._Buttons.Add(default(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton));
                    if ((reader.ReadByte() != 0)) {
                        this._Buttons[index2] = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton())).Deserialize(reader)));
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            FlexControl - Defines a control on the dialog
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="FlexControl")]
    [global::System.ComponentModel.DescriptionAttribute("Defines a control in the dialog (vertically).")]
    public class FlexControl : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FlexControl() {
        }
        
        public FlexControl(string id, global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType controlType, string text, string value) {
            this._Id = id;
            this._ControlType = controlType;
            this._Text = text;
            this._Value = value;
        }
        
        private string _Id;
        
        /// <summary>
        ///            Id - Name of the control (must be unique)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the unique identifier for the control.\n(This parameter takes a string v" +
            "alue.)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Id {
            get {
                return this._Id;
            }
            set {
                this._Id = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType _ControlType;
        
        /// <summary>
        ///            ControlType - Type of this UI control
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the type of UI control.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType ControlType {
            get {
                return this._ControlType;
            }
            set {
                this._ControlType = value;
            }
        }
        
        private string _Text;
        
        /// <summary>
        ///            Text - Text that appears in the control
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the text that appears for the UI control.\nFor ComboBoxes, this property" +
            " specifies the text that appears in the list\n(separated by |).\nThis property is " +
            "ignored for TextBox, multiline TextBox, and Separator controls.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=3)]
        public string Text {
            get {
                return this._Text;
            }
            set {
                this._Text = value;
            }
        }
        
        private string _Value;
        
        /// <summary>
        ///            Value - Data entered into the control (Textbox and MultiLineTextbox)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the current value of the control.\nThis property must be true or false f" +
            "or a Checkbox or RadioButton.\nThis property is ignored for Label, Button, or Sep" +
            "arator controls.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=4)]
        public string Value {
            get {
                return this._Value;
            }
            set {
                this._Value = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FlexControl to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl typedTarget = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl)(target));
            typedTarget._Id = this._Id;
            typedTarget._ControlType = this._ControlType;
            typedTarget._Text = this._Text;
            typedTarget._Value = this._Value;
        }
        
        /// <summary>
        ///Clones FlexControl
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl target0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FlexControl to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Id == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Id);
            }
            writer.Write(((int)(this._ControlType)));
            if ((this._Text == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Text);
            }
            if ((this._Value == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Value);
            }
        }
        
        /// <summary>
        ///Deserializes FlexControl
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FlexControl</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Id = reader.ReadString();
            }
            this._ControlType = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType)(reader.ReadInt32()));
            if ((reader.ReadByte() != 0)) {
                this._Text = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Value = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            FlexButton - Special case of FlexControl
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="FlexButton")]
    [global::System.ComponentModel.DescriptionAttribute("Defines a button that will appear horizontally in the dialog.")]
    public class FlexButton : global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FlexButton() {
        }
        
        /// <summary>
        ///Copies the data member values of the current FlexButton to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton typedTarget = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton)(target));
        }
        
        /// <summary>
        ///Clones FlexButton
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton target0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FlexButton to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes FlexButton
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FlexButton</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            ButtonPressRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="ButtonPressRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ButtonPressRequest")]
    public class ButtonPressRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ButtonPressRequest() {
        }
        
        public ButtonPressRequest(string id, bool pressed) {
            this._Id = id;
            this._Pressed = pressed;
        }
        
        private string _Id;
        
        /// <summary>
        ///            Id - Button id
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The unique identifier for the control.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Id {
            get {
                return this._Id;
            }
            set {
                this._Id = value;
            }
        }
        
        private bool _Pressed;
        
        /// <summary>
        ///            Pressed - True if pressed
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Returns if the button pressed.\nReturns true if pressed, otherwise false.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public bool Pressed {
            get {
                return this._Pressed;
            }
            set {
                this._Pressed = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ButtonPressRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest)(target));
            typedTarget._Id = this._Id;
            typedTarget._Pressed = this._Pressed;
        }
        
        /// <summary>
        ///Clones ButtonPressRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest target0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ButtonPressRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Id == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Id);
            }
            writer.Write(this._Pressed);
        }
        
        /// <summary>
        ///Deserializes ButtonPressRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ButtonPressRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Id = reader.ReadString();
            }
            this._Pressed = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            ShowRequest - Sets the Visible property
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="ShowRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ShowRequest - Sets the Visible property")]
    public class ShowRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ShowRequest() {
        }
        
        public ShowRequest(bool show) {
            this._Show = show;
        }
        
        private bool _Show;
        
        /// <summary>
        ///            Show - True means visible, False means invisible
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether the dialog is currently visible.\nReturns true if visible, other" +
            "wise false.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public bool Show {
            get {
                return this._Show;
            }
            set {
                this._Show = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ShowRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest)(target));
            typedTarget._Show = this._Show;
        }
        
        /// <summary>
        ///Clones ShowRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest target0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ShowRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Show);
        }
        
        /// <summary>
        ///Deserializes ShowRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ShowRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Show = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            SetTitleRequest - Info for setting Title
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="SetTitleRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SetTitleRequest - Info for setting Title")]
    public class SetTitleRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetTitleRequest() {
        }
        
        public SetTitleRequest(string title) {
            this._Title = title;
        }
        
        private string _Title;
        
        /// <summary>
        ///            Title - The title for the dialog's title bar
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the title of the dialog.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Title {
            get {
                return this._Title;
            }
            set {
                this._Title = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetTitleRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest)(target));
            typedTarget._Title = this._Title;
        }
        
        /// <summary>
        ///Clones SetTitleRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest target0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetTitleRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Title == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Title);
            }
        }
        
        /// <summary>
        ///Deserializes SetTitleRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetTitleRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Title = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            HandOffMessage - Used to transfer control to another dialog
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="HandOffMessage")]
    [global::System.ComponentModel.DescriptionAttribute("HandOffMessage - Used to transfer control to another dialog")]
    public class HandOffMessage : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public HandOffMessage() {
        }
        
        public HandOffMessage(string title, string service) {
            this._Title = title;
            this._Service = service;
        }
        
        private string _Title;
        
        /// <summary>
        ///            Title - Title of the dialog to transfer to
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Title - Title of the dialog to transfer to")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Title {
            get {
                return this._Title;
            }
            set {
                this._Title = value;
            }
        }
        
        private string _Service;
        
        /// <summary>
        ///            Service - Service to transfer to
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Service - Service to transfer to")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public string Service {
            get {
                return this._Service;
            }
            set {
                this._Service = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current HandOffMessage to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage typedTarget = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage)(target));
            typedTarget._Title = this._Title;
            typedTarget._Service = this._Service;
        }
        
        /// <summary>
        ///Clones HandOffMessage
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage target0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current HandOffMessage to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Title == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Title);
            }
            if ((this._Service == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Service);
            }
        }
        
        /// <summary>
        ///Deserializes HandOffMessage
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized HandOffMessage</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Title = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Service = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            HttpNotification
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="HttpNotification")]
    [global::System.ComponentModel.DescriptionAttribute("HttpNotification")]
    public class HttpNotification : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public HttpNotification() {
        }
        
        private string _Operation;
        
        /// <summary>
        ///            Operation 
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Operation")]
        public string Operation {
            get {
                return this._Operation;
            }
            set {
                this._Operation = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl _Control;
        
        /// <summary>
        ///            Control - The control the notification is from
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Control - The control the notification is from")]
        public global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl Control {
            get {
                return this._Control;
            }
            set {
                this._Control = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton _Button;
        
        /// <summary>
        ///            Button - The button the notification is from
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Button - The button the notification is from")]
        public global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton Button {
            get {
                return this._Button;
            }
            set {
                this._Button = value;
            }
        }
        
        private string _Title;
        
        /// <summary>
        ///            Title - Dialog title
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Title - Dialog title")]
        public string Title {
            get {
                return this._Title;
            }
            set {
                this._Title = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest _Show;
        
        /// <summary>
        ///            Show - True if dialog is visible
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Show - True if dialog is visible")]
        public global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest Show {
            get {
                return this._Show;
            }
            set {
                this._Show = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest _ButtonPress;
        
        /// <summary>
        ///            ButtonPress
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("ButtonPress")]
        public global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest ButtonPress {
            get {
                return this._ButtonPress;
            }
            set {
                this._ButtonPress = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest _SetTitle;
        
        /// <summary>
        ///            SetTitle
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("SetTitle")]
        public global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest SetTitle {
            get {
                return this._SetTitle;
            }
            set {
                this._SetTitle = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage _HandOff;
        
        /// <summary>
        ///            HandOff
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("HandOff")]
        public global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage HandOff {
            get {
                return this._HandOff;
            }
            set {
                this._HandOff = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current HttpNotification to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HttpNotification typedTarget = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HttpNotification)(target));
            typedTarget._Operation = this._Operation;
            if ((this._Control != null)) {
                global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl tmp = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Control)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._Control = tmp;
            }
            if ((this._Button != null)) {
                global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton tmp0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Button)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._Button = tmp0;
            }
            typedTarget._Title = this._Title;
            if ((this._Show != null)) {
                global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest tmp1 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Show)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._Show = tmp1;
            }
            if ((this._ButtonPress != null)) {
                global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest tmp2 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest();
                ((Microsoft.Dss.Core.IDssSerializable)(this._ButtonPress)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._ButtonPress = tmp2;
            }
            if ((this._SetTitle != null)) {
                global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest tmp3 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest();
                ((Microsoft.Dss.Core.IDssSerializable)(this._SetTitle)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                typedTarget._SetTitle = tmp3;
            }
            if ((this._HandOff != null)) {
                global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage tmp4 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage();
                ((Microsoft.Dss.Core.IDssSerializable)(this._HandOff)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                typedTarget._HandOff = tmp4;
            }
        }
        
        /// <summary>
        ///Clones HttpNotification
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HttpNotification target0 = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HttpNotification();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current HttpNotification to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Operation == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Operation);
            }
            if ((this._Control == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Control)).Serialize(writer);
            }
            if ((this._Button == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Button)).Serialize(writer);
            }
            if ((this._Title == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Title);
            }
            if ((this._Show == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Show)).Serialize(writer);
            }
            if ((this._ButtonPress == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._ButtonPress)).Serialize(writer);
            }
            if ((this._SetTitle == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._SetTitle)).Serialize(writer);
            }
            if ((this._HandOff == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._HandOff)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes HttpNotification
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized HttpNotification</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Operation = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Control = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Button = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Title = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Show = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._ButtonPress = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._SetTitle = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._HandOff = ((global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Get - Return the state of the dialog
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Returns the current state of the dialog.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogState>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogState> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe - Request nofitications
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribe - Request nofitications")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            InsertButton - Add a button to the dialog
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Adds a button (or indicates a button has been added)\nto the set of horizontal but" +
        "tons in the dialog.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class InsertButton : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public InsertButton() {
        }
        
        public InsertButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body) : 
                base(body) {
        }
        
        public InsertButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            DeleteButton - Remove a button from the dialog
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Removes a button (or indicates a button has been removed)\nfrom the set of horizon" +
        "tal buttons in the dialog.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DeleteButton : global::Microsoft.Dss.ServiceModel.Dssp.Delete<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType>> {
        
        public DeleteButton() {
        }
        
        public DeleteButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body) : 
                base(body) {
        }
        
        public DeleteButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            UpdateButton - Change a button on the dialog
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Updates (or indicates an update to)\nthe state of a horizontal button in the dialo" +
        "g.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateButton : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateButton() {
        }
        
        public UpdateButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body) : 
                base(body) {
        }
        
        public UpdateButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            InsertControl - Add a control to the dialog
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Adds a control (or indicates a control has been added)\nto the dialog.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class InsertControl : global::Microsoft.Dss.ServiceModel.Dssp.Insert<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public InsertControl() {
        }
        
        public InsertControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body) : 
                base(body) {
        }
        
        public InsertControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            DeleteControl - Remove a control from the dialog
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Removes a control (or indicates a control has been removed)\nfrom the dialog.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class DeleteControl : global::Microsoft.Dss.ServiceModel.Dssp.Delete<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType>> {
        
        public DeleteControl() {
        }
        
        public DeleteControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body) : 
                base(body) {
        }
        
        public DeleteControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            UpdateControl - Change a control or its contents
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Updates a control or its contents (or indicates a control has been updated)\nin th" +
        "e dialog.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UpdateControl : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public UpdateControl() {
        }
        
        public UpdateControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body) : 
                base(body) {
        }
        
        public UpdateControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ButtonPress - Notification of button presses
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Indicates that a button has been pressed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ButtonPress : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public ButtonPress() {
        }
        
        public ButtonPress(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest body) : 
                base(body) {
        }
        
        public ButtonPress(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Show - Display or Hide the dialog
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Displays or hides the dialog, or indicates\nthat the dialog is now visible or hidd" +
        "en.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Show : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public Show() {
        }
        
        public Show(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest body) : 
                base(body) {
        }
        
        public Show(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            SetTitle - Set dialog Title
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sets the title for the dialog, or indicates\nthat the title has been changed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetTitle : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType>> {
        
        public SetTitle() {
        }
        
        public SetTitle(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest body) : 
                base(body) {
        }
        
        public SetTitle(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            HandOff - Switch to another dialog (only applies to web browser)
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Switches focus to another dialog, or \nindicates that focus has been changed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class HandOff : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage, global:: Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage>> {
        
        public HandOff() {
        }
        
        public HandOff(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage body) : 
                base(body) {
        }
        
        public HandOff(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage body, global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Flexible Dialog Operations PortSet
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Flexible Dialog Operations PortSet")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class FlexDialogOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get, global:: Microsoft.Dss.Core.DsspHttp.HttpGet, global:: Microsoft.Dss.Core.DsspHttp.HttpPost, global:: Microsoft.Dss.Core.DsspHttp.HttpQuery, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle, global:: Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff> {
        
        public FlexDialogOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogState> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogState> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet() {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpGet operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpGet(global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpGet operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpGetRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpGet(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost() {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpPost operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpPost(global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpPost operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpPostRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpPost(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery() {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.Core.DsspHttp.HttpResponseType, global::W3C.Soap.Fault> HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HttpQuery(global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType body, out global::Microsoft.Dss.Core.DsspHttp.HttpQuery operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.Core.DsspHttp.HttpQueryRequestType();
            }
            operation = new global::Microsoft.Dss.Core.DsspHttp.HttpQuery(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> InsertButton() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertButton(out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> InsertButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> DeleteButton() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteButton(out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> DeleteButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateButton() {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateButton(out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateButton(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexButton();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateButton(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> InsertControl(string id, global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType controlType, string text, string value) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl(id, controlType, text, value);
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertControl(string id, global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType controlType, string text, string value, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl(id, controlType, text, value);
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> InsertControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice InsertControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.InsertControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> DeleteControl(string id, global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType controlType, string text, string value) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl(id, controlType, text, value);
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteControl(string id, global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType controlType, string text, string value, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl(id, controlType, text, value);
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDeleteResponseType> DeleteControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DeleteControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.DeleteControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateControl(string id, global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType controlType, string text, string value) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl(id, controlType, text, value);
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateControl(string id, global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControlType controlType, string text, string value, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl(id, controlType, text, value);
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> UpdateControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice UpdateControl(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexControl();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.UpdateControl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> ButtonPress(string id, bool pressed) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest(id, pressed);
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonPress(string id, bool pressed, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest(id, pressed);
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> ButtonPress(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ButtonPress(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPressRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ButtonPress(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> Show(bool show) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest(show);
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Show(bool show, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest(show);
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> Show(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Show(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.ShowRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.Show(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetTitle(string title) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest(title);
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetTitle(string title, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest(title);
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType> SetTitle(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetTitle(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitleRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.SetTitle(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage> HandOff(string title, string service) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage(title, service);
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HandOff(string title, string service, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff operation) {
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage(title, service);
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage> HandOff(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage();
            }
            global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice HandOff(global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage body, out global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOffMessage();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.HandOff(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            FlexControlType - Types of UI controls
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", ElementName="FlexControlType")]
    [global::System.ComponentModel.DescriptionAttribute("FlexControlType - Types of UI controls")]
    public enum FlexControlType : int {
        
        /// <summary>
        ///            Label - Readonly text
        ///            </summary>
        Label = 0,
        
        /// <summary>
        ///            TextBox - Input text
        ///            </summary>
        TextBox = 1,
        
        /// <summary>
        ///            MultiLineTextBox - Textbox that can contain line breaks
        ///            </summary>
        MultiLineTextBox = 2,
        
        /// <summary>
        ///            Button - Pushbutton
        ///            </summary>
        Button = 3,
        
        /// <summary>
        ///            CheckBox - True or False
        ///            </summary>
        CheckBox = 4,
        
        /// <summary>
        ///            RadioButton - One of many
        ///            </summary>
        RadioButton = 5,
        
        /// <summary>
        ///            ComboBox - Combination TextBox and Dropdown List
        ///            </summary>
        ComboBox = 6,
        
        /// <summary>
        ///            Seperator - Dividing line
        ///            </summary>
        Seperator = 7,
    }
    
    /// <summary>
    ///            FlexibleDialogService - Dynamic dialog box
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to a configurable dialog box.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Flexible Dialog")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.FlexDialogOperations = new global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.FlexDialogOperations, "http://schemas.microsoft.com/robotics/2007/08/flexdialog.user.html", "FlexDialogOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.FlexDialog.Proxy.FlexDialogOperations FlexDialogOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Log.Proxy {
    
    
    /// <summary>
    ///            LogInfoRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/log.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/log.user.html", ElementName="LogInfoRequest")]
    [global::System.ComponentModel.DescriptionAttribute("LogInfoRequest")]
    public class LogInfoRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LogInfoRequest() {
        }
        
        public LogInfoRequest(string message, string category) {
            this._Message = message;
            this._Category = category;
        }
        
        private string _Message;
        
        /// <summary>
        ///            Message - The message to be logged
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the information message that you want to log.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Message {
            get {
                return this._Message;
            }
            set {
                this._Message = value;
            }
        }
        
        private string _Category;
        
        /// <summary>
        ///            Category - Message Category (Activation, Console, Mount, etc.)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the category of information message that you want to log.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public string Category {
            get {
                return this._Category;
            }
            set {
                this._Category = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LogInfoRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest)(target));
            typedTarget._Message = this._Message;
            typedTarget._Category = this._Category;
        }
        
        /// <summary>
        ///Clones LogInfoRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest target0 = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LogInfoRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Message == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Message);
            }
            if ((this._Category == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Category);
            }
        }
        
        /// <summary>
        ///Deserializes LogInfoRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LogInfoRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Message = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Category = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            LogWarningRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/log.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/log.user.html", ElementName="LogWarningRequest")]
    [global::System.ComponentModel.DescriptionAttribute("LogWarningRequest")]
    public class LogWarningRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LogWarningRequest() {
        }
        
        public LogWarningRequest(string message, string category) {
            this._Message = message;
            this._Category = category;
        }
        
        private string _Message;
        
        /// <summary>
        ///            Message - The message to be logged
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the warning message that you want to log.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Message {
            get {
                return this._Message;
            }
            set {
                this._Message = value;
            }
        }
        
        private string _Category;
        
        /// <summary>
        ///            Category - Message Category (Activation, Console, Mount, etc.)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the category of warning message that you want to log.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public string Category {
            get {
                return this._Category;
            }
            set {
                this._Category = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LogWarningRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest)(target));
            typedTarget._Message = this._Message;
            typedTarget._Category = this._Category;
        }
        
        /// <summary>
        ///Clones LogWarningRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest target0 = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LogWarningRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Message == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Message);
            }
            if ((this._Category == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Category);
            }
        }
        
        /// <summary>
        ///Deserializes LogWarningRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LogWarningRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Message = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Category = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            LogErrorRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/log.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/log.user.html", ElementName="LogErrorRequest")]
    [global::System.ComponentModel.DescriptionAttribute("LogErrorRequest")]
    public class LogErrorRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LogErrorRequest() {
        }
        
        public LogErrorRequest(string message, string category) {
            this._Message = message;
            this._Category = category;
        }
        
        private string _Message;
        
        /// <summary>
        ///            Message - The message to be logged
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the error message that you want to log.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public string Message {
            get {
                return this._Message;
            }
            set {
                this._Message = value;
            }
        }
        
        private string _Category;
        
        /// <summary>
        ///            Category - Message Category (Activation, Console, Mount, etc.)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the category of error message that you want to log.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public string Category {
            get {
                return this._Category;
            }
            set {
                this._Category = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LogErrorRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest)(target));
            typedTarget._Message = this._Message;
            typedTarget._Category = this._Category;
        }
        
        /// <summary>
        ///Clones LogErrorRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest target0 = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LogErrorRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Message == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Message);
            }
            if ((this._Category == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Category);
            }
        }
        
        /// <summary>
        ///Deserializes LogErrorRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LogErrorRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Message = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Category = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            LogInfo - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) LogInfo")]
    [global::System.ComponentModel.DescriptionAttribute("Logs an information message to the console output service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LogInfo : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public LogInfo() {
        }
        
        public LogInfo(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest body) : 
                base(body) {
        }
        
        public LogInfo(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LogWarning - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) LogWarning")]
    [global::System.ComponentModel.DescriptionAttribute("Logs a warning message to the console output service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LogWarning : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public LogWarning() {
        }
        
        public LogWarning(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest body) : 
                base(body) {
        }
        
        public LogWarning(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LogError - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) LogError")]
    [global::System.ComponentModel.DescriptionAttribute("Logs an error message to the console output service.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LogError : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public LogError() {
        }
        
        public LogError(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest body) : 
                base(body) {
        }
        
        public LogError(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Log Service Operations PortSet
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Log Service Operations PortSet")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LogOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo, global:: Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning, global:: Microsoft.Robotics.Services.Sample.Log.Proxy.LogError> {
        
        public LogOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> LogInfo(string message, string category) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest(message, category);
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LogInfo(string message, string category, out global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo operation) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest(message, category);
            operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> LogInfo(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LogInfo(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest body, out global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfoRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogInfo(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> LogWarning(string message, string category) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest(message, category);
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LogWarning(string message, string category, out global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning operation) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest(message, category);
            operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> LogWarning(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LogWarning(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest body, out global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarningRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogWarning(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> LogError(string message, string category) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest(message, category);
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogError operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogError(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LogError(string message, string category, out global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogError operation) {
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest(message, category);
            operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogError(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> LogError(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogError operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogError(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LogError(global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest body, out global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogError operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogErrorRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogError(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            LogService - Logs messages
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides a simple message logging support.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Log")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/08/log.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/log.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/log.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.LogOperations = new global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.LogOperations, "http://schemas.microsoft.com/robotics/2006/08/log.user.html", "LogOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Log.Proxy.LogOperations LogOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Math.Proxy {
    
    
    /// <summary>
    ///            MathConstants - Common constants for use in calculations
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="MathConstants")]
    [global::System.ComponentModel.DescriptionAttribute("MathConstants - Common constants for use in calculations")]
    public class MathConstants : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public MathConstants() {
        }
        
        private double _PI;
        
        /// <summary>
        ///            Value of Pi
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the value of pi.")]
        public double PI {
            get {
                return this._PI;
            }
            set {
                this._PI = value;
            }
        }
        
        private double _E;
        
        /// <summary>
        ///            Value of e
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the value of E.")]
        public double E {
            get {
                return this._E;
            }
            set {
                this._E = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current MathConstants to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathConstants typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathConstants)(target));
            typedTarget._PI = this._PI;
            typedTarget._E = this._E;
        }
        
        /// <summary>
        ///Clones MathConstants
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathConstants target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathConstants();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current MathConstants to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._PI);
            writer.Write(this._E);
        }
        
        /// <summary>
        ///Deserializes MathConstants
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized MathConstants</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._PI = reader.ReadDouble();
            this._E = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            AcosRequest - Arcosine (inverse cosine)
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="AcosRequest")]
    [global::System.ComponentModel.DescriptionAttribute("AcosRequest - Arcosine (inverse cosine)")]
    public class AcosRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AcosRequest() {
        }
        
        private double _D;
        
        /// <summary>
        ///            D - Value between -1 and +1
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a number representing a cosine, where D is a value between -1 and 1.")]
        public double D {
            get {
                return this._D;
            }
            set {
                this._D = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AcosRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest)(target));
            typedTarget._D = this._D;
        }
        
        /// <summary>
        ///Clones AcosRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AcosRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._D);
        }
        
        /// <summary>
        ///Deserializes AcosRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AcosRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._D = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Response - Used for all results
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="Response")]
    [global::System.ComponentModel.DescriptionAttribute("Response - Used for all results")]
    public class Response : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Response() {
        }
        
        private double _Result;
        
        /// <summary>
        ///            Result - The result of the math operation
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the result of the math operation.")]
        public double Result {
            get {
                return this._Result;
            }
            set {
                this._Result = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Response to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response)(target));
            typedTarget._Result = this._Result;
        }
        
        /// <summary>
        ///Clones Response
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Response to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Result);
        }
        
        /// <summary>
        ///Deserializes Response
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Response</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Result = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            AsinRequest - Arcsine (inverse sine)
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="AsinRequest")]
    [global::System.ComponentModel.DescriptionAttribute("AsinRequest - Arcsine (inverse sine)")]
    public class AsinRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AsinRequest() {
        }
        
        private double _D;
        
        /// <summary>
        ///            D - Value between -1 and +1
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a number representing a sine, where D is a value between -1 and 1.")]
        public double D {
            get {
                return this._D;
            }
            set {
                this._D = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AsinRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest)(target));
            typedTarget._D = this._D;
        }
        
        /// <summary>
        ///Clones AsinRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AsinRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._D);
        }
        
        /// <summary>
        ///Deserializes AsinRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AsinRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._D = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            AtanRequest - Arctangent (inverse tangent)
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="AtanRequest")]
    [global::System.ComponentModel.DescriptionAttribute("AtanRequest - Arctangent (inverse tangent)")]
    public class AtanRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AtanRequest() {
        }
        
        private double _D;
        
        /// <summary>
        ///            D - Value to process
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a number representing a tangent.")]
        public double D {
            get {
                return this._D;
            }
            set {
                this._D = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AtanRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest)(target));
            typedTarget._D = this._D;
        }
        
        /// <summary>
        ///Clones AtanRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AtanRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._D);
        }
        
        /// <summary>
        ///Deserializes AtanRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AtanRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._D = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Atan2Request - Arctangent with two parameters (for correct quadrant)
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="Atan2Request")]
    [global::System.ComponentModel.DescriptionAttribute("Atan2Request - Arctangent with two parameters (for correct quadrant)")]
    public class Atan2Request : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Atan2Request() {
        }
        
        private double _Y;
        
        /// <summary>
        ///            Y - Value in Y direction (vertical)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the y coordinate of a point.")]
        public double Y {
            get {
                return this._Y;
            }
            set {
                this._Y = value;
            }
        }
        
        private double _X;
        
        /// <summary>
        ///            X - Value in X direction (horizontal)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the x coordinate of a point.")]
        public double X {
            get {
                return this._X;
            }
            set {
                this._X = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Atan2Request to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request)(target));
            typedTarget._Y = this._Y;
            typedTarget._X = this._X;
        }
        
        /// <summary>
        ///Clones Atan2Request
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Atan2Request to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Y);
            writer.Write(this._X);
        }
        
        /// <summary>
        ///Deserializes Atan2Request
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Atan2Request</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Y = reader.ReadDouble();
            this._X = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            CosRequest - Cosine of an angle
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="CosRequest")]
    [global::System.ComponentModel.DescriptionAttribute("CosRequest - Cosine of an angle")]
    public class CosRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public CosRequest() {
        }
        
        private double _Angle;
        
        /// <summary>
        ///            Angle - Angle in radians
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies an angle, measured in radians.")]
        public double Angle {
            get {
                return this._Angle;
            }
            set {
                this._Angle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current CosRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest)(target));
            typedTarget._Angle = this._Angle;
        }
        
        /// <summary>
        ///Clones CosRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current CosRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Angle);
        }
        
        /// <summary>
        ///Deserializes CosRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized CosRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Angle = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            ExpRequest - Exponential (e raised to a power)
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="ExpRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ExpRequest - Exponential (e raised to a power)")]
    public class ExpRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ExpRequest() {
        }
        
        private double _Exponent;
        
        /// <summary>
        ///            Exponent - Power to raise e to
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a number specifying a power.")]
        public double Exponent {
            get {
                return this._Exponent;
            }
            set {
                this._Exponent = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ExpRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest)(target));
            typedTarget._Exponent = this._Exponent;
        }
        
        /// <summary>
        ///Clones ExpRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ExpRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Exponent);
        }
        
        /// <summary>
        ///Deserializes ExpRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ExpRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Exponent = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            LogRequest - Logarithm of a number with a specified base
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="LogRequest")]
    [global::System.ComponentModel.DescriptionAttribute("LogRequest - Logarithm of a number with a specified base")]
    public class LogRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LogRequest() {
        }
        
        private double _A;
        
        /// <summary>
        ///            A - Value to take the log of (must be positive)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a number whose logarithm is to be found.")]
        public double A {
            get {
                return this._A;
            }
            set {
                this._A = value;
            }
        }
        
        private double _Base;
        
        /// <summary>
        ///            Base - Logarithm base (usually 2, 10, e)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the base of the logarithm.")]
        public double Base {
            get {
                return this._Base;
            }
            set {
                this._Base = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LogRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest)(target));
            typedTarget._A = this._A;
            typedTarget._Base = this._Base;
        }
        
        /// <summary>
        ///Clones LogRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LogRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._A);
            writer.Write(this._Base);
        }
        
        /// <summary>
        ///Deserializes LogRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LogRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._A = reader.ReadDouble();
            this._Base = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            PowRequest - Raises a number to a power
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="PowRequest")]
    [global::System.ComponentModel.DescriptionAttribute("PowRequest - Raises a number to a power")]
    public class PowRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PowRequest() {
        }
        
        private double _A;
        
        /// <summary>
        ///            A - Value to be raised to power (exponent)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a number to be raised to a power.")]
        public double A {
            get {
                return this._A;
            }
            set {
                this._A = value;
            }
        }
        
        private double _Exponent;
        
        /// <summary>
        ///            Exponent - Power to raise A to
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a power.")]
        public double Exponent {
            get {
                return this._Exponent;
            }
            set {
                this._Exponent = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PowRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest)(target));
            typedTarget._A = this._A;
            typedTarget._Exponent = this._Exponent;
        }
        
        /// <summary>
        ///Clones PowRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PowRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._A);
            writer.Write(this._Exponent);
        }
        
        /// <summary>
        ///Deserializes PowRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PowRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._A = reader.ReadDouble();
            this._Exponent = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            RandomRequest - Returns a random number
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="RandomRequest")]
    [global::System.ComponentModel.DescriptionAttribute("RandomRequest - Returns a random number")]
    public class RandomRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RandomRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current RandomRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest)(target));
        }
        
        /// <summary>
        ///Clones RandomRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RandomRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes RandomRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RandomRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            RoundRequest - Rounds a number to specified number of places
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="RoundRequest")]
    [global::System.ComponentModel.DescriptionAttribute("RoundRequest - Rounds a number to specified number of places")]
    public class RoundRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RoundRequest() {
        }
        
        private double _Value;
        
        /// <summary>
        ///            Value - Number to be rounded
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a decimal number to be rounded.")]
        public double Value {
            get {
                return this._Value;
            }
            set {
                this._Value = value;
            }
        }
        
        private int _Digits;
        
        /// <summary>
        ///            Digits - Number of significant decimal places
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the number of significant decimal places (precision) in the return valu" +
            "e.")]
        public int Digits {
            get {
                return this._Digits;
            }
            set {
                this._Digits = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RoundRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest)(target));
            typedTarget._Value = this._Value;
            typedTarget._Digits = this._Digits;
        }
        
        /// <summary>
        ///Clones RoundRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RoundRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Value);
            writer.Write(this._Digits);
        }
        
        /// <summary>
        ///Deserializes RoundRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RoundRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Value = reader.ReadDouble();
            this._Digits = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            SinRequest - Sine of an angle
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="SinRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SinRequest - Sine of an angle")]
    public class SinRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SinRequest() {
        }
        
        private double _Angle;
        
        /// <summary>
        ///            Angle - Angle in radians
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies an angle, measured in radians.")]
        public double Angle {
            get {
                return this._Angle;
            }
            set {
                this._Angle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SinRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest)(target));
            typedTarget._Angle = this._Angle;
        }
        
        /// <summary>
        ///Clones SinRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SinRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Angle);
        }
        
        /// <summary>
        ///Deserializes SinRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SinRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Angle = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            SqrtRequest - Square Root of a number
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="SqrtRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SqrtRequest - Square Root of a number")]
    public class SqrtRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SqrtRequest() {
        }
        
        private double _A;
        
        /// <summary>
        ///            A - Value to find square root of (must be positive)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a number to calculate its square root.")]
        public double A {
            get {
                return this._A;
            }
            set {
                this._A = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SqrtRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest)(target));
            typedTarget._A = this._A;
        }
        
        /// <summary>
        ///Clones SqrtRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SqrtRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._A);
        }
        
        /// <summary>
        ///Deserializes SqrtRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SqrtRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._A = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            TanRequest - Tangent of an angle
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="TanRequest")]
    [global::System.ComponentModel.DescriptionAttribute("TanRequest - Tangent of an angle")]
    public class TanRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TanRequest() {
        }
        
        private double _Angle;
        
        /// <summary>
        ///            Angle - Angle in radians
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies an angle, measured in radians.")]
        public double Angle {
            get {
                return this._Angle;
            }
            set {
                this._Angle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TanRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest)(target));
            typedTarget._Angle = this._Angle;
        }
        
        /// <summary>
        ///Clones TanRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TanRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Angle);
        }
        
        /// <summary>
        ///Deserializes TanRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TanRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Angle = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            TruncateRequest - Truncates a number
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="TruncateRequest")]
    [global::System.ComponentModel.DescriptionAttribute("TruncateRequest - Truncates a number")]
    public class TruncateRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TruncateRequest() {
        }
        
        private double _A;
        
        /// <summary>
        ///            A - Number to be truncated
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies a number to truncate.")]
        public double A {
            get {
                return this._A;
            }
            set {
                this._A = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TruncateRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest)(target));
            typedTarget._A = this._A;
        }
        
        /// <summary>
        ///Clones TruncateRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TruncateRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._A);
        }
        
        /// <summary>
        ///Deserializes TruncateRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TruncateRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._A = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            ToRadiansRequest - Converts radians to degrees
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="ToRadiansRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ToRadiansRequest - Converts radians to degrees")]
    public class ToRadiansRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ToRadiansRequest() {
        }
        
        private double _Angle;
        
        /// <summary>
        ///            Angle - Angle (in degrees) to convert to Radians
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies an angle, measured in degrees.")]
        public double Angle {
            get {
                return this._Angle;
            }
            set {
                this._Angle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ToRadiansRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest)(target));
            typedTarget._Angle = this._Angle;
        }
        
        /// <summary>
        ///Clones ToRadiansRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ToRadiansRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Angle);
        }
        
        /// <summary>
        ///Deserializes ToRadiansRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ToRadiansRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Angle = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            ToDegreesRequest - Converts degrees to radians
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/math.user.html", ElementName="ToDegreesRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ToDegreesRequest - Converts degrees to radians")]
    public class ToDegreesRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ToDegreesRequest() {
        }
        
        private double _Angle;
        
        /// <summary>
        ///            Angle - Angle (in radians) to conver to Degrees
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies an angle, measured in radians.")]
        public double Angle {
            get {
                return this._Angle;
            }
            set {
                this._Angle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ToDegreesRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest)(target));
            typedTarget._Angle = this._Angle;
        }
        
        /// <summary>
        ///Clones ToDegreesRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest target0 = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ToDegreesRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Angle);
        }
        
        /// <summary>
        ///Deserializes ToDegreesRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ToDegreesRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Angle = reader.ReadDouble();
            return this;
        }
    }
    
    /// <summary>
    ///            Constants
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) PiandE")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the values of the mathematical constants PI and E.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Constants : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathConstants, global:: W3C.Soap.Fault>> {
        
        public Constants() {
        }
        
        public Constants(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Constants(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathConstants, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ArcCosine
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ArcCosine")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the angle (in radians) whose cosine is the specified number.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Acos : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Acos() {
        }
        
        public Acos(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest body) : 
                base(body) {
        }
        
        public Acos(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ArcSine
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ArcSine")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the angle (in radians) whose sine is the specified number.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Asin : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Asin() {
        }
        
        public Asin(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest body) : 
                base(body) {
        }
        
        public Asin(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ArcTangent
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ArcTangent")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the angle (in radians) whose tangent is the specified number.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Atan : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Atan() {
        }
        
        public Atan(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest body) : 
                base(body) {
        }
        
        public Atan(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ArcTangent (two parameter version)
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ArcTangent2")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the angle (in radians) whose tangent is the quotient of two specified num" +
        "bers.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Atan2 : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Atan2() {
        }
        
        public Atan2(global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request body) : 
                base(body) {
        }
        
        public Atan2(global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Cosine
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Cosine")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the cosine of the specified angle (in radians).")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Cos : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Cos() {
        }
        
        public Cos(global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest body) : 
                base(body) {
        }
        
        public Cos(global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Exponential
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Exponent")]
    [global::System.ComponentModel.DescriptionAttribute("Returns e raised to the specified power.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Exp : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Exp() {
        }
        
        public Exp(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest body) : 
                base(body) {
        }
        
        public Exp(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Logarithm
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Logarithm")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the logarithm of a specified number. If base is specified as 0 then a nat" +
        "ural logarithm (base e) is calculated.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Log : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Log() {
        }
        
        public Log(global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest body) : 
                base(body) {
        }
        
        public Log(global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Raise to a Power
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Power")]
    [global::System.ComponentModel.DescriptionAttribute("Raises \'A\' to the power \'Exponent\'.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Pow : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Pow() {
        }
        
        public Pow(global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest body) : 
                base(body) {
        }
        
        public Pow(global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Random number
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Random")]
    [global::System.ComponentModel.DescriptionAttribute("Returns a psuedo-random number between 0.0 and 1.0.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Random : global::Microsoft.Dss.ServiceModel.Dssp.Query<global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Random() {
        }
        
        public Random(global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest body) : 
                base(body) {
        }
        
        public Random(global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Round off a number
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Round")]
    [global::System.ComponentModel.DescriptionAttribute("Rounds a double-precision floating-point value to the specified precision.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Round : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Round() {
        }
        
        public Round(global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest body) : 
                base(body) {
        }
        
        public Round(global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Sine
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Sine")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the sine of the specified angle (in radians).")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Sin : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Sin() {
        }
        
        public Sin(global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest body) : 
                base(body) {
        }
        
        public Sin(global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Square Root
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Square Root")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the square root of the specified number.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Sqrt : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Sqrt() {
        }
        
        public Sqrt(global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest body) : 
                base(body) {
        }
        
        public Sqrt(global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Tangent
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Tangent")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the tangent of the specified angle (in radians).")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Tan : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Tan() {
        }
        
        public Tan(global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest body) : 
                base(body) {
        }
        
        public Tan(global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Truncate a number
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Truncate")]
    [global::System.ComponentModel.DescriptionAttribute("Calculates the integral part of a specified double-precision floating-point numbe" +
        "r.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Truncate : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public Truncate() {
        }
        
        public Truncate(global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest body) : 
                base(body) {
        }
        
        public Truncate(global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Convert Degrees to Radians
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ToRadians")]
    [global::System.ComponentModel.DescriptionAttribute("Converts a value in degrees to radians.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ToRadians : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public ToRadians() {
        }
        
        public ToRadians(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest body) : 
                base(body) {
        }
        
        public ToRadians(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Convert Radians to Degrees
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ToDegrees")]
    [global::System.ComponentModel.DescriptionAttribute("Converts a value in radians to degrees.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ToDegrees : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault>> {
        
        public ToDegrees() {
        }
        
        public ToDegrees(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest body) : 
                base(body) {
        }
        
        public ToDegrees(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Operations PortSet for Math Service
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Operations PortSet for Math Service")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class MathOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Constants, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Acos, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Asin, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Atan, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Cos, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Exp, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Log, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Pow, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Random, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Round, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Sin, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Tan, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians, global:: Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees> {
        
        public MathOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathConstants, global:: W3C.Soap.Fault> Constants() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Constants operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Constants(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Constants(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Constants operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Constants(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathConstants, global:: W3C.Soap.Fault> Constants(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Constants operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Constants(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Constants(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Constants operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Constants(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Acos() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Acos operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Acos(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Acos(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Acos operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Acos(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Acos(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Acos operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Acos(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Acos(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Acos operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AcosRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Acos(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Asin() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Asin operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Asin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Asin(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Asin operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Asin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Asin(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Asin operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Asin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Asin(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Asin operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AsinRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Asin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Atan() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Atan(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Atan(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Atan(global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.AtanRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Atan2() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2 operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Atan2(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2 operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Atan2(global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2 operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Atan2(global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2 operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2Request();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Atan2(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Cos() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Cos operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Cos(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Cos(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Cos operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Cos(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Cos(global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Cos operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Cos(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Cos(global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Cos operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.CosRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Cos(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Exp() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Exp operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Exp(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Exp(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Exp operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Exp(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Exp(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Exp operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Exp(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Exp(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Exp operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ExpRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Exp(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Log() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Log operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Log(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Log(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Log operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Log(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Log(global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Log operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Log(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Log(global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Log operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.LogRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Log(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Pow() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Pow operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Pow(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Pow(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Pow operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Pow(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Pow(global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Pow operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Pow(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Pow(global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Pow operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.PowRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Pow(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Random() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Random operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Random(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Random(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Random operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Random(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Random(global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Random operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Random(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Random(global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Random operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RandomRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Random(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Round() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Round operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Round(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Round(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Round operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Round(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Round(global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Round operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Round(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Round(global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Round operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.RoundRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Round(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Sin() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sin operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Sin(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sin operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Sin(global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sin operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Sin(global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sin operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SinRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sin(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Sqrt() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Sqrt(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Sqrt(global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Sqrt(global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.SqrtRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Sqrt(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Tan() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Tan operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Tan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Tan(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Tan operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Tan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Tan(global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Tan operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Tan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Tan(global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Tan operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TanRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Tan(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Truncate() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Truncate(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> Truncate(global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Truncate(global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.TruncateRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.Truncate(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> ToRadians() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ToRadians(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> ToRadians(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ToRadians(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadiansRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToRadians(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> ToDegrees() {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest();
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ToDegrees(out global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees operation) {
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Math.Proxy.Response, global:: W3C.Soap.Fault> ToDegrees(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ToDegrees(global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest body, out global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegreesRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.ToDegrees(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            MathService - Mathematical functions
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to simple mathematical functions.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Math Functions")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/08/math.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/math.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/math.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.MathOperations = new global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.MathOperations, "http://schemas.microsoft.com/robotics/2006/08/math.user.html", "MathOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Math.Proxy.MathOperations MathOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Sound.Proxy {
    
    
    /// <summary>
    ///            PlayRequest - Play a specified sound file
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html", ElementName="PlayRequest")]
    [global::System.ComponentModel.DescriptionAttribute("PlayRequest - Play a specified sound file")]
    public class PlayRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PlayRequest() {
        }
        
        private string _Filename;
        
        /// <summary>
        ///            Filename - Name of the WAV (sound) file to play
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the filename of the sound file.")]
        public string Filename {
            get {
                return this._Filename;
            }
            set {
                this._Filename = value;
            }
        }
        
        private bool _Synchronous;
        
        /// <summary>
        ///            Synchronous - True means do not respond until finished
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether to play the file synchronously (true).")]
        public bool Synchronous {
            get {
                return this._Synchronous;
            }
            set {
                this._Synchronous = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PlayRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest)(target));
            typedTarget._Filename = this._Filename;
            typedTarget._Synchronous = this._Synchronous;
        }
        
        /// <summary>
        ///Clones PlayRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest target0 = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PlayRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Filename == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Filename);
            }
            writer.Write(this._Synchronous);
        }
        
        /// <summary>
        ///Deserializes PlayRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PlayRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Filename = reader.ReadString();
            }
            this._Synchronous = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            AsteriskRequest - Play the Windows "Asterisk" sound
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html", ElementName="AsteriskRequest")]
    [global::System.ComponentModel.DescriptionAttribute("AsteriskRequest - Play the Windows \"Asterisk\" sound")]
    public class AsteriskRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public AsteriskRequest() {
        }
        
        private bool _Synchronous;
        
        /// <summary>
        ///            Synchronous - True means do not respond until finished
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether to play the sound synchronously (true).")]
        public bool Synchronous {
            get {
                return this._Synchronous;
            }
            set {
                this._Synchronous = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current AsteriskRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest)(target));
            typedTarget._Synchronous = this._Synchronous;
        }
        
        /// <summary>
        ///Clones AsteriskRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest target0 = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current AsteriskRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Synchronous);
        }
        
        /// <summary>
        ///Deserializes AsteriskRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized AsteriskRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Synchronous = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            BeepRequest - Play a Beep
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html", ElementName="BeepRequest")]
    [global::System.ComponentModel.DescriptionAttribute("BeepRequest - Play a Beep")]
    public class BeepRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public BeepRequest() {
        }
        
        private bool _Synchronous;
        
        /// <summary>
        ///            Synchronous - True means do not respond until finished
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether to play the sound synchronously (true).")]
        public bool Synchronous {
            get {
                return this._Synchronous;
            }
            set {
                this._Synchronous = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current BeepRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest)(target));
            typedTarget._Synchronous = this._Synchronous;
        }
        
        /// <summary>
        ///Clones BeepRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest target0 = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current BeepRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Synchronous);
        }
        
        /// <summary>
        ///Deserializes BeepRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized BeepRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Synchronous = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            ExclamationRequest - Play the Windows "Exclamation" sound
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html", ElementName="ExclamationRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ExclamationRequest - Play the Windows \"Exclamation\" sound")]
    public class ExclamationRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ExclamationRequest() {
        }
        
        private bool _Synchronous;
        
        /// <summary>
        ///            Synchronous - True means do not respond until finished
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether to play the sound synchronously (true).")]
        public bool Synchronous {
            get {
                return this._Synchronous;
            }
            set {
                this._Synchronous = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ExclamationRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest)(target));
            typedTarget._Synchronous = this._Synchronous;
        }
        
        /// <summary>
        ///Clones ExclamationRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest target0 = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ExclamationRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Synchronous);
        }
        
        /// <summary>
        ///Deserializes ExclamationRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ExclamationRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Synchronous = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            HandRequest - Play the Windows "Hand" sound
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html", ElementName="HandRequest")]
    [global::System.ComponentModel.DescriptionAttribute("HandRequest - Play the Windows \"Hand\" sound")]
    public class HandRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public HandRequest() {
        }
        
        private bool _Synchronous;
        
        /// <summary>
        ///            Synchronous - True means do not respond until finished
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether to play the sound synchronously (true).")]
        public bool Synchronous {
            get {
                return this._Synchronous;
            }
            set {
                this._Synchronous = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current HandRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest)(target));
            typedTarget._Synchronous = this._Synchronous;
        }
        
        /// <summary>
        ///Clones HandRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest target0 = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current HandRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Synchronous);
        }
        
        /// <summary>
        ///Deserializes HandRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized HandRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Synchronous = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            QuestionRequest - Play the Windows "Question" sound
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/sound.user.html", ElementName="QuestionRequest")]
    [global::System.ComponentModel.DescriptionAttribute("QuestionRequest - Play the Windows \"Question\" sound")]
    public class QuestionRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public QuestionRequest() {
        }
        
        private bool _Synchronous;
        
        /// <summary>
        ///            Synchronous - True means do not respond until finished
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether to play the sound synchronously (true).")]
        public bool Synchronous {
            get {
                return this._Synchronous;
            }
            set {
                this._Synchronous = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current QuestionRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest)(target));
            typedTarget._Synchronous = this._Synchronous;
        }
        
        /// <summary>
        ///Clones QuestionRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest target0 = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current QuestionRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Synchronous);
        }
        
        /// <summary>
        ///Deserializes QuestionRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized QuestionRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Synchronous = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            PlaySound - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) PlaySound")]
    [global::System.ComponentModel.DescriptionAttribute("Plays the specified .wav file.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Play : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Play() {
        }
        
        public Play(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest body) : 
                base(body) {
        }
        
        public Play(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Asterisk - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) AsteriskSound")]
    [global::System.ComponentModel.DescriptionAttribute("Plays system sound \'Asterisk\'.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Asterisk : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Asterisk() {
        }
        
        public Asterisk(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest body) : 
                base(body) {
        }
        
        public Asterisk(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Beep - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Beep")]
    [global::System.ComponentModel.DescriptionAttribute("Plays system \'Beep\' sound.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Beep : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Beep() {
        }
        
        public Beep(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest body) : 
                base(body) {
        }
        
        public Beep(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Exclamation - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ExclamationSound")]
    [global::System.ComponentModel.DescriptionAttribute("Plays system \'Exclamation\' sound.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Exclamation : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Exclamation() {
        }
        
        public Exclamation(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest body) : 
                base(body) {
        }
        
        public Exclamation(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Hand - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) CriticalStopSound")]
    [global::System.ComponentModel.DescriptionAttribute("Plays system \'Critical Stop\' sound.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Hand : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Hand() {
        }
        
        public Hand(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest body) : 
                base(body) {
        }
        
        public Hand(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Question - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) QuestionSound")]
    [global::System.ComponentModel.DescriptionAttribute("Plays system \'Question\' sound.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Question : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Question() {
        }
        
        public Question(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest body) : 
                base(body) {
        }
        
        public Question(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///             Sound Service Operations PortSet
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sound Service Operations PortSet")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SoundOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Robotics.Services.Sample.Sound.Proxy.Play, global:: Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk, global:: Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep, global:: Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation, global:: Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand, global:: Microsoft.Robotics.Services.Sample.Sound.Proxy.Question> {
        
        public SoundOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Play() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest();
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Play operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Play(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Play(out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Play operation) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Play(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Play(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Play operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Play(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Play(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest body, out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Play operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.PlayRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Play(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Asterisk() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest();
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Asterisk(out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk operation) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Asterisk(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Asterisk(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest body, out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.AsteriskRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Asterisk(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Beep() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest();
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Beep(out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep operation) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Beep(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Beep(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest body, out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.BeepRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Beep(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Exclamation() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest();
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Exclamation(out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation operation) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Exclamation(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Exclamation(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest body, out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.ExclamationRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Exclamation(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Hand() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest();
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Hand(out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand operation) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Hand(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Hand(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest body, out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.HandRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Hand(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Question() {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest();
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Question operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Question(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Question(out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Question operation) {
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Question(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Question(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Question operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Question(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Question(global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest body, out global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Question operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.QuestionRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.Question(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            SoundService - Plays WAV (sound) files and system sounds
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Plays .wav files and system sounds.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Sound Player")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/08/sound.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/sound.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/sound.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SoundOperations = new global::Microsoft.Robotics.Services.Sample.Sound.Proxy.SoundOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SoundOperations, "http://schemas.microsoft.com/robotics/2006/08/sound.user.html", "SoundOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Sound.Proxy.SoundOperations SoundOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.StringHelper.Proxy {
    
    
    /// <summary>
    ///            IsNullOrEmptyRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="IsNullOrEmptyRequest")]
    [global::System.ComponentModel.DescriptionAttribute("IsNullOrEmptyRequest")]
    public class IsNullOrEmptyRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public IsNullOrEmptyRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to check
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to be checked.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current IsNullOrEmptyRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest)(target));
            typedTarget._String = this._String;
        }
        
        /// <summary>
        ///Clones IsNullOrEmptyRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IsNullOrEmptyRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
        }
        
        /// <summary>
        ///Deserializes IsNullOrEmptyRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IsNullOrEmptyRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            IsNullOrEmptyResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="IsNullOrEmptyResponse")]
    [global::System.ComponentModel.DescriptionAttribute("IsNullOrEmptyResponse")]
    public class IsNullOrEmptyResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public IsNullOrEmptyResponse() {
        }
        
        private bool _IsNullOrEmpty;
        
        /// <summary>
        ///            IsNullOrEmpty - True if the string is empty or null (does not exist)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if the string is null or empty.")]
        public bool IsNullOrEmpty {
            get {
                return this._IsNullOrEmpty;
            }
            set {
                this._IsNullOrEmpty = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current IsNullOrEmptyResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyResponse)(target));
            typedTarget._IsNullOrEmpty = this._IsNullOrEmpty;
        }
        
        /// <summary>
        ///Clones IsNullOrEmptyResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IsNullOrEmptyResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._IsNullOrEmpty);
        }
        
        /// <summary>
        ///Deserializes IsNullOrEmptyResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IsNullOrEmptyResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._IsNullOrEmpty = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            ContainsRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="ContainsRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ContainsRequest")]
    public class ContainsRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ContainsRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to search in
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("A text string to be searched.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private string _Query;
        
        /// <summary>
        ///            Query - The string to look for
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to be searched for.")]
        public string Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ContainsRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest)(target));
            typedTarget._String = this._String;
            typedTarget._Query = this._Query;
        }
        
        /// <summary>
        ///Clones ContainsRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ContainsRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            if ((this._Query == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Query);
            }
        }
        
        /// <summary>
        ///Deserializes ContainsRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ContainsRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Query = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ContainsResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="ContainsResponse")]
    [global::System.ComponentModel.DescriptionAttribute("ContainsResponse")]
    public class ContainsResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ContainsResponse() {
        }
        
        private bool _Contains;
        
        /// <summary>
        ///            Contains - True if string contains the query string
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Contains - True if string contains the query string")]
        public bool Contains {
            get {
                return this._Contains;
            }
            set {
                this._Contains = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ContainsResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsResponse)(target));
            typedTarget._Contains = this._Contains;
        }
        
        /// <summary>
        ///Clones ContainsResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ContainsResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Contains);
        }
        
        /// <summary>
        ///Deserializes ContainsResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ContainsResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Contains = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            EndsWithRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="EndsWithRequest")]
    [global::System.ComponentModel.DescriptionAttribute("EndsWithRequest")]
    public class EndsWithRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EndsWithRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to search in
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to be searched.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private string _Query;
        
        /// <summary>
        ///            Query - The string to search for
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The query text string to be searched.")]
        public string Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        private bool _IgnoreCase;
        
        /// <summary>
        ///            IgnoreCase - Ignore case during search if true
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The option whether to ignore the case.\ntrue sets the option.")]
        public bool IgnoreCase {
            get {
                return this._IgnoreCase;
            }
            set {
                this._IgnoreCase = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current EndsWithRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest)(target));
            typedTarget._String = this._String;
            typedTarget._Query = this._Query;
            typedTarget._IgnoreCase = this._IgnoreCase;
        }
        
        /// <summary>
        ///Clones EndsWithRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EndsWithRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            if ((this._Query == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Query);
            }
            writer.Write(this._IgnoreCase);
        }
        
        /// <summary>
        ///Deserializes EndsWithRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EndsWithRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Query = reader.ReadString();
            }
            this._IgnoreCase = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            EndsWithResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="EndsWithResponse")]
    [global::System.ComponentModel.DescriptionAttribute("EndsWithResponse")]
    public class EndsWithResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public EndsWithResponse() {
        }
        
        private bool _EndsWith;
        
        /// <summary>
        ///            EndsWith - String was found if true
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies if the string was found.")]
        public bool EndsWith {
            get {
                return this._EndsWith;
            }
            set {
                this._EndsWith = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current EndsWithResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithResponse)(target));
            typedTarget._EndsWith = this._EndsWith;
        }
        
        /// <summary>
        ///Clones EndsWithResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current EndsWithResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._EndsWith);
        }
        
        /// <summary>
        ///Deserializes EndsWithResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized EndsWithResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._EndsWith = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            IndexOfRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="IndexOfRequest")]
    [global::System.ComponentModel.DescriptionAttribute("IndexOfRequest")]
    public class IndexOfRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public IndexOfRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to search in
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to search.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private string _Query;
        
        /// <summary>
        ///            Query - The string to search for
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The query text string to search for.")]
        public string Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        private int _StartIndex;
        
        /// <summary>
        ///            StartIndex - Starting position for the search
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The starting index for the search.")]
        public int StartIndex {
            get {
                return this._StartIndex;
            }
            set {
                this._StartIndex = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current IndexOfRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest)(target));
            typedTarget._String = this._String;
            typedTarget._Query = this._Query;
            typedTarget._StartIndex = this._StartIndex;
        }
        
        /// <summary>
        ///Clones IndexOfRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IndexOfRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            if ((this._Query == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Query);
            }
            writer.Write(this._StartIndex);
        }
        
        /// <summary>
        ///Deserializes IndexOfRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IndexOfRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Query = reader.ReadString();
            }
            this._StartIndex = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            IndexOfResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="IndexOfResponse")]
    [global::System.ComponentModel.DescriptionAttribute("IndexOfResponse")]
    public class IndexOfResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public IndexOfResponse() {
        }
        
        private int _IndexOf;
        
        /// <summary>
        ///            IndexOf - The index where the string was found, otherwise -1
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the index of where the string was found.")]
        public int IndexOf {
            get {
                return this._IndexOf;
            }
            set {
                this._IndexOf = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current IndexOfResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfResponse)(target));
            typedTarget._IndexOf = this._IndexOf;
        }
        
        /// <summary>
        ///Clones IndexOfResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current IndexOfResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._IndexOf);
        }
        
        /// <summary>
        ///Deserializes IndexOfResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized IndexOfResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._IndexOf = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            InsertRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="InsertRequest")]
    [global::System.ComponentModel.DescriptionAttribute("InsertRequest")]
    public class InsertRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InsertRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to insert into
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("A text string to receive the insertion.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private string _Insertion;
        
        /// <summary>
        ///            Insertion - The text to be inserted
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to insert.")]
        public string Insertion {
            get {
                return this._Insertion;
            }
            set {
                this._Insertion = value;
            }
        }
        
        private int _StartIndex;
        
        /// <summary>
        ///            StartIndex - The position to insert at
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The character position for the insertion.")]
        public int StartIndex {
            get {
                return this._StartIndex;
            }
            set {
                this._StartIndex = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current InsertRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest)(target));
            typedTarget._String = this._String;
            typedTarget._Insertion = this._Insertion;
            typedTarget._StartIndex = this._StartIndex;
        }
        
        /// <summary>
        ///Clones InsertRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InsertRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            if ((this._Insertion == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Insertion);
            }
            writer.Write(this._StartIndex);
        }
        
        /// <summary>
        ///Deserializes InsertRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InsertRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Insertion = reader.ReadString();
            }
            this._StartIndex = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            InsertResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="InsertResponse")]
    [global::System.ComponentModel.DescriptionAttribute("InsertResponse")]
    public class InsertResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public InsertResponse() {
        }
        
        private string _Inserted;
        
        /// <summary>
        ///            Inserted - The output string (with inserted text)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The new string with the inserted text.")]
        public string Inserted {
            get {
                return this._Inserted;
            }
            set {
                this._Inserted = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current InsertResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertResponse)(target));
            typedTarget._Inserted = this._Inserted;
        }
        
        /// <summary>
        ///Clones InsertResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current InsertResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Inserted == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Inserted);
            }
        }
        
        /// <summary>
        ///Deserializes InsertResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized InsertResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Inserted = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            JoinRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="JoinRequest")]
    [global::System.ComponentModel.DescriptionAttribute("JoinRequest")]
    public class JoinRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public JoinRequest() {
        }
        
        private string _Separator;
        
        /// <summary>
        ///            Separator - The text to insert between the strings
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to be inserted.")]
        public string Separator {
            get {
                return this._Separator;
            }
            set {
                this._Separator = value;
            }
        }
        
        private string[] _Strings = new string[0];
        
        /// <summary>
        ///            Strings - The array of strings to join
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(IsRequired=true, Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The string array to concatenate.")]
        public string[] Strings {
            get {
                return this._Strings;
            }
            set {
                this._Strings = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current JoinRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest)(target));
            typedTarget._Separator = this._Separator;
            if ((this._Strings != null)) {
                int count = this._Strings.Length;
                string[] tmp = new string[count];
                this._Strings.CopyTo(tmp, 0);
                typedTarget._Strings = tmp;
            }
        }
        
        /// <summary>
        ///Clones JoinRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current JoinRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Separator == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Separator);
            }
            if ((this._Strings == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Strings.Length);
                for (int indexStrings = 0; (indexStrings < this._Strings.Length); indexStrings = (indexStrings + 1)) {
                    if ((this._Strings[indexStrings] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        writer.Write(this._Strings[indexStrings]);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes JoinRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized JoinRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Separator = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                int tmp0 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._Strings = new string[count0];
                for (int index = 0; (index < count0); index = (index + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Strings[index] = reader.ReadString();
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            JoinResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="JoinResponse")]
    [global::System.ComponentModel.DescriptionAttribute("JoinResponse")]
    public class JoinResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public JoinResponse() {
        }
        
        private string _Joined;
        
        /// <summary>
        ///            Joined - The output (joined) string
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The resulting concatenated string.")]
        public string Joined {
            get {
                return this._Joined;
            }
            set {
                this._Joined = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current JoinResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinResponse)(target));
            typedTarget._Joined = this._Joined;
        }
        
        /// <summary>
        ///Clones JoinResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current JoinResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Joined == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Joined);
            }
        }
        
        /// <summary>
        ///Deserializes JoinResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized JoinResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Joined = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            LastIndexOfRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="LastIndexOfRequest")]
    [global::System.ComponentModel.DescriptionAttribute("LastIndexOfRequest")]
    public class LastIndexOfRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LastIndexOfRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to search in
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("A text string to be searched.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private string _Query;
        
        /// <summary>
        ///            Query - The string to look for
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("A text string seach for.")]
        public string Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        private int _StartIndex;
        
        /// <summary>
        ///            StartIndex - Starting position for the search
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The character position to start the search.")]
        public int StartIndex {
            get {
                return this._StartIndex;
            }
            set {
                this._StartIndex = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LastIndexOfRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest)(target));
            typedTarget._String = this._String;
            typedTarget._Query = this._Query;
            typedTarget._StartIndex = this._StartIndex;
        }
        
        /// <summary>
        ///Clones LastIndexOfRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LastIndexOfRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            if ((this._Query == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Query);
            }
            writer.Write(this._StartIndex);
        }
        
        /// <summary>
        ///Deserializes LastIndexOfRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LastIndexOfRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Query = reader.ReadString();
            }
            this._StartIndex = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            LastIndexOfResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="LastIndexOfResponse")]
    [global::System.ComponentModel.DescriptionAttribute("LastIndexOfResponse")]
    public class LastIndexOfResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LastIndexOfResponse() {
        }
        
        private int _LastIndexOf;
        
        /// <summary>
        ///            LastIndexOf - Starting position of the string if found, otherwise -1
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The index character position if the string is found, or -1 if it is not.")]
        public int LastIndexOf {
            get {
                return this._LastIndexOf;
            }
            set {
                this._LastIndexOf = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LastIndexOfResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfResponse)(target));
            typedTarget._LastIndexOf = this._LastIndexOf;
        }
        
        /// <summary>
        ///Clones LastIndexOfResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LastIndexOfResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._LastIndexOf);
        }
        
        /// <summary>
        ///Deserializes LastIndexOfResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LastIndexOfResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._LastIndexOf = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            PadRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="PadRequest")]
    [global::System.ComponentModel.DescriptionAttribute("PadRequest")]
    public class PadRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PadRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to be padded
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the text string to be aligned by inserting padding characters.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private int _LeftPadding;
        
        /// <summary>
        ///            LeftPadding - Number of padding characters on the left (can be zero)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the number of padding characters to add to the left.")]
        public int LeftPadding {
            get {
                return this._LeftPadding;
            }
            set {
                this._LeftPadding = value;
            }
        }
        
        private int _RightPadding;
        
        /// <summary>
        ///            RightPadding - Number of padding character on the right (can be zero)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the number of padding characters to add to the right.")]
        public int RightPadding {
            get {
                return this._RightPadding;
            }
            set {
                this._RightPadding = value;
            }
        }
        
        private char _PaddingChar;
        
        /// <summary>
        ///            PaddingChar - Character to pad with (defaults to space)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the padding characters to add.")]
        public char PaddingChar {
            get {
                return this._PaddingChar;
            }
            set {
                this._PaddingChar = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PadRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest)(target));
            typedTarget._String = this._String;
            typedTarget._LeftPadding = this._LeftPadding;
            typedTarget._RightPadding = this._RightPadding;
            typedTarget._PaddingChar = this._PaddingChar;
        }
        
        /// <summary>
        ///Clones PadRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PadRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            writer.Write(this._LeftPadding);
            writer.Write(this._RightPadding);
            writer.Write(this._PaddingChar);
        }
        
        /// <summary>
        ///Deserializes PadRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PadRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            this._LeftPadding = reader.ReadInt32();
            this._RightPadding = reader.ReadInt32();
            this._PaddingChar = reader.ReadChar();
            return this;
        }
    }
    
    /// <summary>
    ///            PadResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="PadResponse")]
    [global::System.ComponentModel.DescriptionAttribute("PadResponse")]
    public class PadResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PadResponse() {
        }
        
        private string _Padded;
        
        /// <summary>
        ///            Padded - The output string (with padding)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Identifies the resulting padded text string.")]
        public string Padded {
            get {
                return this._Padded;
            }
            set {
                this._Padded = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PadResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadResponse)(target));
            typedTarget._Padded = this._Padded;
        }
        
        /// <summary>
        ///Clones PadResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PadResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Padded == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Padded);
            }
        }
        
        /// <summary>
        ///Deserializes PadResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PadResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Padded = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            RemoveRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="RemoveRequest")]
    [global::System.ComponentModel.DescriptionAttribute("RemoveRequest")]
    public class RemoveRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RemoveRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to be changed
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string the characters will be removed from.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private int _StartIndex;
        
        /// <summary>
        ///            StartIndex - Starting position in the string
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The position to begin deleting characters.")]
        public int StartIndex {
            get {
                return this._StartIndex;
            }
            set {
                this._StartIndex = value;
            }
        }
        
        private int _Count;
        
        /// <summary>
        ///            Count - Number of characters to delete
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The number of characters to delete.")]
        public int Count {
            get {
                return this._Count;
            }
            set {
                this._Count = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RemoveRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest)(target));
            typedTarget._String = this._String;
            typedTarget._StartIndex = this._StartIndex;
            typedTarget._Count = this._Count;
        }
        
        /// <summary>
        ///Clones RemoveRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RemoveRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            writer.Write(this._StartIndex);
            writer.Write(this._Count);
        }
        
        /// <summary>
        ///Deserializes RemoveRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RemoveRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            this._StartIndex = reader.ReadInt32();
            this._Count = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            RemoveResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="RemoveResponse")]
    [global::System.ComponentModel.DescriptionAttribute("RemoveResponse")]
    public class RemoveResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public RemoveResponse() {
        }
        
        private string _Removed;
        
        /// <summary>
        ///            Removed - The output string (with text removed)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The resulting string after the characters have been removed.")]
        public string Removed {
            get {
                return this._Removed;
            }
            set {
                this._Removed = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current RemoveResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveResponse)(target));
            typedTarget._Removed = this._Removed;
        }
        
        /// <summary>
        ///Clones RemoveResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current RemoveResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Removed == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Removed);
            }
        }
        
        /// <summary>
        ///Deserializes RemoveResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized RemoveResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Removed = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ReplaceRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="ReplaceRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ReplaceRequest")]
    public class ReplaceRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReplaceRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to be changed
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to modify.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private string _OldValue;
        
        /// <summary>
        ///            OldValue - The search string (to be replaced)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text in the string to replace.")]
        public string OldValue {
            get {
                return this._OldValue;
            }
            set {
                this._OldValue = value;
            }
        }
        
        private string _NewValue;
        
        /// <summary>
        ///            NewValue - The replacement string
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text to replace all occurrences of OldValue.")]
        public string NewValue {
            get {
                return this._NewValue;
            }
            set {
                this._NewValue = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReplaceRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest)(target));
            typedTarget._String = this._String;
            typedTarget._OldValue = this._OldValue;
            typedTarget._NewValue = this._NewValue;
        }
        
        /// <summary>
        ///Clones ReplaceRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReplaceRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            if ((this._OldValue == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._OldValue);
            }
            if ((this._NewValue == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._NewValue);
            }
        }
        
        /// <summary>
        ///Deserializes ReplaceRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReplaceRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._OldValue = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._NewValue = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ReplaceResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="ReplaceResponse")]
    [global::System.ComponentModel.DescriptionAttribute("ReplaceResponse")]
    public class ReplaceResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReplaceResponse() {
        }
        
        private string _Replaced;
        
        /// <summary>
        ///            Replaced - The output string (after replacement)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The resulting text string after replacement(s).")]
        public string Replaced {
            get {
                return this._Replaced;
            }
            set {
                this._Replaced = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReplaceResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceResponse)(target));
            typedTarget._Replaced = this._Replaced;
        }
        
        /// <summary>
        ///Clones ReplaceResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReplaceResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Replaced == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Replaced);
            }
        }
        
        /// <summary>
        ///Deserializes ReplaceResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReplaceResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Replaced = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            SplitRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="SplitRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SplitRequest")]
    public class SplitRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SplitRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to split up
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to split into substrings.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private string _Separator;
        
        /// <summary>
        ///            Separator - The token that appears between substrings
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text to separate the strings.")]
        public string Separator {
            get {
                return this._Separator;
            }
            set {
                this._Separator = value;
            }
        }
        
        private int _Count;
        
        /// <summary>
        ///            Count - The number of substrings to extract
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The number of substrings to return.")]
        public int Count {
            get {
                return this._Count;
            }
            set {
                this._Count = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SplitRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest)(target));
            typedTarget._String = this._String;
            typedTarget._Separator = this._Separator;
            typedTarget._Count = this._Count;
        }
        
        /// <summary>
        ///Clones SplitRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SplitRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            if ((this._Separator == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Separator);
            }
            writer.Write(this._Count);
        }
        
        /// <summary>
        ///Deserializes SplitRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SplitRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Separator = reader.ReadString();
            }
            this._Count = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            SplitResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="SplitResponse")]
    [global::System.ComponentModel.DescriptionAttribute("SplitResponse")]
    public class SplitResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SplitResponse() {
        }
        
        private string[] _Strings;
        
        /// <summary>
        ///            Strings - Output array of strings
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The resulting text string array whose elements contain the substrings.")]
        public string[] Strings {
            get {
                return this._Strings;
            }
            set {
                this._Strings = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SplitResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitResponse)(target));
            if ((this._Strings != null)) {
                int count = this._Strings.Length;
                string[] tmp = new string[count];
                this._Strings.CopyTo(tmp, 0);
                typedTarget._Strings = tmp;
            }
        }
        
        /// <summary>
        ///Clones SplitResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SplitResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Strings == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(1);
                writer.Write(this._Strings.Length);
                for (int indexStrings = 0; (indexStrings < this._Strings.Length); indexStrings = (indexStrings + 1)) {
                    if ((this._Strings[indexStrings] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        writer.Write(this._Strings[indexStrings]);
                    }
                }
            }
        }
        
        /// <summary>
        ///Deserializes SplitResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SplitResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                int tmp0 = reader.ReadInt32();
                int count0 = reader.ReadInt32();
                this._Strings = new string[count0];
                for (int index = 0; (index < count0); index = (index + 1)) {
                    if ((reader.ReadByte() != 0)) {
                        this._Strings[index] = reader.ReadString();
                    }
                }
            }
            return this;
        }
    }
    
    /// <summary>
    ///            StartsWithRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="StartsWithRequest")]
    [global::System.ComponentModel.DescriptionAttribute("StartsWithRequest")]
    public class StartsWithRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public StartsWithRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to search
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to search.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private string _Query;
        
        /// <summary>
        ///            Query - The string to look for
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to search for.")]
        public string Query {
            get {
                return this._Query;
            }
            set {
                this._Query = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current StartsWithRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest)(target));
            typedTarget._String = this._String;
            typedTarget._Query = this._Query;
        }
        
        /// <summary>
        ///Clones StartsWithRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current StartsWithRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            if ((this._Query == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Query);
            }
        }
        
        /// <summary>
        ///Deserializes StartsWithRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized StartsWithRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._Query = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            StartsWithResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="StartsWithResponse")]
    [global::System.ComponentModel.DescriptionAttribute("StartsWithResponse")]
    public class StartsWithResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public StartsWithResponse() {
        }
        
        private bool _StartsWith;
        
        /// <summary>
        ///            StartsWith - Query string was found if true
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates if the Query text was found.")]
        public bool StartsWith {
            get {
                return this._StartsWith;
            }
            set {
                this._StartsWith = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current StartsWithResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithResponse)(target));
            typedTarget._StartsWith = this._StartsWith;
        }
        
        /// <summary>
        ///Clones StartsWithResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current StartsWithResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._StartsWith);
        }
        
        /// <summary>
        ///Deserializes StartsWithResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized StartsWithResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._StartsWith = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            SubStringRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="SubStringRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SubStringRequest")]
    public class SubStringRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SubStringRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to extract from
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to extract the substring text from.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private int _StartIndex;
        
        /// <summary>
        ///            StartIndex - Starting position in the string (zero based)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The character position to start the substring.")]
        public int StartIndex {
            get {
                return this._StartIndex;
            }
            set {
                this._StartIndex = value;
            }
        }
        
        private int _Length;
        
        /// <summary>
        ///            Length - The length of the substring to extract
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The number of characters (after the StartIndex) to include.")]
        public int Length {
            get {
                return this._Length;
            }
            set {
                this._Length = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SubStringRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest)(target));
            typedTarget._String = this._String;
            typedTarget._StartIndex = this._StartIndex;
            typedTarget._Length = this._Length;
        }
        
        /// <summary>
        ///Clones SubStringRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SubStringRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            writer.Write(this._StartIndex);
            writer.Write(this._Length);
        }
        
        /// <summary>
        ///Deserializes SubStringRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SubStringRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            this._StartIndex = reader.ReadInt32();
            this._Length = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            SubStringResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="SubStringResponse")]
    [global::System.ComponentModel.DescriptionAttribute("SubStringResponse")]
    public class SubStringResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SubStringResponse() {
        }
        
        private string _SubString;
        
        /// <summary>
        ///            SubString - The output substring
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The resulting substring text.")]
        public string SubString {
            get {
                return this._SubString;
            }
            set {
                this._SubString = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SubStringResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringResponse)(target));
            typedTarget._SubString = this._SubString;
        }
        
        /// <summary>
        ///Clones SubStringResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SubStringResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._SubString == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._SubString);
            }
        }
        
        /// <summary>
        ///Deserializes SubStringResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SubStringResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._SubString = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ToLowerRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="ToLowerRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ToLowerRequest")]
    public class ToLowerRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ToLowerRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to lowercase
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to convert.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ToLowerRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest)(target));
            typedTarget._String = this._String;
        }
        
        /// <summary>
        ///Clones ToLowerRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ToLowerRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
        }
        
        /// <summary>
        ///Deserializes ToLowerRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ToLowerRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ToLowerResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="ToLowerResponse")]
    [global::System.ComponentModel.DescriptionAttribute("ToLowerResponse")]
    public class ToLowerResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ToLowerResponse() {
        }
        
        private string _Lower;
        
        /// <summary>
        ///            Lower - The output (lowercase) string
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The converted text string.")]
        public string Lower {
            get {
                return this._Lower;
            }
            set {
                this._Lower = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ToLowerResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerResponse)(target));
            typedTarget._Lower = this._Lower;
        }
        
        /// <summary>
        ///Clones ToLowerResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ToLowerResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Lower == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Lower);
            }
        }
        
        /// <summary>
        ///Deserializes ToLowerResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ToLowerResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Lower = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ToUpperRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="ToUpperRequest")]
    [global::System.ComponentModel.DescriptionAttribute("ToUpperRequest")]
    public class ToUpperRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ToUpperRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to uppercase
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to convert.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ToUpperRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest)(target));
            typedTarget._String = this._String;
        }
        
        /// <summary>
        ///Clones ToUpperRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ToUpperRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
        }
        
        /// <summary>
        ///Deserializes ToUpperRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ToUpperRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            ToUpperResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="ToUpperResponse")]
    [global::System.ComponentModel.DescriptionAttribute("ToUpperResponse")]
    public class ToUpperResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ToUpperResponse() {
        }
        
        private string _Upper;
        
        /// <summary>
        ///            Upper - The output (uppercase) string
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The converted text string.")]
        public string Upper {
            get {
                return this._Upper;
            }
            set {
                this._Upper = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ToUpperResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperResponse)(target));
            typedTarget._Upper = this._Upper;
        }
        
        /// <summary>
        ///Clones ToUpperResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ToUpperResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Upper == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Upper);
            }
        }
        
        /// <summary>
        ///Deserializes ToUpperResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ToUpperResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Upper = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            TrimRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="TrimRequest")]
    [global::System.ComponentModel.DescriptionAttribute("TrimRequest")]
    public class TrimRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TrimRequest() {
        }
        
        private string _String;
        
        /// <summary>
        ///            String - The string to process
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The text string to remove spaces from.")]
        public string String {
            get {
                return this._String;
            }
            set {
                this._String = value;
            }
        }
        
        private bool _PreserveLeftSpace;
        
        /// <summary>
        ///            PreserveLeftSpace - Remove leading spaces if true
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether to remove leading spaces.")]
        public bool PreserveLeftSpace {
            get {
                return this._PreserveLeftSpace;
            }
            set {
                this._PreserveLeftSpace = value;
            }
        }
        
        private bool _PreserveRightSpace;
        
        /// <summary>
        ///            PreserveRightSpace - Remove trailing spaces if true
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates whether to remove trailing spaces.")]
        public bool PreserveRightSpace {
            get {
                return this._PreserveRightSpace;
            }
            set {
                this._PreserveRightSpace = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TrimRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest)(target));
            typedTarget._String = this._String;
            typedTarget._PreserveLeftSpace = this._PreserveLeftSpace;
            typedTarget._PreserveRightSpace = this._PreserveRightSpace;
        }
        
        /// <summary>
        ///Clones TrimRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TrimRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._String == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._String);
            }
            writer.Write(this._PreserveLeftSpace);
            writer.Write(this._PreserveRightSpace);
        }
        
        /// <summary>
        ///Deserializes TrimRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TrimRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._String = reader.ReadString();
            }
            this._PreserveLeftSpace = reader.ReadBoolean();
            this._PreserveRightSpace = reader.ReadBoolean();
            return this;
        }
    }
    
    /// <summary>
    ///            TrimResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/string.user.html", ElementName="TrimResponse")]
    [global::System.ComponentModel.DescriptionAttribute("TrimResponse")]
    public class TrimResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TrimResponse() {
        }
        
        private string _Trimmed;
        
        /// <summary>
        ///            Trimmed - The output (trimmed) string
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The resulting trimmed string.")]
        public string Trimmed {
            get {
                return this._Trimmed;
            }
            set {
                this._Trimmed = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TrimResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimResponse)(target));
            typedTarget._Trimmed = this._Trimmed;
        }
        
        /// <summary>
        ///Clones TrimResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimResponse target0 = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TrimResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Trimmed == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Trimmed);
            }
        }
        
        /// <summary>
        ///Deserializes TrimResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TrimResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Trimmed = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            IsNullOrEmpty - Operation to see if a string is empty (null means there is no string)
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) IsNullorEmpty")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates whether the specified string is a null reference.\nReturns true if the t" +
        "ext string is null or empty, else returns false.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class IsNullOrEmpty : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyResponse, global:: W3C.Soap.Fault>> {
        
        public IsNullOrEmpty() {
        }
        
        public IsNullOrEmpty(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest body) : 
                base(body) {
        }
        
        public IsNullOrEmpty(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Contains - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Contains")]
    [global::System.ComponentModel.DescriptionAttribute("Returns a value indicating whether the specified string occurs within this string" +
        ".\nReturns true if the searched for text is included in the string text, else fal" +
        "se.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Contains : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsResponse, global:: W3C.Soap.Fault>> {
        
        public Contains() {
        }
        
        public Contains(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest body) : 
                base(body) {
        }
        
        public Contains(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            EndsWith - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) EndsWith")]
    [global::System.ComponentModel.DescriptionAttribute("Determines whether the end of a string matches a specified string.\nReturns true i" +
        "f the string ends with the specified query text string,\n using the IgnoreCase co" +
        "mparison option.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class EndsWith : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithResponse, global:: W3C.Soap.Fault>> {
        
        public EndsWith() {
        }
        
        public EndsWith(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest body) : 
                base(body) {
        }
        
        public EndsWith(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            IndexOf - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) IndexOf")]
    [global::System.ComponentModel.DescriptionAttribute("Reports the index of the first occurrence of a string, or one or more characters," +
        " within this string.\nReturns the position of the first occurence of the Query te" +
        "xt in the String text.\nThe search starts at the StartIndex character position.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class IndexOf : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfResponse, global:: W3C.Soap.Fault>> {
        
        public IndexOf() {
        }
        
        public IndexOf(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest body) : 
                base(body) {
        }
        
        public IndexOf(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Insert - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Insert")]
    [global::System.ComponentModel.DescriptionAttribute("Inserts a specified text string at a specified index position of another string.\n" +
        "The text is inserted at the StartIndex.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Insert : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertResponse, global:: W3C.Soap.Fault>> {
        
        public Insert() {
        }
        
        public Insert(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest body) : 
                base(body) {
        }
        
        public Insert(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Join - Operation to combine array of strings with separator in between
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Join")]
    [global::System.ComponentModel.DescriptionAttribute("Concatenates the Separator text between each element of a specified string array." +
        "\nResults in a single concatenated string.\nOpposite of Split.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Join : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinResponse, global:: W3C.Soap.Fault>> {
        
        public Join() {
        }
        
        public Join(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest body) : 
                base(body) {
        }
        
        public Join(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            LastIndexOf - Operation to find a query string searching backwards
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) LastIndexOf")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the character position of the last occurrence of the specified Query text" +
        " within another string.\nThe search starts at the StartIndex character position.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LastIndexOf : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfResponse, global:: W3C.Soap.Fault>> {
        
        public LastIndexOf() {
        }
        
        public LastIndexOf(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest body) : 
                base(body) {
        }
        
        public LastIndexOf(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Pad - Operation to pad a string (on left and/or right) with a character
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Pad")]
    [global::System.ComponentModel.DescriptionAttribute("Aligns the String text, using the PaddingChar text,\nusing PaddingLeft for the amo" +
        "unt on left side and PaddingRight for the right side.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Pad : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadResponse, global:: W3C.Soap.Fault>> {
        
        public Pad() {
        }
        
        public Pad(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest body) : 
                base(body) {
        }
        
        public Pad(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Remove - Operation to delete a portion of a string
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Remove")]
    [global::System.ComponentModel.DescriptionAttribute("Deletes a specified number of characters from the text string, beginning at the S" +
        "tartIndex position.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Remove : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveResponse, global:: W3C.Soap.Fault>> {
        
        public Remove() {
        }
        
        public Remove(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest body) : 
                base(body) {
        }
        
        public Remove(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Replace - Operation to replace all occurrences of a string
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Replaces all occurrences of specified text in the text string, with the NewValue " +
        "text.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceResponse, global:: W3C.Soap.Fault>> {
        
        public Replace() {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest body) : 
                base(body) {
        }
        
        public Replace(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Split - Operation to split a string into an array based on a separator
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Split")]
    [global::System.ComponentModel.DescriptionAttribute("Returns a Strings text array from the elements of the String text, using the Sepa" +
        "rator text to delimit the elements.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Split : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitResponse, global:: W3C.Soap.Fault>> {
        
        public Split() {
        }
        
        public Split(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest body) : 
                base(body) {
        }
        
        public Split(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            StartsWith - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) StartsWith")]
    [global::System.ComponentModel.DescriptionAttribute("Returns true if the beginning of text matches the specified Query text, else retu" +
        "rns false.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class StartsWith : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithResponse, global:: W3C.Soap.Fault>> {
        
        public StartsWith() {
        }
        
        public StartsWith(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest body) : 
                base(body) {
        }
        
        public StartsWith(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            SubString - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Substring")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the text substring from String text.\nThe substring starts the StartIndex " +
        "character position\nand uses Length as the length.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SubString : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringResponse, global:: W3C.Soap.Fault>> {
        
        public SubString() {
        }
        
        public SubString(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest body) : 
                base(body) {
        }
        
        public SubString(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ToLower - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ToLower")]
    [global::System.ComponentModel.DescriptionAttribute("Returns a copy of the String text converted to lowercase.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ToLower : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerResponse, global:: W3C.Soap.Fault>> {
        
        public ToLower() {
        }
        
        public ToLower(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest body) : 
                base(body) {
        }
        
        public ToLower(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ToUpper - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) ToUpper")]
    [global::System.ComponentModel.DescriptionAttribute("Returns a copy of the String text converted to uppercase.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ToUpper : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperResponse, global:: W3C.Soap.Fault>> {
        
        public ToUpper() {
        }
        
        public ToUpper(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest body) : 
                base(body) {
        }
        
        public ToUpper(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Trim - Operation to remove whitespace from a string
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) Trim")]
    [global::System.ComponentModel.DescriptionAttribute("Returns a text string after removing all leading (using PreserveLeftSpace) and tr" +
        "ailing (using PreserveRightSpace) white-space characters from the String text.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Trim : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimResponse, global:: W3C.Soap.Fault>> {
        
        public Trim() {
        }
        
        public Trim(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest body) : 
                base(body) {
        }
        
        public Trim(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            String Service Operations PortSet
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("String Service Operations PortSet")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class StringOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper, global:: Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim> {
        
        public StringOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyResponse, global:: W3C.Soap.Fault> IsNullOrEmpty() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice IsNullOrEmpty(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyResponse, global:: W3C.Soap.Fault> IsNullOrEmpty(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice IsNullOrEmpty(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmptyRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IsNullOrEmpty(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsResponse, global:: W3C.Soap.Fault> Contains() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Contains(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsResponse, global:: W3C.Soap.Fault> Contains(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Contains(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ContainsRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Contains(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithResponse, global:: W3C.Soap.Fault> EndsWith() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice EndsWith(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithResponse, global:: W3C.Soap.Fault> EndsWith(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice EndsWith(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWithRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.EndsWith(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfResponse, global:: W3C.Soap.Fault> IndexOf() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice IndexOf(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfResponse, global:: W3C.Soap.Fault> IndexOf(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice IndexOf(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOfRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.IndexOf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertResponse, global:: W3C.Soap.Fault> Insert() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Insert(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertResponse, global:: W3C.Soap.Fault> Insert(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Insert(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.InsertRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Insert(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinResponse, global:: W3C.Soap.Fault> Join() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Join(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinResponse, global:: W3C.Soap.Fault> Join(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Join(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.JoinRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Join(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfResponse, global:: W3C.Soap.Fault> LastIndexOf() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LastIndexOf(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfResponse, global:: W3C.Soap.Fault> LastIndexOf(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LastIndexOf(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOfRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.LastIndexOf(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadResponse, global:: W3C.Soap.Fault> Pad() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Pad(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadResponse, global:: W3C.Soap.Fault> Pad(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Pad(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.PadRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Pad(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveResponse, global:: W3C.Soap.Fault> Remove() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Remove(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveResponse, global:: W3C.Soap.Fault> Remove(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Remove(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.RemoveRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Remove(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceResponse, global:: W3C.Soap.Fault> Replace() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceResponse, global:: W3C.Soap.Fault> Replace(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Replace(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ReplaceRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Replace(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitResponse, global:: W3C.Soap.Fault> Split() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Split(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitResponse, global:: W3C.Soap.Fault> Split(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Split(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SplitRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Split(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithResponse, global:: W3C.Soap.Fault> StartsWith() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice StartsWith(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithResponse, global:: W3C.Soap.Fault> StartsWith(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice StartsWith(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWithRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StartsWith(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringResponse, global:: W3C.Soap.Fault> SubString() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SubString(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringResponse, global:: W3C.Soap.Fault> SubString(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SubString(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubStringRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.SubString(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerResponse, global:: W3C.Soap.Fault> ToLower() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ToLower(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerResponse, global:: W3C.Soap.Fault> ToLower(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ToLower(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLowerRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToLower(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperResponse, global:: W3C.Soap.Fault> ToUpper() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ToUpper(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperResponse, global:: W3C.Soap.Fault> ToUpper(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ToUpper(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpperRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.ToUpper(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimResponse, global:: W3C.Soap.Fault> Trim() {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest();
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Trim(out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim operation) {
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimResponse, global:: W3C.Soap.Fault> Trim(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest();
            }
            global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Trim(global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest body, out global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.TrimRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.Trim(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            StringService - Handles Text (String) functions
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides functions that operate on text strings.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Text Functions")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/10/string.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/10/string.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/10/string.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.StringOperations = new global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StringOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.StringOperations, "http://schemas.microsoft.com/robotics/2006/10/string.user.html", "StringOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.StringHelper.Proxy.StringOperations StringOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.Timer.Proxy {
    
    
    /// <summary>
    ///            Timer State
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html", ElementName="TimerState")]
    [global::System.ComponentModel.DescriptionAttribute("Timer State")]
    public class TimerState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TimerState() {
        }
        
        private int _Timeout;
        
        /// <summary>
        ///            Timeout - Interval in milliseconds
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the timeout interval (in ms).")]
        public int Timeout {
            get {
                return this._Timeout;
            }
            set {
                this._Timeout = value;
            }
        }
        
        private global::System.DateTime _Expires;
        
        /// <summary>
        ///            DateTime - Time when interval expires
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates when the timeout interval expires.")]
        public global::System.DateTime Expires {
            get {
                return this._Expires;
            }
            set {
                this._Expires = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TimerState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerState typedTarget = ((global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerState)(target));
            typedTarget._Timeout = this._Timeout;
            typedTarget._Expires = this._Expires;
        }
        
        /// <summary>
        ///Clones TimerState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerState target0 = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TimerState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Timeout);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Expires, writer);
        }
        
        /// <summary>
        ///Deserializes TimerState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TimerState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Timeout = reader.ReadInt32();
            this._Expires = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            FireTimerRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html", ElementName="FireTimerRequest")]
    [global::System.ComponentModel.DescriptionAttribute("FireTimerRequest")]
    public class FireTimerRequest : global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FireTimerRequest() {
        }
        
        private global::System.DateTime _Fired;
        
        /// <summary>
        ///            Fired - Timestamp when the timer fired
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the time at which the timer fired.")]
        public global::System.DateTime Fired {
            get {
                return this._Fired;
            }
            set {
                this._Fired = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FireTimerRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest)(target));
            typedTarget._Fired = this._Fired;
        }
        
        /// <summary>
        ///Clones FireTimerRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest target0 = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FireTimerRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Fired, writer);
        }
        
        /// <summary>
        ///Deserializes FireTimerRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FireTimerRequest</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._Fired = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            SetTimerRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html", ElementName="SetTimerRequest")]
    [global::System.ComponentModel.DescriptionAttribute("SetTimerRequest")]
    public class SetTimerRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SetTimerRequest() {
        }
        
        private int _Interval;
        
        /// <summary>
        ///            Interval - Time interval in milliseconds
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the timeout interval setting (in ms).")]
        public int Interval {
            get {
                return this._Interval;
            }
            set {
                this._Interval = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SetTimerRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest)(target));
            typedTarget._Interval = this._Interval;
        }
        
        /// <summary>
        ///Clones SetTimerRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest target0 = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SetTimerRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Interval);
        }
        
        /// <summary>
        ///Deserializes SetTimerRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SetTimerRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Interval = reader.ReadInt32();
            return this;
        }
    }
    
    /// <summary>
    ///            TickRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html", ElementName="TickRequest")]
    [global::System.ComponentModel.DescriptionAttribute("TickRequest")]
    public class TickRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TickRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current TickRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest)(target));
        }
        
        /// <summary>
        ///Clones TickRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest target0 = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TickRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes TickRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TickRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            TimeRequest - Ask for Date/Time
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html", ElementName="TimeRequest")]
    [global::System.ComponentModel.DescriptionAttribute("TimeRequest - Ask for Date/Time")]
    public class TimeRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TimeRequest() {
        }
        
        /// <summary>
        ///Copies the data member values of the current TimeRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest)(target));
        }
        
        /// <summary>
        ///Clones TimeRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest target0 = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TimeRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
        }
        
        /// <summary>
        ///Deserializes TimeRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TimeRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            return this;
        }
    }
    
    /// <summary>
    ///            TimeResponse
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/08/timer.user.html", ElementName="TimeResponse")]
    [global::System.ComponentModel.DescriptionAttribute("TimeResponse")]
    public class TimeResponse : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public TimeResponse() {
        }
        
        private global::System.DateTime _Time;
        
        /// <summary>
        ///            Time - Current Date/Time
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Indicates the current time.")]
        public global::System.DateTime Time {
            get {
                return this._Time;
            }
            set {
                this._Time = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current TimeResponse to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeResponse typedTarget = ((global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeResponse)(target));
            typedTarget._Time = this._Time;
        }
        
        /// <summary>
        ///Clones TimeResponse
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeResponse target0 = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeResponse();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current TimeResponse to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.SerializeDateTime(this._Time, writer);
        }
        
        /// <summary>
        ///Deserializes TimeResponse
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized TimeResponse</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Time = global::Microsoft.Dss.Services.Serializer.BinarySerializationHelper.DeserializeDateTime(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Get - Gets the state
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Get the timer\'s current state.\nThis includes the currently set timeout value (if " +
        "any) and the expected time at which it will fire.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            TimerComplete - Notification that timer has expired
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) TimerComplete")]
    [global::System.ComponentModel.DescriptionAttribute("Indicates that the timer (set with SetTimer) has elapsed.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class FireTimer : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public FireTimer() {
        }
        
        public FireTimer(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest body) : 
                base(body) {
        }
        
        public FireTimer(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            SetTimer - Operation
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute(@"Sets the timer in milliseconds or indicates the timer has been set.
The TimerComplete notification is sent after that interval has passed
Setting a timer before the previous timer has fired superceds the previous timer.
Setting a timer to 0 will stop any existing timer.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SetTimer : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public SetTimer() {
        }
        
        public SetTimer(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body) : 
                base(body) {
        }
        
        public SetTimer(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Tick - Notification (once a second)
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Sends a notification every second.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Tick : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public Tick() {
        }
        
        public Tick(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest body) : 
                base(body) {
        }
        
        public Tick(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Wait - Wait for specified time interval
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Wait for the specified interval in milliseconds.\nNote: This is intended for inter" +
        "vals of less than 60 seconds only,\nfor longer intervals use SetTimer.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Wait : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public Wait() {
        }
        
        public Wait(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body) : 
                base(body) {
        }
        
        public Wait(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Subscribe - Adds subscriptions
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Subscribe - Adds subscriptions")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Time - Gets Date/Time
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) GetCurrentTime")]
    [global::System.ComponentModel.DescriptionAttribute("Returns the current time.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Time : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeResponse, global:: W3C.Soap.Fault>> {
        
        public Time() {
        }
        
        public Time(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest body) : 
                base(body) {
        }
        
        public Time(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeResponse, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Timer Service Operations PortSet
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Timer Service Operations PortSet")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class TimerOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.Timer.Proxy.Get, global:: Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer, global:: Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer, global:: Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick, global:: Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait, global:: Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe, global:: Microsoft.Robotics.Services.Sample.Timer.Proxy.Time> {
        
        public TimerOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Get operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> FireTimer() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest();
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FireTimer(out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer operation) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> FireTimer(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice FireTimer(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest body, out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimerRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.FireTimer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetTimer() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetTimer(out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer operation) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> SetTimer(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice SetTimer(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body, out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimer(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Tick() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest();
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Tick(out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick operation) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Tick(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Tick(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest body, out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TickRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Tick(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Wait() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Wait(out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait operation) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> Wait(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Wait(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest body, out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.SetTimerRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Wait(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeResponse, global:: W3C.Soap.Fault> Time() {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest();
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Time operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Time(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Time(out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Time operation) {
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Time(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeResponse, global:: W3C.Soap.Fault> Time(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest();
            }
            global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Time operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Time(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Time(global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest body, out global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Time operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimeRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.Time(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            TimerService - Time delay operations
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides simple timer support.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Timer")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/08/timer.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/timer.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/08/timer.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.TimerOperations = new global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.TimerOperations, "http://schemas.microsoft.com/robotics/2006/08/timer.user.html", "TimerOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.Timer.Proxy.TimerOperations TimerOperations;
    }
}
namespace Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy {
    
    
    /// <summary>
    ///            LaunchUrlRequest
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/urllauncher.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2006/10/urllauncher.user.html", ElementName="LaunchUrlRequest")]
    [global::System.ComponentModel.DescriptionAttribute("LaunchUrlRequest")]
    public class LaunchUrlRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public LaunchUrlRequest() {
        }
        
        private string _Url;
        
        /// <summary>
        ///            Url - The URL to open in the browser
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Specifies the URL to open.")]
        public string Url {
            get {
                return this._Url;
            }
            set {
                this._Url = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current LaunchUrlRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest typedTarget = ((global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest)(target));
            typedTarget._Url = this._Url;
        }
        
        /// <summary>
        ///Clones LaunchUrlRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest target0 = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current LaunchUrlRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            if ((this._Url == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._Url);
            }
        }
        
        /// <summary>
        ///Deserializes LaunchUrlRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized LaunchUrlRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            if ((reader.ReadByte() != 0)) {
                this._Url = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            LaunchUrl - Operation
    ///            </summary>
    [global::System.ComponentModel.DisplayNameAttribute("(User) LaunchURL")]
    [global::System.ComponentModel.DescriptionAttribute("Display a browser window for the specified URL.")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class LaunchUrl : global::Microsoft.Dss.ServiceModel.Dssp.Submit<global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault>> {
        
        public LaunchUrl() {
        }
        
        public LaunchUrl(global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest body) : 
                base(body) {
        }
        
        public LaunchUrl(global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Url Launcher Sevice Operations PortSet
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Url Launcher Sevice Operations PortSet")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class UrlLauncherOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl> {
        
        public UrlLauncherOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> LaunchUrl() {
            global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest body = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest();
            global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl operation = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LaunchUrl(out global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl operation) {
            global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest body = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest();
            operation = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultSubmitResponseType, global:: W3C.Soap.Fault> LaunchUrl(global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest();
            }
            global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl operation = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice LaunchUrl(global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest body, out global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrlRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.LaunchUrl(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            UrlLauncherService - Launches a web browser with specified URL
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Opens a specified URL in a browser window.")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) URL Launcher")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2006/10/urllauncher.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/10/urllauncher.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2006/10/urllauncher.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.UrlLauncherOperations = new global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.UrlLauncherOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.UrlLauncherOperations, "http://schemas.microsoft.com/robotics/2006/10/urllauncher.user.html", "UrlLauncherOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sample.UrlLauncher.Proxy.UrlLauncherOperations UrlLauncherOperations;
    }
}
