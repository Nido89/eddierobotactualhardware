//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.SimFourByFour.Y2007.M10, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f" +
    "9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy {
    
    
    /// <summary>
    ///            SimulatedFourByFourDrive state
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html", ElementName="SimulatedFourByFourState")]
    [global::System.ComponentModel.DescriptionAttribute("SimulatedFourByFourDrive state")]
    public class SimulatedFourByFourState : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SimulatedFourByFourState() {
        }
        
        private float _DistanceBetweenWheels;
        
        /// <summary>
        ///            The lateral distance between the wheels
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The lateral distance between the wheels")]
        public float DistanceBetweenWheels {
            get {
                return this._DistanceBetweenWheels;
            }
            set {
                this._DistanceBetweenWheels = value;
            }
        }
        
        private float _WheelBase;
        
        /// <summary>
        ///            The longitudinal distance between the front and rear axles
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The longitudinal distance between the front and rear axles")]
        public float WheelBase {
            get {
                return this._WheelBase;
            }
            set {
                this._WheelBase = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest _DriveRequest;
        
        /// <summary>
        ///            The parameters of the last processed drive request
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The parameters of the last processed drive request")]
        public global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest DriveRequest {
            get {
                return this._DriveRequest;
            }
            set {
                this._DriveRequest = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current SimulatedFourByFourState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimulatedFourByFourState typedTarget = ((global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimulatedFourByFourState)(target));
            typedTarget._DistanceBetweenWheels = this._DistanceBetweenWheels;
            typedTarget._WheelBase = this._WheelBase;
            if ((this._DriveRequest != null)) {
                global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest tmp = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest();
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveRequest)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._DriveRequest = tmp;
            }
        }
        
        /// <summary>
        ///Clones SimulatedFourByFourState
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimulatedFourByFourState target0 = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimulatedFourByFourState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SimulatedFourByFourState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._DistanceBetweenWheels);
            writer.Write(this._WheelBase);
            if ((this._DriveRequest == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveRequest)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes SimulatedFourByFourState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SimulatedFourByFourState</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._DistanceBetweenWheels = reader.ReadSingle();
            this._WheelBase = reader.ReadSingle();
            if ((reader.ReadByte() != 0)) {
                this._DriveRequest = ((global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Used for issuing a drive request to the 4x4 service
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html", ElementName="DriveRequest")]
    [global::System.ComponentModel.DescriptionAttribute("Used for issuing a drive request to the 4x4 service")]
    public class DriveRequest : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public DriveRequest() {
        }
        
        public DriveRequest(float power, float steeringAngle) {
            this._Power = power;
            this._SteeringAngle = steeringAngle;
        }
        
        private float _Power;
        
        /// <summary>
        ///            The power with which to drive, from -1 (full reverse) to +1 (full forwards)
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The power with which to drive, from -1 (full reverse) to +1 (full forwards)")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=1)]
        public float Power {
            get {
                return this._Power;
            }
            set {
                this._Power = value;
            }
        }
        
        private float _SteeringAngle;
        
        /// <summary>
        ///            The steering angle, in degrees, to turn. This is the angle of a tangent through the front axle center line.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("The steering angle, in degrees, to turn. This is the angle of a tangent through t" +
            "he front axle center line.")]
        [global::Microsoft.Dss.Core.Attributes.DataMemberConstructorAttribute(Order=2)]
        public float SteeringAngle {
            get {
                return this._SteeringAngle;
            }
            set {
                this._SteeringAngle = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current DriveRequest to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest typedTarget = ((global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest)(target));
            typedTarget._Power = this._Power;
            typedTarget._SteeringAngle = this._SteeringAngle;
        }
        
        /// <summary>
        ///Clones DriveRequest
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest target0 = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current DriveRequest to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._Power);
            writer.Write(this._SteeringAngle);
        }
        
        /// <summary>
        ///Deserializes DriveRequest
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized DriveRequest</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._Power = reader.ReadSingle();
            this._SteeringAngle = reader.ReadSingle();
            return this;
        }
    }
    
    /// <summary>
    ///            Base 4x4 entity class
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html", ElementName="FourWheelDriveEntity")]
    [global::System.ComponentModel.DescriptionAttribute("Base 4x4 entity class")]
    [global::System.ComponentModel.BrowsableAttribute(false)]
    public class FourWheelDriveEntity : global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public FourWheelDriveEntity() {
        }
        
        private string _FrontWheelMesh;
        
        /// <summary>
        ///            Mesh file to use for front wheels
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Mesh file to use for front wheels")]
        public string FrontWheelMesh {
            get {
                return this._FrontWheelMesh;
            }
            set {
                this._FrontWheelMesh = value;
            }
        }
        
        private string _RearWheelMesh;
        
        /// <summary>
        ///            Mesh file to use for rear wheels
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Mesh file to use for rear wheels")]
        public string RearWheelMesh {
            get {
                return this._RearWheelMesh;
            }
            set {
                this._RearWheelMesh = value;
            }
        }
        
        private bool _IsEnabled;
        
        /// <summary>
        ///            True if the drive mechanism is enabled.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("True if the drive mechanism is enabled.")]
        public bool IsEnabled {
            get {
                return this._IsEnabled;
            }
            set {
                this._IsEnabled = value;
            }
        }
        
        private float _MotorTorqueScaling;
        
        /// <summary>
        ///            Scaling factor to apply to motor torgue requests.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Scaling factor to apply to motor torgue requests.")]
        public float MotorTorqueScaling {
            get {
                return this._MotorTorqueScaling;
            }
            set {
                this._MotorTorqueScaling = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity _RightFrontWheel;
        
        /// <summary>
        ///            Right front wheel child entity.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Right front wheel child entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity RightFrontWheel {
            get {
                return this._RightFrontWheel;
            }
            set {
                this._RightFrontWheel = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity _LeftFrontWheel;
        
        /// <summary>
        ///            Left front wheel child entity.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Left front wheel child entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity LeftFrontWheel {
            get {
                return this._LeftFrontWheel;
            }
            set {
                this._LeftFrontWheel = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity _RightRearWheel;
        
        /// <summary>
        ///            Right rear wheel child entity.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Right rear wheel child entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity RightRearWheel {
            get {
                return this._RightRearWheel;
            }
            set {
                this._RightRearWheel = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity _LeftRearWheel;
        
        /// <summary>
        ///            Left rear wheel child entity.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Left rear wheel child entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity LeftRearWheel {
            get {
                return this._LeftRearWheel;
            }
            set {
                this._LeftRearWheel = value;
            }
        }
        
        private global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape> _ChassisShape;
        
        /// <summary>
        ///            Chassis physics shapes.
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Chassis physics shapes.")]
        public global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape> ChassisShape {
            get {
                return this._ChassisShape;
            }
            set {
                this._ChassisShape = value;
            }
        }
        
        private float _DistanceBetweenWheels;
        
        /// <summary>
        ///            Distance between wheels on the same axle
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Distance between wheels on the same axle")]
        public float DistanceBetweenWheels {
            get {
                return this._DistanceBetweenWheels;
            }
            set {
                this._DistanceBetweenWheels = value;
            }
        }
        
        private float _WheelBase;
        
        /// <summary>
        ///            Distance between the front and rear axles
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Distance between the front and rear axles")]
        public float WheelBase {
            get {
                return this._WheelBase;
            }
            set {
                this._WheelBase = value;
            }
        }
        
        private float _SuspensionTravel;
        
        /// <summary>
        ///            Maximum suspension travel in the -Y axis direction
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Maximum suspension travel in the -Y axis direction")]
        public float SuspensionTravel {
            get {
                return this._SuspensionTravel;
            }
            set {
                this._SuspensionTravel = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current FourWheelDriveEntity to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.FourWheelDriveEntity typedTarget = ((global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.FourWheelDriveEntity)(target));
            typedTarget._FrontWheelMesh = this._FrontWheelMesh;
            typedTarget._RearWheelMesh = this._RearWheelMesh;
            typedTarget._IsEnabled = this._IsEnabled;
            typedTarget._MotorTorqueScaling = this._MotorTorqueScaling;
            if ((this._RightFrontWheel != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity tmp = new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightFrontWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._RightFrontWheel = tmp;
            }
            if ((this._LeftFrontWheel != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity tmp0 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftFrontWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._LeftFrontWheel = tmp0;
            }
            if ((this._RightRearWheel != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity tmp1 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightRearWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._RightRearWheel = tmp1;
            }
            if ((this._LeftRearWheel != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity tmp2 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftRearWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._LeftRearWheel = tmp2;
            }
            if ((this._ChassisShape != null)) {
                int count = this._ChassisShape.Count;
                global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape> tmp3 = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape>(count);
                for (int index = 0; (index < count); index = (index + 1)) {
                    global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape tmp4 = default(global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape);
                    if ((this._ChassisShape[index] != null)) {
                        global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape tmp5 = new global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape();
                        ((Microsoft.Dss.Core.IDssSerializable)(this._ChassisShape[index])).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp5)));
                        tmp4 = tmp5;
                    }
                    tmp3.Add(tmp4);
                }
                typedTarget._ChassisShape = tmp3;
            }
            typedTarget._DistanceBetweenWheels = this._DistanceBetweenWheels;
            typedTarget._WheelBase = this._WheelBase;
            typedTarget._SuspensionTravel = this._SuspensionTravel;
        }
        
        /// <summary>
        ///Clones FourWheelDriveEntity
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.FourWheelDriveEntity target0 = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.FourWheelDriveEntity();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current FourWheelDriveEntity to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._FrontWheelMesh == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._FrontWheelMesh);
            }
            if ((this._RearWheelMesh == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._RearWheelMesh);
            }
            writer.Write(this._IsEnabled);
            writer.Write(this._MotorTorqueScaling);
            if ((this._RightFrontWheel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightFrontWheel)).Serialize(writer);
            }
            if ((this._LeftFrontWheel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftFrontWheel)).Serialize(writer);
            }
            if ((this._RightRearWheel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightRearWheel)).Serialize(writer);
            }
            if ((this._LeftRearWheel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftRearWheel)).Serialize(writer);
            }
            if ((this._ChassisShape == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._ChassisShape.Count);
                for (int indexChassisShape = 0; (indexChassisShape < this._ChassisShape.Count); indexChassisShape = (indexChassisShape + 1)) {
                    if ((this._ChassisShape[indexChassisShape] == null)) {
                        writer.Write(((byte)(0)));
                    }
                    else {
                        writer.Write(((byte)(1)));
                        ((Microsoft.Dss.Core.IDssSerializable)(this._ChassisShape[indexChassisShape])).Serialize(writer);
                    }
                }
            }
            writer.Write(this._DistanceBetweenWheels);
            writer.Write(this._WheelBase);
            writer.Write(this._SuspensionTravel);
        }
        
        /// <summary>
        ///Deserializes FourWheelDriveEntity
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized FourWheelDriveEntity</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                this._FrontWheelMesh = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._RearWheelMesh = reader.ReadString();
            }
            this._IsEnabled = reader.ReadBoolean();
            this._MotorTorqueScaling = reader.ReadSingle();
            if ((reader.ReadByte() != 0)) {
                this._RightFrontWheel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._LeftFrontWheel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._RightRearWheel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._LeftRearWheel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                int count0 = reader.ReadInt32();
                this._ChassisShape = new global::System.Collections.Generic.List<global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape>(count0);
                for (int index0 = 0; (index0 < count0); index0 = (index0 + 1)) {
                    this._ChassisShape.Add(default(global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape));
                    if ((reader.ReadByte() != 0)) {
                        this._ChassisShape[index0] = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape())).Deserialize(reader)));
                    }
                }
            }
            this._DistanceBetweenWheels = reader.ReadSingle();
            this._WheelBase = reader.ReadSingle();
            this._SuspensionTravel = reader.ReadSingle();
            return this;
        }
    }
    
    /// <summary>
    ///            SimpleFourByFour is a simple 4x4 entity derived from FourWheelDriveEntity
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html", ElementName="SimpleFourByFour")]
    [global::System.ComponentModel.DescriptionAttribute("SimpleFourByFour is a simple 4x4 entity derived from FourWheelDriveEntity")]
    public class SimpleFourByFour : global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.FourWheelDriveEntity, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SimpleFourByFour() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SimpleFourByFour to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimpleFourByFour typedTarget = ((global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimpleFourByFour)(target));
        }
        
        /// <summary>
        ///Clones SimpleFourByFour
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimpleFourByFour target0 = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimpleFourByFour();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SimpleFourByFour to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes SimpleFourByFour
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SimpleFourByFour</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Sample4x4Vehicle is the entity used in this sample
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html", ElementName="Sample4x4Vehicle")]
    [global::System.ComponentModel.DescriptionAttribute("Sample4x4Vehicle is the entity used in this sample")]
    public class Sample4x4Vehicle : global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.FourWheelDriveEntity, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Sample4x4Vehicle() {
        }
        
        /// <summary>
        ///Copies the data member values of the current Sample4x4Vehicle to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Sample4x4Vehicle typedTarget = ((global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Sample4x4Vehicle)(target));
        }
        
        /// <summary>
        ///Clones Sample4x4Vehicle
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Sample4x4Vehicle target0 = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Sample4x4Vehicle();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Sample4x4Vehicle to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes Sample4x4Vehicle
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Sample4x4Vehicle</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Message for getting SimulatedFourByFourDrive service state
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Message for getting SimulatedFourByFourDrive service state")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimulatedFourByFourState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimulatedFourByFourState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Message for driving SimulatedFourByFourDrive service 
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Message for driving SimulatedFourByFourDrive service")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Drive : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public Drive() {
        }
        
        public Drive(global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest body) : 
                base(body) {
        }
        
        public Drive(global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            Service operations for the SimulatedFourByFourDrive service
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Service operations for the SimulatedFourByFourDrive service")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class SimToy5Operations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get, global:: Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive> {
        
        public SimToy5Operations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimulatedFourByFourState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get operation = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimulatedFourByFourState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get operation = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Drive(float power, float steeringAngle) {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest body = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest(power, steeringAngle);
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive operation = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Drive(float power, float steeringAngle, out global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive operation) {
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest body = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest(power, steeringAngle);
            operation = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> Drive(global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest();
            }
            global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive operation = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Drive(global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest body, out global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.DriveRequest();
            }
            operation = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.Drive(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            A simulated four wheel drive service for simulating off-road vehicles
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("A Simulated Four wheel drive service")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Simulated Four By Four Drive Service")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SimToy5Operations = new global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimToy5Operations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SimToy5Operations, "http://schemas.microsoft.com/robotics/2007/10/simulatedfourbyfourdrive.user.html", "SimToy5Operations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Samples.SimulatedFourByFourDrive.Proxy.SimToy5Operations SimToy5Operations;
    }
}
