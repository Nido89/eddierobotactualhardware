//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.ReferencePlatform2011.Simulation.Y2011.M08, Version=0.0.0.0, Culture=neutral" +
    ", PublicKeyToken=7f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy {
    
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2009/03/simulatedreferenceplatform2011.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2009/03/simulatedreferenceplatform2011.user.html", ElementName="ReferencePlatform2011State")]
    public class ReferencePlatform2011State : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReferencePlatform2011State() {
        }
        
        private global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 _InitialPosition;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3 InitialPosition {
            get {
                return this._InitialPosition;
            }
            set {
                this._InitialPosition = value;
            }
        }
        
        private string _EntityName;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public string EntityName {
            get {
                return this._EntityName;
            }
            set {
                this._EntityName = value;
            }
        }
        
        private global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState _DriveState;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState DriveState {
            get {
                return this._DriveState;
            }
            set {
                this._DriveState = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReferencePlatform2011State to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011State typedTarget = ((global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011State)(target));
            typedTarget._InitialPosition = this._InitialPosition;
            typedTarget._EntityName = this._EntityName;
            if ((this._DriveState != null)) {
                global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState tmp = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState();
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveState)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._DriveState = tmp;
            }
        }
        
        /// <summary>
        ///Clones ReferencePlatform2011State
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011State target0 = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011State();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReferencePlatform2011State to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            ((Microsoft.Dss.Core.IDssSerializable)(this._InitialPosition)).Serialize(writer);
            if ((this._EntityName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._EntityName);
            }
            if ((this._DriveState == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._DriveState)).Serialize(writer);
            }
        }
        
        /// <summary>
        ///Deserializes ReferencePlatform2011State
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReferencePlatform2011State</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._InitialPosition = ((global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.PhysicalModel.Proxy.Vector3())).Deserialize(reader)));
            if ((reader.ReadByte() != 0)) {
                this._EntityName = reader.ReadString();
            }
            if ((reader.ReadByte() != 0)) {
                this._DriveState = ((global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Services.Drive.Proxy.DriveDifferentialTwoWheelState())).Deserialize(reader)));
            }
            return this;
        }
    }
    
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/2009/03/simulatedreferenceplatform2011.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/2009/03/simulatedreferenceplatform2011.user.html", ElementName="ReferencePlatform2011Entity")]
    public class ReferencePlatform2011Entity : global::Microsoft.Robotics.Simulation.Engine.Proxy.VisualEntity, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public ReferencePlatform2011Entity() {
        }
        
        private bool _IsEnabled;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Gets or sets a value indicating whether the drive mechanism is enabled.")]
        public bool IsEnabled {
            get {
                return this._IsEnabled;
            }
            set {
                this._IsEnabled = value;
            }
        }
        
        private float _MotorTorqueScaling;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Scaling factor to apply to motor torgue requests.")]
        public float MotorTorqueScaling {
            get {
                return this._MotorTorqueScaling;
            }
            set {
                this._MotorTorqueScaling = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity _RightWheel;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Right wheel child entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity RightWheel {
            get {
                return this._RightWheel;
            }
            set {
                this._RightWheel = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity _LeftWheel;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Left wheel child entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity LeftWheel {
            get {
                return this._LeftWheel;
            }
            set {
                this._LeftWheel = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape _ChassisShape;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Chassis physics shapes.")]
        public global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape ChassisShape {
            get {
                return this._ChassisShape;
            }
            set {
                this._ChassisShape = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape _CasterWheelShape;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Caster wheel physics shape.")]
        public global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape CasterWheelShape {
            get {
                return this._CasterWheelShape;
            }
            set {
                this._CasterWheelShape = value;
            }
        }
        
        private double _RotateDegreesAngleThreshold;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Threshold for stopping scheduled rotation")]
        public double RotateDegreesAngleThreshold {
            get {
                return this._RotateDegreesAngleThreshold;
            }
            set {
                this._RotateDegreesAngleThreshold = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape _FrontWheelShape;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Front wheel physics shape.")]
        public global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape FrontWheelShape {
            get {
                return this._FrontWheelShape;
            }
            set {
                this._FrontWheelShape = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape _RearWheelShape;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("rear wheel physics shape.")]
        public global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape RearWheelShape {
            get {
                return this._RearWheelShape;
            }
            set {
                this._RearWheelShape = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.KinectEntity _Kinect;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Kinect entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.KinectEntity Kinect {
            get {
                return this._Kinect;
            }
            set {
                this._Kinect = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity _LeftSonar;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Left Sonar entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity LeftSonar {
            get {
                return this._LeftSonar;
            }
            set {
                this._LeftSonar = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity _RightSonar;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Right Sonar entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity RightSonar {
            get {
                return this._RightSonar;
            }
            set {
                this._RightSonar = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity _FrontLeftIR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("IR entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity FrontLeftIR {
            get {
                return this._FrontLeftIR;
            }
            set {
                this._FrontLeftIR = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity _FrontMiddleIR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("IR entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity FrontMiddleIR {
            get {
                return this._FrontMiddleIR;
            }
            set {
                this._FrontMiddleIR = value;
            }
        }
        
        private global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity _FrontRightIR;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("IR entity.")]
        public global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity FrontRightIR {
            get {
                return this._FrontRightIR;
            }
            set {
                this._FrontRightIR = value;
            }
        }
        
        private float _TimeoutSeconds;
        
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        public float TimeoutSeconds {
            get {
                return this._TimeoutSeconds;
            }
            set {
                this._TimeoutSeconds = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current ReferencePlatform2011Entity to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011Entity typedTarget = ((global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011Entity)(target));
            typedTarget._IsEnabled = this._IsEnabled;
            typedTarget._MotorTorqueScaling = this._MotorTorqueScaling;
            if ((this._RightWheel != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity tmp = new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp)));
                typedTarget._RightWheel = tmp;
            }
            if ((this._LeftWheel != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity tmp0 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftWheel)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp0)));
                typedTarget._LeftWheel = tmp0;
            }
            if ((this._ChassisShape != null)) {
                global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape tmp1 = new global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape();
                ((Microsoft.Dss.Core.IDssSerializable)(this._ChassisShape)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp1)));
                typedTarget._ChassisShape = tmp1;
            }
            if ((this._CasterWheelShape != null)) {
                global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape tmp2 = new global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape();
                ((Microsoft.Dss.Core.IDssSerializable)(this._CasterWheelShape)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp2)));
                typedTarget._CasterWheelShape = tmp2;
            }
            typedTarget._RotateDegreesAngleThreshold = this._RotateDegreesAngleThreshold;
            if ((this._FrontWheelShape != null)) {
                global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape tmp3 = new global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape();
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontWheelShape)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp3)));
                typedTarget._FrontWheelShape = tmp3;
            }
            if ((this._RearWheelShape != null)) {
                global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape tmp4 = new global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RearWheelShape)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp4)));
                typedTarget._RearWheelShape = tmp4;
            }
            if ((this._Kinect != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.KinectEntity tmp5 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.KinectEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._Kinect)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp5)));
                typedTarget._Kinect = tmp5;
            }
            if ((this._LeftSonar != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity tmp6 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftSonar)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp6)));
                typedTarget._LeftSonar = tmp6;
            }
            if ((this._RightSonar != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity tmp7 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightSonar)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp7)));
                typedTarget._RightSonar = tmp7;
            }
            if ((this._FrontLeftIR != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity tmp8 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontLeftIR)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp8)));
                typedTarget._FrontLeftIR = tmp8;
            }
            if ((this._FrontMiddleIR != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity tmp9 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontMiddleIR)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp9)));
                typedTarget._FrontMiddleIR = tmp9;
            }
            if ((this._FrontRightIR != null)) {
                global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity tmp10 = new global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity();
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontRightIR)).CopyTo(((Microsoft.Dss.Core.IDssSerializable)(tmp10)));
                typedTarget._FrontRightIR = tmp10;
            }
            typedTarget._TimeoutSeconds = this._TimeoutSeconds;
        }
        
        /// <summary>
        ///Clones ReferencePlatform2011Entity
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011Entity target0 = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011Entity();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current ReferencePlatform2011Entity to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            writer.Write(this._IsEnabled);
            writer.Write(this._MotorTorqueScaling);
            if ((this._RightWheel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightWheel)).Serialize(writer);
            }
            if ((this._LeftWheel == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftWheel)).Serialize(writer);
            }
            if ((this._ChassisShape == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._ChassisShape)).Serialize(writer);
            }
            if ((this._CasterWheelShape == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._CasterWheelShape)).Serialize(writer);
            }
            writer.Write(this._RotateDegreesAngleThreshold);
            if ((this._FrontWheelShape == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontWheelShape)).Serialize(writer);
            }
            if ((this._RearWheelShape == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RearWheelShape)).Serialize(writer);
            }
            if ((this._Kinect == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._Kinect)).Serialize(writer);
            }
            if ((this._LeftSonar == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._LeftSonar)).Serialize(writer);
            }
            if ((this._RightSonar == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._RightSonar)).Serialize(writer);
            }
            if ((this._FrontLeftIR == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontLeftIR)).Serialize(writer);
            }
            if ((this._FrontMiddleIR == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontMiddleIR)).Serialize(writer);
            }
            if ((this._FrontRightIR == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                ((Microsoft.Dss.Core.IDssSerializable)(this._FrontRightIR)).Serialize(writer);
            }
            writer.Write(this._TimeoutSeconds);
        }
        
        /// <summary>
        ///Deserializes ReferencePlatform2011Entity
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized ReferencePlatform2011Entity</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            this._IsEnabled = reader.ReadBoolean();
            this._MotorTorqueScaling = reader.ReadSingle();
            if ((reader.ReadByte() != 0)) {
                this._RightWheel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._LeftWheel = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.WheelEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._ChassisShape = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Physics.Proxy.BoxShape())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._CasterWheelShape = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape())).Deserialize(reader)));
            }
            this._RotateDegreesAngleThreshold = reader.ReadDouble();
            if ((reader.ReadByte() != 0)) {
                this._FrontWheelShape = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._RearWheelShape = ((global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Physics.Proxy.SphereShape())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._Kinect = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.KinectEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.KinectEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._LeftSonar = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._RightSonar = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.SonarEntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._FrontLeftIR = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._FrontMiddleIR = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity())).Deserialize(reader)));
            }
            if ((reader.ReadByte() != 0)) {
                this._FrontRightIR = ((global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity)(((Microsoft.Dss.Core.IDssSerializable)(new global::Microsoft.Robotics.Simulation.Engine.Proxy.IREntity())).Deserialize(reader)));
            }
            this._TimeoutSeconds = reader.ReadSingle();
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011State, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011State, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Subscribe : global::Microsoft.Dss.ServiceModel.Dssp.Subscribe<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault>> {
        
        public Subscribe() {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body) : 
                base(body) {
        }
        
        public Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ReferencePlatform2011Operations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get, global:: Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe> {
        
        public ReferencePlatform2011Operations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011State, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get operation = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011State, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get operation = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe operation, params System.Type[] types) {
            global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            operation = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.SubscribeResponseType, global:: W3C.Soap.Fault> Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe operation = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Subscribe(global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType body, global::Microsoft.Ccr.Core.IPort notificationPort, out global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe operation, params System.Type[] types) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.SubscribeRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.Subscribe(body);
            operation.NotificationPort = notificationPort;
            if ((types != null)) {
                body.TypeFilter = new string[types.Length];
                for (int index = 0; (index < types.Length); index = (index + 1)) {
                    body.TypeFilter[index] = global::Microsoft.Dss.ServiceModel.DsspServiceBase.DsspServiceBase.GetTypeFilterDescription(types[index]);
                }
            }
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Simulated Reference Platform 2011 for Robotics Developer Studio")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Simulated Reference Platform Robot 2011")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/2009/03/simulatedreferenceplatform2011.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2009/03/simulatedreferenceplatform2011.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/2009/03/simulatedreferenceplatform2011.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.ReferencePlatform2011Operations = new global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011Operations();
            this.BatteryOperations = new global::Microsoft.Robotics.Services.Battery.Proxy.BatteryOperations();
            this.DriveOperations = new global::Microsoft.Robotics.Services.Drive.Proxy.DriveOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.ReferencePlatform2011Operations, "http://schemas.microsoft.com/2009/03/simulatedreferenceplatform2011.user.html", "ReferencePlatform2011Operations", ""), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.BatteryOperations, "http://schemas.microsoft.com/2006/06/battery.html", "BatteryOperations", "/battery"), new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.DriveOperations, "http://schemas.microsoft.com/robotics/2006/05/drive.html", "DriveOperations", "/simulateddifferentialdrive"));
        }
        
        public global::Microsoft.Robotics.Services.Simulation.ReferencePlatform2011.Proxy.ReferencePlatform2011Operations ReferencePlatform2011Operations;
        
        public global::Microsoft.Robotics.Services.Battery.Proxy.BatteryOperations BatteryOperations;
        
        public global::Microsoft.Robotics.Services.Drive.Proxy.DriveOperations DriveOperations;
    }
}
