//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.SimulatedSonar.Y2006.M05, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7" +
    "f9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.Simulation.Sensors.Sonar.Proxy {
    
    
    /// <summary>
    ///            Models a sonar sensor using physics raycasting to determine impact points
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/simulation/services/2006/05/simulatedsonar." +
        "user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/simulation/services/2006/05/simulatedsonar." +
        "user.html", ElementName="SonarEntity")]
    [global::System.ComponentModel.DescriptionAttribute("Models a sonar sensor using physics raycasting to determine impact points")]
    public class SonarEntity : global::Microsoft.Robotics.Simulation.Engine.Proxy.LaserRangeFinderEntity, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public SonarEntity() {
        }
        
        /// <summary>
        ///Copies the data member values of the current SonarEntity to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.Simulation.Sensors.Sonar.Proxy.SonarEntity typedTarget = ((global::Microsoft.Robotics.Services.Simulation.Sensors.Sonar.Proxy.SonarEntity)(target));
        }
        
        /// <summary>
        ///Clones SonarEntity
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.Simulation.Sensors.Sonar.Proxy.SonarEntity target0 = new global::Microsoft.Robotics.Services.Simulation.Sensors.Sonar.Proxy.SonarEntity();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current SonarEntity to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
        }
        
        /// <summary>
        ///Deserializes SonarEntity
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized SonarEntity</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            return this;
        }
    }
    
    /// <summary>
    ///            Provides access to a simulated Sonar contract
    ///            using physics raycasting and the SonarEntity
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Provides access to a simulated sonar sensor.\n(Uses the Sonar contract.)")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Simulated Sonar")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/simulation/services/2006/05/simulatedsonar." +
            "user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/simulation/services/2006/05/simulatedsonar." +
                    "user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/simulation/services/2006/05/simulatedsonar." +
                    "user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.SonarOperations = new global::Microsoft.Robotics.Services.Sonar.Proxy.SonarOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.SonarOperations, "http://schemas.microsoft.com/robotics/simulation/services/2006/05/simulatedsonar." +
                        "user.html", "SonarOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.Sonar.Proxy.SonarOperations SonarOperations;
    }
}
