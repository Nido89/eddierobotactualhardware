//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Reflection.AssemblyVersionAttribute("0.0.0.0")]
[assembly: global::Microsoft.Dss.Core.Attributes.ServiceDeclarationAttribute(global::Microsoft.Dss.Core.Attributes.DssServiceDeclaration.Proxy, SourceAssemblyKey="User.PursuitCamera.Y2008.M04, Version=0.0.0.0, Culture=neutral, PublicKeyToken=7f" +
    "9074033fd3dcf7")]
[assembly: global::System.Security.SecurityTransparentAttribute()]
[assembly: global::System.Security.SecurityRulesAttribute(global::System.Security.SecurityRuleSet.Level1)]

namespace Microsoft.Robotics.Services.PursuitCamera.Proxy {
    
    
    /// <summary>
    ///            Stores the state for the PursuitCamera
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2008/04/pursuitcamera.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2008/04/pursuitcamera.user.html", ElementName="PursuitCameraState")]
    [global::System.ComponentModel.DescriptionAttribute("Stores the state for the PursuitCamera")]
    public class PursuitCameraState : global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PursuitCameraState() {
        }
        
        private string _CameraName;
        
        /// <summary>
        ///            Name of the camera to move
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Name of the camera to move")]
        public string CameraName {
            get {
                return this._CameraName;
            }
            set {
                this._CameraName = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PursuitCameraState to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraState typedTarget = ((global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraState)(target));
            typedTarget._CameraName = this._CameraName;
        }
        
        /// <summary>
        ///Clones PursuitCameraState
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraState target0 = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraState();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PursuitCameraState to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._CameraName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._CameraName);
            }
        }
        
        /// <summary>
        ///Deserializes PursuitCameraState
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PursuitCameraState</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                this._CameraName = reader.ReadString();
            }
            return this;
        }
    }
    
    /// <summary>
    ///            Various settings used by the PursuitCamera
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/2008/04/pursuitcamera.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/2008/04/pursuitcamera.user.html", ElementName="Settings")]
    [global::System.ComponentModel.DescriptionAttribute("Various settings used by the PursuitCamera")]
    public class Settings : global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public Settings() {
        }
        
        private float _MinDistance;
        
        /// <summary>
        ///            Minimum distance to keep the camera from the entity
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Minimum distance to keep the camera from the entity")]
        public float MinDistance {
            get {
                return this._MinDistance;
            }
            set {
                this._MinDistance = value;
            }
        }
        
        private float _MaxDistance;
        
        /// <summary>
        ///            Maximum distance to keep the camera from the entity
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Maximum distance to keep the camera from the entity")]
        public float MaxDistance {
            get {
                return this._MaxDistance;
            }
            set {
                this._MaxDistance = value;
            }
        }
        
        private float _Altitude;
        
        /// <summary>
        ///            Height above the ground plane to keep the camera
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Height above the ground plane to keep the camera")]
        public float Altitude {
            get {
                return this._Altitude;
            }
            set {
                this._Altitude = value;
            }
        }
        
        private float _OcclusionThreshold;
        
        /// <summary>
        ///            Distance from target point for occlusion to be considered
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Distance from target point for occlusion to be considered")]
        public float OcclusionThreshold {
            get {
                return this._OcclusionThreshold;
            }
            set {
                this._OcclusionThreshold = value;
            }
        }
        
        private bool _PreventOcclusion;
        
        /// <summary>
        ///            If true, try to prevent the view from the camera to the target from being occluded by obstacles
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("If true, try to prevent the view from the camera to the target from being occlude" +
            "d by obstacles")]
        public bool PreventOcclusion {
            get {
                return this._PreventOcclusion;
            }
            set {
                this._PreventOcclusion = value;
            }
        }
        
        private float _FieldOfView;
        
        /// <summary>
        ///            Camera vertical resolution in degrees
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Camera vertical resolution in degrees")]
        public float FieldOfView {
            get {
                return this._FieldOfView;
            }
            set {
                this._FieldOfView = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current Settings to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public virtual void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings typedTarget = ((global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings)(target));
            typedTarget._MinDistance = this._MinDistance;
            typedTarget._MaxDistance = this._MaxDistance;
            typedTarget._Altitude = this._Altitude;
            typedTarget._OcclusionThreshold = this._OcclusionThreshold;
            typedTarget._PreventOcclusion = this._PreventOcclusion;
            typedTarget._FieldOfView = this._FieldOfView;
        }
        
        /// <summary>
        ///Clones Settings
        ///</summary>
        ///<returns>cloned value</returns>
        public virtual object Clone() {
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings target0 = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current Settings to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public virtual void Serialize(System.IO.BinaryWriter writer) {
            writer.Write(this._MinDistance);
            writer.Write(this._MaxDistance);
            writer.Write(this._Altitude);
            writer.Write(this._OcclusionThreshold);
            writer.Write(this._PreventOcclusion);
            writer.Write(this._FieldOfView);
        }
        
        /// <summary>
        ///Deserializes Settings
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized Settings</returns>
        public virtual object Deserialize(System.IO.BinaryReader reader) {
            this._MinDistance = reader.ReadSingle();
            this._MaxDistance = reader.ReadSingle();
            this._Altitude = reader.ReadSingle();
            this._OcclusionThreshold = reader.ReadSingle();
            this._PreventOcclusion = reader.ReadBoolean();
            this._FieldOfView = reader.ReadSingle();
            return this;
        }
    }
    
    /// <summary>
    ///            Get message for PursuitCamera service
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("Get message for PursuitCamera service")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : global::Microsoft.Dss.ServiceModel.Dssp.Get<global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraState, global:: W3C.Soap.Fault>> {
        
        public Get() {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body) {
        }
        
        public Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraState, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            ChangeSettings message is used to update the settings in the PursuitCamera service
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("ChangeSettings message is used to update the settings in the PursuitCamera servic" +
        "e")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class ChangeSettings : global::Microsoft.Dss.ServiceModel.Dssp.Update<global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings, global:: Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault>> {
        
        public ChangeSettings() {
        }
        
        public ChangeSettings(global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings body) : 
                base(body) {
        }
        
        public ChangeSettings(global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings body, global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> responsePort) : 
                base(body, responsePort) {
        }
    }
    
    /// <summary>
    ///            PursuitCamera service operations 
    ///            </summary>
    [global::System.ComponentModel.DescriptionAttribute("PursuitCamera service operations")]
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class PursuitCameraOperations : global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, global:: Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, global:: Microsoft.Robotics.Services.PursuitCamera.Proxy.Get, global:: Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings> {
        
        public PursuitCameraOperations() {
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup() {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.LookupResponse, global::W3C.Soap.Fault> DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultLookup(global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop() {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType, global::W3C.Soap.Fault> DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice DsspDefaultDrop(global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType body, out global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            }
            operation = new global::Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraState, global:: W3C.Soap.Fault> Get() {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Get operation = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(out global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Get operation) {
            global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            operation = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraState, global:: W3C.Soap.Fault> Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Get operation = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice Get(global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, out global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Get operation) {
            if ((body == null)) {
                body = new global::Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            }
            operation = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Get(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ChangeSettings() {
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings body = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings();
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings operation = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ChangeSettings(out global::Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings operation) {
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings body = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings();
            operation = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.PortSet<global::Microsoft.Dss.ServiceModel.Dssp.DefaultUpdateResponseType, global:: W3C.Soap.Fault> ChangeSettings(global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings body) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings();
            }
            global::Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings operation = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
        
        public virtual global::Microsoft.Ccr.Core.Choice ChangeSettings(global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings body, out global::Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings operation) {
            if ((body == null)) {
                body = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.Settings();
            }
            operation = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.ChangeSettings(body);
            this.Post(operation);
            return operation.ResponsePort;
        }
    }
    
    /// <summary>
    ///            Implements a Pursuit Camera for Simulation
    ///            </summary>
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    [global::System.ComponentModel.DescriptionAttribute("Implements a Pursuit Camera for Simulation")]
    [global::System.ComponentModel.DisplayNameAttribute("(User) Pursuit Camera")]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/2008/04/pursuitcamera.user.html";
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="service">service path</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, string service, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2008/04/pursuitcamera.user.html", service);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
        
        /// <summary>Creates a new instance of the service.</summary>
        /// <param name="constructorServicePort">Service constructor port</param>
        /// <param name="partners">the partners of the service instance</param>
        /// <returns>create service response port</returns>
        public static global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> CreateService(global::Microsoft.Dss.Services.Constructor.ConstructorPort constructorServicePort, params Microsoft.Dss.ServiceModel.Dssp.PartnerType[] partners) {
            global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse> result = new global::Microsoft.Dss.ServiceModel.Dssp.DsspResponsePort<Microsoft.Dss.ServiceModel.Dssp.CreateResponse>();
            global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType serviceInfo = new global::Microsoft.Dss.ServiceModel.Dssp.ServiceInfoType("http://schemas.microsoft.com/robotics/2008/04/pursuitcamera.user.html", null);
            if ((partners != null)) {
                serviceInfo.PartnerList = new System.Collections.Generic.List<Microsoft.Dss.ServiceModel.Dssp.PartnerType>(partners);
            }
            global::Microsoft.Dss.Services.Constructor.Create create = new global::Microsoft.Dss.Services.Constructor.Create(serviceInfo, result);
            constructorServicePort.Post(create);
            return result;
        }
    }
    
    public class CombinedOperationsPort : global::Microsoft.Dss.Core.DssCombinedOperationsPort {
        
        public CombinedOperationsPort() {
            this.PursuitCameraOperations = new global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraOperations();
            base.Initialize(new global::Microsoft.Dss.Core.DssOperationsPortMetadata(this.PursuitCameraOperations, "http://schemas.microsoft.com/robotics/2008/04/pursuitcamera.user.html", "PursuitCameraOperations", ""));
        }
        
        public global::Microsoft.Robotics.Services.PursuitCamera.Proxy.PursuitCameraOperations PursuitCameraOperations;
    }
}
namespace Microsoft.Robotics.Entities.PursuitCamera.Proxy {
    
    
    /// <summary>
    ///            PursuitCameraEntity is a camera entity that follows a target entity around
    ///            </summary>
    [global::Microsoft.Dss.Core.Attributes.DataContractAttribute(Namespace="http://schemas.microsoft.com/robotics/entity/2008/04/pursuitcamera.user.html")]
    [global::System.Xml.Serialization.XmlRootAttribute(Namespace="http://schemas.microsoft.com/robotics/entity/2008/04/pursuitcamera.user.html", ElementName="PursuitCameraEntity")]
    [global::System.ComponentModel.DescriptionAttribute("PursuitCameraEntity is a camera entity that follows a target entity around")]
    public class PursuitCameraEntity : global::Microsoft.Robotics.Simulation.Engine.Proxy.CameraEntity, global::Microsoft.Dss.Core.IDssSerializable, global::System.ICloneable {
        
        public PursuitCameraEntity() {
        }
        
        private string _TargetName;
        
        /// <summary>
        ///            Name of the entity to track
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Name of the entity to track")]
        public string TargetName {
            get {
                return this._TargetName;
            }
            set {
                this._TargetName = value;
            }
        }
        
        private float _MinDistance;
        
        /// <summary>
        ///            Minimum distance to keep the camera from the entity
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Minimum distance to keep the camera from the entity")]
        public float MinDistance {
            get {
                return this._MinDistance;
            }
            set {
                this._MinDistance = value;
            }
        }
        
        private float _MaxDistance;
        
        /// <summary>
        ///            Maximum distance to keep the camera from the entity
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Maximum distance to keep the camera from the entity")]
        public float MaxDistance {
            get {
                return this._MaxDistance;
            }
            set {
                this._MaxDistance = value;
            }
        }
        
        private float _Altitude;
        
        /// <summary>
        ///            Height above the ground plane to keep the camera
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Height above the ground plane to keep the camera")]
        public float Altitude {
            get {
                return this._Altitude;
            }
            set {
                this._Altitude = value;
            }
        }
        
        private bool _PreventOcclusion;
        
        /// <summary>
        ///            If true, try to prevent the view from the camera to the target from being occluded by obstacles
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("If true, try to prevent the view from the camera to the target from being occlude" +
            "d by obstacles")]
        public bool PreventOcclusion {
            get {
                return this._PreventOcclusion;
            }
            set {
                this._PreventOcclusion = value;
            }
        }
        
        private float _OcclusionThreshold;
        
        /// <summary>
        ///            Threshold distance from the target position that is considered to be occlusion
        ///            </summary>
        [global::Microsoft.Dss.Core.Attributes.DataMemberAttribute(Order=-1)]
        [global::System.ComponentModel.DescriptionAttribute("Threshold distance from the target position that is considered to be occlusion")]
        public float OcclusionThreshold {
            get {
                return this._OcclusionThreshold;
            }
            set {
                this._OcclusionThreshold = value;
            }
        }
        
        /// <summary>
        ///Copies the data member values of the current PursuitCameraEntity to the specified target object
        ///</summary>
        ///<param name="target">target object (must be an instance of)</param>
        public override void CopyTo(Microsoft.Dss.Core.IDssSerializable target) {
            base.CopyTo(target);
            global::Microsoft.Robotics.Entities.PursuitCamera.Proxy.PursuitCameraEntity typedTarget = ((global::Microsoft.Robotics.Entities.PursuitCamera.Proxy.PursuitCameraEntity)(target));
            typedTarget._TargetName = this._TargetName;
            typedTarget._MinDistance = this._MinDistance;
            typedTarget._MaxDistance = this._MaxDistance;
            typedTarget._Altitude = this._Altitude;
            typedTarget._PreventOcclusion = this._PreventOcclusion;
            typedTarget._OcclusionThreshold = this._OcclusionThreshold;
        }
        
        /// <summary>
        ///Clones PursuitCameraEntity
        ///</summary>
        ///<returns>cloned value</returns>
        public override object Clone() {
            global::Microsoft.Robotics.Entities.PursuitCamera.Proxy.PursuitCameraEntity target0 = new global::Microsoft.Robotics.Entities.PursuitCamera.Proxy.PursuitCameraEntity();
            this.CopyTo(target0);
            return target0;
        }
        
        /// <summary>
        ///Serializes the data member values of the current PursuitCameraEntity to the specified writer
        ///</summary>
        ///<param name="writer">the writer to which to serialize</param>
        public override void Serialize(System.IO.BinaryWriter writer) {
            base.Serialize(writer);
            if ((this._TargetName == null)) {
                writer.Write(((byte)(0)));
            }
            else {
                writer.Write(((byte)(1)));
                writer.Write(this._TargetName);
            }
            writer.Write(this._MinDistance);
            writer.Write(this._MaxDistance);
            writer.Write(this._Altitude);
            writer.Write(this._PreventOcclusion);
            writer.Write(this._OcclusionThreshold);
        }
        
        /// <summary>
        ///Deserializes PursuitCameraEntity
        ///</summary>
        ///<param name="reader">the reader from which to deserialize</param>
        ///<returns>deserialized PursuitCameraEntity</returns>
        public override object Deserialize(System.IO.BinaryReader reader) {
            base.Deserialize(reader);
            if ((reader.ReadByte() != 0)) {
                this._TargetName = reader.ReadString();
            }
            this._MinDistance = reader.ReadSingle();
            this._MaxDistance = reader.ReadSingle();
            this._Altitude = reader.ReadSingle();
            this._PreventOcclusion = reader.ReadBoolean();
            this._OcclusionThreshold = reader.ReadSingle();
            return this;
        }
    }
    
    [global::System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public class Contract {
        
        public const string Identifier = "http://schemas.microsoft.com/robotics/entity/2008/04/pursuitcamera.user.html";
    }
}
